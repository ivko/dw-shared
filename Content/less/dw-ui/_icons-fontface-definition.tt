<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".less" #>
<#
var eot = "../fonts/dwIconFont/dwIconFont.eot";
var allFonts = new Dictionary<string,string>()
{
	{ "embedded-opentype", "../fonts/dwIconFont/dwIconFont.eot" },
	{ "svg", "../fonts/dwIconFont/dwIconFont.svg" },
	{ "truetype", "../fonts/dwIconFont/dwIconFont.ttf" },
	{ "woff", "../fonts/dwIconFont/dwIconFont.woff" }
};
#>
<#/* The dummy class resolves the compilation error of the less file */#>
.dummy {}
@font-face {
    font-family: 'dwIconFont';
<#
	WriteLine("    src: ~\"url('{0}')\";", GenerateHashedPath(eot));
	var list = string.Join(",\n", allFonts.Select(f => string.Format("        ~\"url('{0}')\" format('{1}')", GenerateHashedPath(f.Value), f.Key)));
	WriteLine("    src:\n{0};", list);
#>
    font-weight: normal;
    font-style: normal;
}

<#+
string GetRealFilePath(string path)
{
	var fileName = System.IO.Path.GetFileName(path);
	var realPath = System.IO.Path.Combine(@"..\..\fonts\dwIconFont", fileName);
	return realPath;
}

string GenerateHashedPath(string path)
{
	string absolutePath = Host.ResolvePath(GetRealFilePath(path));
	var contentAsBytes = File.ReadAllBytes(absolutePath);
	var hasher = System.Security.Cryptography.MD5.Create();
	var hashBytes = hasher.ComputeHash(contentAsBytes);
	var hash = string.Join("", hashBytes.Select(b => string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:X2}", b)));

	string ext = Path.GetExtension(path);
	return path.Substring(0, path.Length - ext.Length) + ext + "?hash=" + hash;
}
#>