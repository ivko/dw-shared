//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <reference path="ServiceFixes.d.ts" />

declare module dev.docuware.com.bpw {
    export class WorkflowDefinition {
        ActiveInstances: number;
        CreateDate: Date;
        CreateUserId: string;
        CurrentWorkflowVersion: number;
        DeleteDate: Date;
        FileCabinet: dev.docuware.com.bpw.DocuWareFileCabinet;
        FileCabinetName: string;
        Id: string;
        ModifyDate: Date;
        ModifyUserId: string;
        Name: string;
        PublishedVersion: string;
        PublishedVersionId: string;
        SystemActivityToken: string;
        SystemUserGuid: string;
        XmlData: dev.docuware.com.bpw.WorkflowXmlData;
    }

    export class DocuWareFileCabinet {
        AllowEMailAlerts: boolean;
        ID: string;
        Name: string;
    }

    export class WorkflowXmlData extends dev.docuware.com.bpw.BaseXmlDataColumn {
        CreateUser: dev.docuware.com.bpw.ExternalEntity;
        FileCabinet: dev.docuware.com.bpw.ExternalEntity;
        ModifyUser: dev.docuware.com.bpw.ExternalEntity;
        SystemUserName: string;
        SystemUserPassword: string;
        TaskViewDefinition: dev.docuware.com.bpw.DWTaskViewDefinition;
    }

    export class BaseXmlDataColumn {

    }

    export class DWTaskViewDefinition extends dev.docuware.com.bpw.BaseXmlDataColumn {
        Columns: Array<dev.docuware.com.bpw.TaskViewColumn>;
        Order: DocuWare.WAFServices.DataContracts.BpwDesignService.SortOrder;
        SortByColumn: string;
    }

    export class WorkflowVersionXmlData extends dev.docuware.com.bpw.BaseXmlDataColumn {
        AccessUser: dev.docuware.com.bpw.ExternalEntity;
        CreateUser: dev.docuware.com.bpw.ExternalEntity;
        CreatedInVersion: string;
        LastModifiedInVersion: string;
        ModifyUser: dev.docuware.com.bpw.ExternalEntity;
        PublishUser: dev.docuware.com.bpw.ExternalEntity;
        TaskViewDefinition: dev.docuware.com.bpw.DWTaskViewDefinition;
        Trigger: dev.docuware.com.bpw.WorkflowTriggerBase;
    }

    export class ExternalEntity {
        EntityType: dev.docuware.com.bpw.ExternalEntityType;
        Guid: string;
        Name: string;
    }

    export class TaskViewColumn {
        DecimalPlaces: number;
        IsForControllerOnly: boolean;
        Name: string;
        PropertyName: string;
        PropertyType: dev.docuware.com.bpw.DataTypeEnum;
    }

    const enum DataTypeEnum {
        Text = 0,
        Integer = 1,
        Decimal = 2,
        Date = 3,
        DateTime = 4,
        User = 5,
        Role = 6,
        SubstitutionRule = 7,
        Password = 8,
        Keyword = 9,
        Link = 10,
        Description = 11,
    }

    export class WorkflowTriggerBase {
        AssignToData: dev.docuware.com.bpw.InitialAssignTo;
    }

    const enum ExternalEntityType {
        User = 0,
        Role = 1,
        Group = 2,
        SubstitutionList = 3,
        SelectList = 4,
        FileCabinet = 5,
        SubstitutionRule = 6,
        Organization = 7,
        ExternalSelectList = 8,
        FixedSelectList = 9,
    }

    export class InitialAssignTo {
        AssignToDefinition: Array<dev.docuware.com.bpw.ExternalEntity>;
        AssignToType: dev.docuware.com.bpw.InitialAssignToType;
    }

    export class PublishSettings extends dev.docuware.com.bpw.WorkflowTriggerBase {
        Filter: dev.docuware.com.bpw.Filter;
        FilterAfter: dev.docuware.com.bpw.Filter;
        TriggersFor: dev.docuware.com.settings.notification.DocumentChangeRuleKind;
    }

    export class ScheduledJob extends dev.docuware.com.bpw.WorkflowTriggerBase {
        Filter: dev.docuware.com.settings.web.querybuilder.QueryBuilderSettingsType;
        Schedule: dev.docuware.com.bpw.ScheduleBase;
    }

    const enum InitialAssignToType {
        ModifyUser = 0,
        StoreUser = 1,
        Custom = 2,
    }

    export class Filter {
        DocFields: Array<dev.docuware.com.bpw.FilterField>;
        TypeCombining: string;
    }

    export class FilterField {
        Name: string;
        Operand: dev.docuware.com.bpw.LogicalOperation;
        Value: string;
    }

    export class LogicalOperation {
        DisplayName: string;
        OperationType: dev.docuware.com.bpw.OperationType;
    }

    const enum OperationType {
        Equal = 0,
        NotEqual = 1,
        GreaterThan = 2,
        GreaterThanOrEqualTo = 3,
        LessThan = 4,
        LessThanOrEqualTo = 5,
        Contains = 6,
        BeginsWith = 7,
        EndsWith = 8,
        IsEmpty = 9,
        IsNotEmpty = 10,
        HasChanged = 11,
    }

    export class ScheduleBase {
        StartAt: Date;
        EndAt: Date;
    }

    export class DailySchedule extends dev.docuware.com.bpw.ScheduleBase {
        CustomWeekdays: dev.docuware.com.bpw.Week;
        RepeatInterval: dev.docuware.com.bpw.DailyRepeatInterval;
    }

    export class WeeklySchedule extends dev.docuware.com.bpw.ScheduleBase {
        DayOfWeek: System.DayOfWeek;
        RepeatInterval: dev.docuware.com.bpw.WeeklyRepeatInterval;
    }

    export class MonthlySchedule extends dev.docuware.com.bpw.ScheduleBase {
        Mode: dev.docuware.com.bpw.MonthlyFrequencyMode;
        RepeatInterval: dev.docuware.com.bpw.MonthlyRepeatInterval;
        SelectedDay: number;
        WeekDay: System.DayOfWeek;
    }

    export class Week {
        Monday: boolean;
        Tuesday: boolean;
        Wednesday: boolean;
        Thursday: boolean;
        Friday: boolean;
        Saturday: boolean;
        Sunday: boolean;
    }

    const enum DailyRepeatInterval {
        EveryDay = 0,
        Weekdays = 1,
        Weekends = 2,
        Custom = 3,
    }

    const enum WeeklyRepeatInterval {
        EveryWeek = 0,
        EveryTwoWeeks = 1,
        EveryThreeWeeks = 2,
    }

    const enum MonthlyFrequencyMode {
        First = 0,
        Second = 1,
        Third = 2,
        Fourth = 3,
        SelectDay = 4,
    }

    const enum MonthlyRepeatInterval {
        EveryMonth = 0,
        EveryTwoMonths = 1,
        EveryThreeMonths = 2,
        EveryFourMonths = 3,
        EverySixMonths = 5,
        EveryTwelveMonths = 11,
    }

    export class WorkflowVersion {
        AccessDate: Date;
        AccessUserId: string;
        CreateDate: Date;
        CreateUserId: string;
        Definition: string;
        Description: string;
        ErrorsList: Array<string>;
        Id: string;
        ModifyDate: Date;
        ModifyUserId: string;
        PublishDate: Date;
        PublishUserId: string;
        Published: boolean;
        PublishedVersion: number;
        ReadOnly: boolean;
        ThumbnailStream: System.IO.MemoryStream;
        Trigger: dev.docuware.com.bpw.WorkflowTriggerBase;
        UserRole: string;
        Version: number;
        WFInstancesCount: number;
        WorkflowId: string;
        XmlData: dev.docuware.com.bpw.WorkflowVersionXmlData;
    }

    export class Instance {
        CreationDate: Date;
        CurrentActivity: string;
        CurrentActivityName: string;
        DocumentId: number;
        InstanceId: string;
        LastUserAction: Date;
        Version: number;
    }

    export class DataField {
        DigitsAfterDecimalPoints: number;
        DisplayName: string;
        DocuWareDBName: string;
        DocuWareType: string;
        ID: string;
        IsSystemField: boolean;
        Name: string;
        TypeValueAssembly: string;
    }

    export class WorkflowPermissions {
        Id: string;
        WFControllers: Array<dev.docuware.com.bpw.DocuWarePrincipal>;
        WFDesigners: Array<dev.docuware.com.bpw.DocuWarePrincipal>;
        WorkflowId: string;
    }

    export class DocuWarePrincipal {
        ID: string;
        Name: string;
        PrincipalType: dev.docuware.com.bpw.ExternalEntityType;
    }

    export class WfVersionActiveInstances {
        ActiveInstancesCount: number;
        WfVersionId: string;
    }
}

declare module DocuWare.WAFServices.DataContracts.BpwDesignService {
    const enum SortOrder {
        Ascending = 0,
        Descending = 1,
    }
}

declare module dev.docuware.com.settings.notification {
    const enum DocumentChangeRuleKind {
        Store = 0,
        Update = 1,
        StoreAndUpdate = 2,
    }

    export class DocumentChangeRule extends dev.docuware.com.settings.notification.Rule {
        AfterState: dev.docuware.com.settings.notification.DocumentChangeRuleAfterState;
        BeforeState: dev.docuware.com.settings.notification.DocumentChangeRuleBeforeState;
        Kind: dev.docuware.com.settings.notification.DocumentChangeRuleKind;
    }

    export class Rule extends dev.docuware.com.settings.interop.DWSetting {
        Active: boolean;
        Description: string;
        FileCabinetGuid: string;
        Guid: string;
        ID: number;
        Name: string;
    }

    export class AIXDocumentChangeRule extends DocumentChangeRule {
        WorkflowGuid: string;
    }

    export class BPWDocumentChangeRule extends dev.docuware.com.settings.notification.DocumentChangeRule {

    }

    export class DocumentChangeRuleAfterState {
        SimpleFilter: dev.docuware.com.settings.notification.SimpleFilter;
    }

    export class SimpleFilter extends dev.docuware.com.settings.notification.Conditions {
        Combine: dev.docuware.com.settings.notification.SimpleFilterCombine;
    }

    export class Conditions {
        Items: Array<dev.docuware.com.settings.notification.FieldCondition>;
    }

    export class FieldCondition {
        Name: string;
        Value: string;
    }

    export class Function extends dev.docuware.com.settings.notification.FieldCondition {
        Params: string;
    }

    export class Empty extends dev.docuware.com.settings.notification.Function {

    }

    export class Changed extends dev.docuware.com.settings.notification.Function {

    }

    export class NotEmpty extends dev.docuware.com.settings.notification.Function {

    }

    export class BinaryCondition extends dev.docuware.com.settings.notification.FieldCondition {

    }

    export class RangeCondition extends dev.docuware.com.settings.notification.BinaryCondition {
        From: string;
    }

    export class Range extends dev.docuware.com.settings.notification.RangeCondition {

    }

    export class RelativeCondition extends dev.docuware.com.settings.notification.BinaryCondition {
        Period: dev.docuware.com.settings.notification.RelativeConditionPeriod;
        Utc: boolean;
    }

    const enum RelativeConditionPeriod {
        Hour = 0,
        Day = 1,
        Month = 2,
        Year = 3,
    }

    export class BeforeThePast extends dev.docuware.com.settings.notification.RelativeCondition {

    }

    export class BeforeTheNext extends dev.docuware.com.settings.notification.RelativeCondition {

    }

    export class AfterTheNext extends dev.docuware.com.settings.notification.RelativeCondition {

    }

    export class AfterThePast extends dev.docuware.com.settings.notification.RelativeCondition {

    }

    export class WithinTheNext extends dev.docuware.com.settings.notification.RelativeCondition {

    }

    export class WithinThePast extends dev.docuware.com.settings.notification.RelativeCondition {

    }

    export class Ends extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class Begins extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class Contains extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class MoreOrEqual extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class More extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class Less extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class LessOrEqual extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class Different extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class NotEqual extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    export class Equal extends dev.docuware.com.settings.notification.BinaryCondition {

    }

    const enum SimpleFilterCombine {
        And = 0,
        Or = 1,
    }

    export class DocumentChangeRuleBeforeState {
        SimpleFilter: dev.docuware.com.settings.notification.SimpleFilter;
    }

    export class ActionConfiguration extends dev.docuware.com.settings.notification.NotificationSetting {

    }

    export class NotificationSetting extends dev.docuware.com.settings.interop.DWSetting {
        Guid: string;
        ID: number;
        Name: string;
        RuleGuid: string;
    }

    export class EmailActionConfiguration extends dev.docuware.com.settings.notification.ActionConfiguration {
        EmailAsHtml: boolean;
        EmailBody: dev.docuware.com.settings.notification.EmailBody;
        EmailSubject: string;
        ROAccess: boolean;
        WebConnectionGuid: string;
    }

    export class EmailBody {
        DocumentLinkTextField: string;
        Tasklist: dev.docuware.com.settings.notification.Tasklist;
        Template: string;
    }

    export class Tasklist {
        Guid: string;
        LinkText: string;
    }

    export class Subscription extends dev.docuware.com.settings.notification.NotificationSetting {

    }

    export class EmailSubscription extends dev.docuware.com.settings.notification.Subscription {
        Delivery: dev.docuware.com.settings.notification.Delivery;
        Recipient: dev.docuware.com.settings.notification.Recipient;
    }

    export class Delivery {
        Interval: dev.docuware.com.settings.notification.Interval;
        Start: Date;
    }

    export class Interval {
        Type: dev.docuware.com.settings.notification.IntervalType;
        Value: number;
    }

    const enum IntervalType {
        Minutes = 0,
        Hours = 1,
        Days = 2,
        Weeks = 3,
        Months = 4,
    }

    export class Recipient {
        Text: Array<string>;
        Type: dev.docuware.com.settings.notification.RecipientType;
    }

    const enum RecipientType {
        User = 0,
        Field = 1,
    }

    export class BusinessWorkflowSubscription extends dev.docuware.com.settings.notification.Subscription {
        Task: string;
    }

    export class RuleQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {
        Active: boolean;
        FileCabinetGuid: string;
        FileCabinetGuids: Array<string>;
        RuleTypeAsString: string;
        RuleTypesAsString: Array<string>;
    }

    export class NotificationSettingQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        RuleGuid: string;
        RuleGuids: Array<string>;
        RuleID: number;
        RuleIDs: Array<number>;
        TypeAsString: string;
    }
}

declare module dev.docuware.com.settings.web.querybuilder {
    export class QueryBuilderSettingsType {
        Root: dev.docuware.com.settings.web.querybuilder.GroupCondition;
    }

    export class GroupCondition extends dev.docuware.com.settings.web.querybuilder.BaseCondition {
        Conditions: Array<dev.docuware.com.settings.web.querybuilder.BaseCondition>;
        Operation: dev.docuware.com.settings.web.querybuilder.GroupConditionOperation;
    }

    export class BaseCondition {

    }

    export class Condition extends dev.docuware.com.settings.web.querybuilder.BaseCondition {
        DBName: string;
        Provider: dev.docuware.com.settings.web.querybuilder.ConditionProvider;
    }

    const enum GroupConditionOperation {
        And = 0,
        Or = 1,
    }

    export class ConditionProvider {

    }

    export class FieldConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        FieldDbName: string;
    }

    export class FieldDecimalConditionProvider extends dev.docuware.com.settings.web.querybuilder.FieldConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.FieldDecimalConditionOperation;
    }

    export class FieldNumericConditionProvider extends dev.docuware.com.settings.web.querybuilder.FieldConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.FieldNumericConditionOperation;
    }

    export class FieldDateTimeConditionProvider extends dev.docuware.com.settings.web.querybuilder.FieldConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.FieldDateTimeConditionOperation;
    }

    export class FieldDateConditionProvider extends dev.docuware.com.settings.web.querybuilder.FieldConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.FieldDateConditionOperation;
    }

    export class FieldKeywordConditionProvider extends dev.docuware.com.settings.web.querybuilder.FieldConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.FieldKeywordConditionOperation;
    }

    export class FieldTextConditionProvider extends dev.docuware.com.settings.web.querybuilder.FieldConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.FieldTextConditionOperation;
    }

    export class RangeDecimalConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        FromValueAsString: string;
        Operation: dev.docuware.com.settings.web.querybuilder.RangeDecimalConditionOperation;
        ToValueAsString: string;
    }

    export class DecimalConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.DecimalConditionOperation;
        ValueAsString: string;
    }

    export class RangeNumericConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        FromValue: number;
        Operation: dev.docuware.com.settings.web.querybuilder.RangeNumericConditionOperation;
        ToValue: number;
    }

    export class NumericConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.NumericConditionOperation;
        Value: number;
    }

    export class RelativeDateTimeConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.RelativeDateTimeConditionOperation;
        Period: dev.docuware.com.settings.web.querybuilder.RelativeDateTimePeriod;
        Value: number;
    }

    export class RangeDateTimeConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        FromValue: Date;
        Operation: dev.docuware.com.settings.web.querybuilder.RangeDateTimeConditionOperation;
        ToValue: Date;
    }

    export class DateTimeConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.DateTimeConditionOperation;
        SystemFunction: dev.docuware.com.settings.web.querybuilder.SystemFunctions;
        Value: Date;
    }

    export class RelativeDateConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.RelativeDateConditionOperation;
        Period: dev.docuware.com.settings.web.querybuilder.RelativeDatePeriod;
        Value: number;
    }

    export class RangeDateConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        FromValue: Date;
        Operation: dev.docuware.com.settings.web.querybuilder.RangeDateConditionOperation;
        ToValue: Date;
    }

    export class DateConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.DateConditionOperation;
        SystemFunction: dev.docuware.com.settings.web.querybuilder.SystemFunctions;
        Value: Date;
    }

    export class EmptyConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.EmptyConditionOperation;
    }

    export class SqlConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        AddWildcard: boolean;
        Operation: dev.docuware.com.settings.web.querybuilder.SqlConditionOperation;
        Value: string;
    }

    export class MemoConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.MemoConditionOperation;
        SystemFunction: dev.docuware.com.settings.web.querybuilder.SystemFunctions;
        Value: string;
    }

    export class KeywordConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.KeywordConditionOperation;
        SystemFunction: dev.docuware.com.settings.web.querybuilder.SystemFunctions;
        Value: string;
    }

    export class TextConditionProvider extends dev.docuware.com.settings.web.querybuilder.ConditionProvider {
        Operation: dev.docuware.com.settings.web.querybuilder.TextConditionOperation;
        SystemFunction: dev.docuware.com.settings.web.querybuilder.SystemFunctions;
        Value: string;
    }

    const enum FieldDecimalConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Less = 2,
        LessEqual = 3,
        More = 4,
        MoreEqual = 5,
    }

    const enum FieldNumericConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Less = 2,
        LessEqual = 3,
        More = 4,
        MoreEqual = 5,
    }

    const enum FieldDateTimeConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Less = 2,
        LessEqual = 3,
        More = 4,
        MoreEqual = 5,
    }

    const enum FieldDateConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Less = 2,
        LessEqual = 3,
        More = 4,
        MoreEqual = 5,
    }

    const enum FieldKeywordConditionOperation {
        Contains = 0,
    }

    const enum FieldTextConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Contains = 2,
        Begins = 3,
        Ends = 4,
    }

    const enum RangeDecimalConditionOperation {
        Range = 0,
    }

    const enum DecimalConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Less = 2,
        LessEqual = 3,
        More = 4,
        MoreEqual = 5,
    }

    const enum RangeNumericConditionOperation {
        Range = 0,
    }

    const enum NumericConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Less = 2,
        LessEqual = 3,
        More = 4,
        MoreEqual = 5,
    }

    const enum RelativeDateTimeConditionOperation {
        WithinThePast = 0,
        WithinTheNext = 1,
        AfterThePast = 2,
        AfterTheNext = 3,
        BeforeTheNext = 4,
        BeforeThePast = 5,
    }

    const enum RelativeDateTimePeriod {
        Hour = 0,
        Day = 1,
        Month = 2,
        Year = 3,
    }

    const enum RangeDateTimeConditionOperation {
        Range = 0,
    }

    const enum DateTimeConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Less = 2,
        LessEqual = 3,
        More = 4,
        MoreEqual = 5,
    }

    const enum SystemFunctions {
        None = 0,
        CurrentUserLongName = 1,
        CurrentUserShortName = 2,
        CurrentUserEMail = 3,
        CurrentDate = 4,
        CurrentDateTime = 5,
        CurrentDay = 6,
        CurrentHour = 7,
        CurrentMonth = 8,
        CurrentYear = 9,
        CurrentYearMonth = 10,
    }

    const enum RelativeDateConditionOperation {
        WithinThePast = 0,
        WithinTheNext = 1,
        AfterThePast = 2,
        AfterTheNext = 3,
        BeforeTheNext = 4,
        BeforeThePast = 5,
    }

    const enum RelativeDatePeriod {
        Day = 0,
        Month = 1,
        Year = 2,
    }

    const enum RangeDateConditionOperation {
        Range = 0,
    }

    const enum DateConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Less = 2,
        LessEqual = 3,
        More = 4,
        MoreEqual = 5,
    }

    const enum EmptyConditionOperation {
        Empty = 0,
        NotEmpty = 1,
    }

    const enum SqlConditionOperation {
        Is = 0,
    }

    const enum MemoConditionOperation {
        Contains = 0,
    }

    const enum KeywordConditionOperation {
        Contains = 0,
    }

    const enum TextConditionOperation {
        Equal = 0,
        NotEqual = 1,
        Contains = 2,
        Begins = 3,
        Ends = 4,
    }
}

declare module System {
    const enum DayOfWeek {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    }

    export class MarshalByRefObject {
        __identity: any;
    }

    export class TupleOfstringstring {
        m_Item1: string;
        m_Item2: string;
    }

    export class TupleOfguidstring {
        m_Item1: string;
        m_Item2: string;
    }
}

declare module System.IO {
    export class MemoryStream {
        _buffer: Array<number>;
        _capacity: number;
        _expandable: boolean;
        _exposable: boolean;
        _isOpen: boolean;
        _length: number;
        _origin: number;
        _position: number;
        _writable: boolean;
    }

    export class Stream {

    }
}

declare module dev.docuware.com.public.services.intellix {
    export class IntellixFieldAssignments {
        IntellixLanguage: string;
        Items: Array<any>;
    }

    export class FieldMapping {
        FieldDBName: string;
        IntellixFieldName: string;
    }
}

declare module dev.docuware.com.settings.barcode.configuration {
    export class OBRQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {

    }

    export class OBRConfigHeader extends dev.docuware.com.settings.ocr.OptRecHeader {

    }

    export class OBRConfig extends dev.docuware.com.settings.ocr.OptRecConfig {
        Body: dev.docuware.com.settings.barcode.configuration.OBRConfigBody;
        Header: dev.docuware.com.settings.barcode.configuration.OBRConfigHeader;
    }

    export class OBRConfigBody extends dev.docuware.com.settings.ocr.OptRecBody {
        BarcodeTypes: Array<dev.docuware.com.settings.ocr.BarcodeType>;
        TradeOff: dev.docuware.com.settings.ocr.TradeOffType;
    }
}

declare module dev.docuware.com.settings.cabinet {
    export class KeywordTable {
        Name: string;
        Value: string;
    }

    export class LegacyKeywordTable {
        Name: string;
        Value: string;
    }

    export class LegacyTable {
        Type: dev.docuware.com.settings.cabinet.LegacyDwTableTypes;
        Value: string;
    }

    const enum LegacyDwTableTypes {
        Main = 0,
        System = 1,
        Disks = 2,
        Lock = 3,
        FtDict = 4,
        FtIndex = 5,
        FtDoc = 6,
        FtMain = 7,
        Synchronization = 8,
        MasterDelete = 9,
        FtSectionStatus = 10,
        Section = 11,
        Page = 12,
        Version = 13,
        ReplicationDeletion = 14,
    }

    export class Table {
        Type: dev.docuware.com.settings.cabinet.DwTableTypes;
        Value: string;
    }

    const enum DwTableTypes {
        Document = 0,
        Section = 1,
        Page = 2,
        PageBlob = 3,
        Identity = 4,
        Keyword = 5,
        Version = 6,
        Lock = 7,
    }
}

declare module dev.docuware.com.settings.common.dwschedule {
    export class DwSchedule {
        Active: boolean;
        Guid: string;
        Id: number;
        OrganizationGuid: string;
        ScheduleOnEvent: ScheduleOnEvent;
        ScheduleOnTime: ScheduleOnTime;
        SettingsGuid: string;
        Type: ScheduleType;
    }

    const enum ScheduleType {
        Unknown = 0,
        OnTime = 1,
        OnEvent = 2
    }

    export class ScheduleOnEvent {
        EventMode: FileEventMode;
        FireOnCreation: boolean;
        FireOnModification: boolean;
        PollingInterval: number;
        WaitModifiedFile: number;
    }

    const enum FileEventMode {
        None = 0,
        OnEvent = 1,
        MonitoringFolder = 2,
    }

    export class ScheduleOnTime {
        DailySchedule: DailySchedule;
        MonthlySchedule: MonthlySchedule;
        Type: OnTimeType;
        WeeklySchedule: WeeklySchedule;
        ClientTimeZone: string;
        ClientTimeZoneOffset: number;
        LocalTimeZoneOffset: number;
    }

    export class DailySchedule {
        CustomWeekdays: Array<Weekday>;
        DailyOccurrenceType: DailyOccurrenceType;
        EndAt: string;
        NeverEndAt: boolean;
        RepeatEveryType: DailyRepeatingEveryType;
        RepeatEveryValue: number;
        StartAt: string;
    }

    const enum Weekday {
        None = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
        Sunday = 7,
    }

    const enum DailyOccurrenceType {
        None = 0,
        EveryDay = 1,
        Weekdays = 2,
        Weekends = 3,
        Custom = 4,
    }

    const enum DailyRepeatingEveryType {
        None = 0,
        Hours = 1,
        Minutes = 2,
    }

    export class MonthlySchedule {
        MonthlyOccurrenceType: MonthlyOccurrenceType;
        RepeatOnMonthday: number;
        RepeatOnType: MonthlyRepeatingOnType;
        RepeatOnWeekday: Weekday;
        StartAt: string;
    }

    const enum MonthlyOccurrenceType {
        None = 0,
        EveryMonth = 1,
        Every2Month = 2,
        Every3Month = 3,
        Every4Month = 4,
        Every6Month = 5,
    }

    const enum MonthlyRepeatingOnType {
        None = 0,
        SelectedDate = 1,
        First = 2,
        Second = 3,
        Third = 4,
        Last = 5,
    }

    const enum OnTimeType {
        Never = 0,
        Daily = 1,
        Weekly = 2,
        Monthly = 3,
        Yearly = 4,
    }

    export class WeeklySchedule {
        RepeatOnWeekday: Weekday;
        StartAt: string;
        WeeklyOccurrenceType: WeeklyOccurrenceType;
    }

    const enum WeeklyOccurrenceType {
        None = 0,
        EveryWeek = 1,
        Every2Weeks = 2,
        Every3Weeks = 3,
    }

    export class AutoIndexScheduleSettings extends DwSchedule {

    }

    export class RequestExportScheduleSettings extends DwSchedule {

    }

    export class C2MailScheduleSettings extends DwSchedule {

    }

    export class SynchronizationScheduleSettings extends DwSchedule {

    }

    export class ExportProcessScheduleSettings extends DwSchedule {

    }

    export class DeletionProcessScheduleSettings extends DwSchedule {

    }

    export class ScheduleSettingsQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Active: boolean;
        Organization: string;
        SettingsGuid: string;
        SettingsGuids: Array<string>;
    }
}

declare module dev.docuware.com.settings.workflows.exportprocess {
    export class ExportProcessQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class ExportProcess extends dev.docuware.com.settings.bpsprocesses.common.BPSProcess {
        Source: dev.docuware.com.settings.workflows.exportprocess.ExportSource;
        Target: dev.docuware.com.settings.workflows.exportprocess.ExportTarget;
        TransferFullText: boolean;
        Version: string;
    }

    export class ExportSource extends dev.docuware.com.settings.workflows.exportprocess.ExportConnection {
        ConvertColdToTIFF: boolean;
        DeleteSourceDocuments: boolean;
        FileCompareBeforeDelete: boolean;
        IsVersionManagmentEnabled: boolean;
        UsedFilter: dev.docuware.com.settings.filter.SearchFilter;
    }

    export class ExportConnection {
        FileCabinetGuid: string;
        FileCabinetName: string;
        LoginPassword: string;
        LoginToken: string;
        LoginUser: string;
        LoginUserGuid: string;
        Organization: string;
        RemoteSystemAddress: string;
        IsRemoteSystem: boolean;
    }

    export class ExportTarget extends dev.docuware.com.settings.workflows.exportprocess.ExportConnection {
        ExportPath: string;
        ExportPathDir: string;
        ExportPathGUID: string;
        ExportType: dev.docuware.com.settings.workflows.exportprocess.ExportTypeEnum;
        FCShortName: string;
        IndexFieldAssignments: Array<dev.docuware.com.settings.workflows.exportprocess.IndexFieldAssignment>;
    }

    const enum ExportTypeEnum {
        Inside = 0,
        Outside = 1,
    }

    export class IndexFieldAssignment {
        Source: dev.docuware.com.settings.workflows.exportprocess.IndexField;
        Target: dev.docuware.com.settings.workflows.exportprocess.IndexField;
    }

    export class IndexField {
        DatabaseName: string;
        DisplayName: string;
        FieldSystemType: dev.docuware.com.settings.workflows.exportprocess.FieldSystemTypeEnum;
        FieldType: dev.docuware.com.settings.workflows.exportprocess.FieldTypeEnum;
        Guid: string;
        Precision: number;
        Size: number;
    }

    const enum FieldSystemTypeEnum {
        UserField = 0,
        SystemField = 1,
        KeywordField = 2,
    }

    const enum FieldTypeEnum {
        Text = 0,
        Memo = 1,
        Date = 2,
        DateTime = 3,
        Numeric = 4,
        Decimal = 5,
        Keywords = 6,
    }
}



declare module dev.docuware.com.settings.common {
    export class KeyValuePair {
        Name: string;
        Value: string;
    }

    export class OptRecQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {

    }

    export class DWImage {
        Data: Array<number>;
        Format: dev.docuware.com.settings.common.ImageFormat;
        FormatSpecified: boolean;
        Guid: string;
        Height: number;
        HeightSpecified: boolean;
        Name: string;
        Width: number;
        WidthSpecified: boolean;
    }

    const enum ImageFormat {
        unknown = 0,
        bmp = 1,
        ico = 2,
        jpg = 3,
        png = 4,
        tif = 5,
        gif = 6,
        pdf = 7,
    }

    export class Duration {
        DisplayUnit: dev.docuware.com.settings.common.TimeUnit;
        ValueSec: number;
    }

    const enum TimeUnit {
        sec = 0,
        min = 1,
        hour = 2,
        day = 3,
        week = 4,
        month = 5,
    }

    export class DWDialogField {
        DBFieldName: string;
        DWFieldType: dev.docuware.com.settings.interop.DWFieldType;
        DlgLabel: string;
        DynamicEntry: dev.docuware.com.settings.interop.DWSystemVariableName;
        FixedEntry: string;
        Guid: string;
        Length: number;
        Locked: boolean;
        Mask: string;
        OrderNumber: number;
        Visible: boolean;
    }

    export class DateFormatString extends dev.docuware.com.settings.common.FormatString {
        Culture: string;
        DateFormat: string;
    }

    export class FormatString {

    }

    export class NumberFormatString extends dev.docuware.com.settings.common.FormatString {
        NumberFormat: string;
    }

    export class RemoveSubstringDef {
        Occurence: dev.docuware.com.settings.common.SubstringOccurenceType;
        Substring: string;
    }

    const enum SubstringOccurenceType {
        All = 0,
        AllLeading = 1,
    }

    export class SubstringDef {

    }

    export class SeparatedListItem extends dev.docuware.com.settings.common.SubstringDef {
        Infix: string;
        ItemIndex: number;
    }

    export class SeparatedListItemRange extends dev.docuware.com.settings.common.SeparatedListItem {
        ItemCount: number;
    }

    export class SubstringAt extends dev.docuware.com.settings.common.SubstringDef {
        CharCount: number;
        CharIndex: number;
    }

    export class SubstringBetween extends dev.docuware.com.settings.common.SubstringDef {
        Postfix: string;
        Prefix: string;
    }

    export class SubstringAfter extends dev.docuware.com.settings.common.SubstringDef {
        CharCount: number;
        Prefix: string;
    }

    export class SubstringBefore extends dev.docuware.com.settings.common.SubstringDef {
        CharCount: number;
        Postfix: string;
    }

    export class DateSystemVariable {
        Key: dev.docuware.com.settings.common.DateSystemVariableKey;
        Value: Date;
        ValueSpecified: boolean;
    }

    export class SystemVariable extends dev.docuware.com.settings.common.ValueBin {

    }

    export class ValueBin {

    }

    export class DateTimeSystemVariable {
        Key: dev.docuware.com.settings.common.DateTimeSystemVariableKey;
        Value: Date;
        ValueSpecified: boolean;
    }

    const enum DateTimeSystemVariableKey {
        CurrentDateTime = 0,
        FileCreationDateTime = 1,
        FileModificationDateTime = 2,
    }

    export class DecimalSystemVariable {
        Key: string;
        Value: number;
        ValueSpecified: boolean;
    }

    export class NumericSystemVariable {
        Key: dev.docuware.com.settings.common.NumericSystemVariableKey;
        Value: number;
        ValueSpecified: boolean;
    }

    const enum NumericSystemVariableKey {
        PageNumber = 0,
    }

    export class TextSystemVariable {
        Key: dev.docuware.com.settings.common.TextSystemVariableKey;
        Value: string;
    }

    const enum TextSystemVariableKey {
        CurrentUserShortName = 0,
        CurrentUserLongName = 1,
        CurrentUserEmail = 2,
        CurrentOrganization = 3,
        SourceApplication = 4,
        PrintingApplication = 5,
        FileName = 6,
        FileExtension = 7,
        FileNameWithExtension = 8,
        ImportDirectoryName = 9,
        ImportParentDirectoryName = 10,
        DocumentTitle = 11,
    }

    export class Variable extends dev.docuware.com.settings.common.ValueBin {
        Key: string;
        Name: string;
        ObjectTypeHint: dev.docuware.com.settings.common.ObjectTypeHint;
    }

    const enum ObjectTypeHint {
        Unspecified = 0,
        RecZone = 1,
        RecField = 2,
        SystemVariable = 3,
    }

    export class TextListVariable extends dev.docuware.com.settings.common.Variable {
        Value: Array<string>;
    }

    export class DateTimeVariable extends dev.docuware.com.settings.common.Variable {
        Value: Date;
        ValueSpecified: boolean;
    }

    export class DateVariable extends dev.docuware.com.settings.common.Variable {
        Value: Date;
        ValueSpecified: boolean;
    }

    export class DecimalVariable extends dev.docuware.com.settings.common.Variable {
        Value: number;
        ValueSpecified: boolean;
    }

    export class NumericVariable extends dev.docuware.com.settings.common.Variable {
        Value: number;
        ValueSpecified: boolean;
    }

    export class TextVariable extends dev.docuware.com.settings.common.Variable {
        Value: string;
    }

    export class Constant extends dev.docuware.com.settings.common.ValueBin {

    }

    export class TextListConstant extends dev.docuware.com.settings.common.Constant {
        Value: Array<string>;
    }

    export class DateTimeConstant extends dev.docuware.com.settings.common.Constant {
        Value: Date;
        ValueSpecified: boolean;
    }

    export class DateConstant extends dev.docuware.com.settings.common.Constant {
        Value: Date;
        ValueSpecified: boolean;
    }

    export class DecimalConstant extends dev.docuware.com.settings.common.Constant {
        Value: number;
        ValueSpecified: boolean;
    }

    export class NumericConstant extends dev.docuware.com.settings.common.Constant {
        Value: number;
        ValueSpecified: boolean;
    }

    export class TextConstant extends dev.docuware.com.settings.common.Constant {
        Value: string;
    }

    const enum DateSystemVariableKey {
        CurrentDate = 0,
        CurrentDateTime = 1,
        FileCreationDateTime = 2,
        FileModificationDateTime = 3,
    }

    export class MeasuredRectangle extends dev.docuware.com.settings.common.DWRectangle {
        Unit: dev.docuware.com.settings.common.LengthUnit;
    }

    export class DWRectangle {
        Height: number;
        Left: number;
        Top: number;
        Width: number;
    }

    const enum LengthUnit {
        px = 0,
        cm = 1,
        inch = 2,
        twip = 3,
    }

    export class Distance {
        Length: number;
        Unit: dev.docuware.com.settings.common.LengthUnit;
    }

    export class MeasuredImageBase {
        Area: dev.docuware.com.settings.common.Area;
        Format: dev.docuware.com.settings.common.ImageFormat;
        Guid: string;
        Name: string;
    }

    export class Area {
        Height: number;
        Unit: dev.docuware.com.settings.common.LengthUnit;
        Width: number;
    }

    export class MeasuredImage extends dev.docuware.com.settings.common.MeasuredImageBase {
        Data: Array<number>;
    }

    export class EmbeddedFile {
        Data: Array<number>;
        MetaData: dev.docuware.com.settings.common.DocMetaData;
    }

    export class DocMetaData {
        DocumentTitle: string;
        FileName: string;
        MimeType: dev.docuware.com.settings.common.MimeType;
        MimeTypeSpecified: boolean;
        PageCount: number;
        PageCountSpecified: boolean;
        PdfCreator: string;
        SourceAppName: string;
    }

    const enum MimeType {
        applicationmsword = 0,
        applicationpdf = 1,
        applicationpostscript = 2,
        applicationxml = 3,
        applicationzip = 4,
        imagebmp = 5,
        imagegif = 6,
        imagejpeg = 7,
        imagepng = 8,
        imagetiff = 9,
        textcss = 10,
        texthtml = 11,
        textplain = 12,
        textrichtext = 13,
        textrtf = 14,
    }

    export class KeyDef {
        Key: System.Windows.Input.Key;
        Modifiers: System.Windows.Input.ModifierKeys;
    }

    export class ProcessInformation {
        ApplicationDescription: string;
        ApplicationImageName: string;
        ApplicationMainWindowTitle: string;
        ApplicationModuleFileMajor: number;
        ApplicationModuleName: string;
        ApplicationVersionString: string;
        Environment: Array<dev.docuware.com.settings.common.KeyValuePair>;
        OSVersionString: string;
    }
}

declare module dev.docuware.com.settings.connecttooutlook {
    export class ConnectToOutlookQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {

    }

    export class OutlookConfigurationHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Description: string;
    }

    export class Configuration extends dev.docuware.com.settings.connecttooutlook.BaseConfiguration {
        Header: dev.docuware.com.settings.connecttooutlook.OutlookConfigurationHeader;
    }

    export class BaseConfiguration {
        ArchiveMailType: dev.docuware.com.settings.connecttooutlook.EMailType;
        ArchivingMode: dev.docuware.com.settings.connecttooutlook.ArchivingModes;
        ArchivingOptions: dev.docuware.com.settings.connecttooutlook.ArchivingOptions;
        AttachmentFilter: dev.docuware.com.settings.connecttooutlook.BaseConfigurationAttachmentFilter;
        DWPassword: string;
        DWUserName: string;
        DocuWareOrganization: string;
        DocumentConversion: dev.docuware.com.settings.connecttooutlook.DocumentFormats;
        ExcludeInlineAttachments: boolean;
        FileCabinet: dev.docuware.com.settings.connecttooutlook.BaseConfigurationFileCabinet;
        Filter: dev.docuware.com.settings.connecttooutlook.BaseConfigurationFilter;
        ImpersonateName: string;
        LoginMethod: dev.docuware.com.settings.connecttooutlook.LoginMethod;
        OutlookCategories: string;
        State: boolean;
        UseAttachmentFilter: boolean;
        UseZugferdImportConfiguration: boolean;
        ZugferdImportConfigurationGUID: string;
    }

    const enum EMailType {
        Incoming = 0,
        Outgoing = 1,
        Any = 2,
        Manual = 3,
    }

    const enum ArchivingModes {
        Complete = 0,
        AttachmentsOnly = 1,
        MailBodyAsLastSection = 2,
        EmailOnly = 3,
    }

    const enum ArchivingOptions {
        DeleteEMail = 0,
        DeleteEMailPermanently = 1,
        DeleteAttachments = 2,
        MarkEMail = 3,
        LeaveUnchanged = 4,
    }

    export class BaseConfigurationAttachmentFilter {
        Extensions: string;
        SizeRestriction: dev.docuware.com.settings.connecttooutlook.SizeRestriction;
        UseSizeRestriction: boolean;
    }

    export class SizeRestriction {
        SizeType: dev.docuware.com.settings.connecttooutlook.SizeType;
        SizeValue: number;
    }

    const enum SizeType {
        Byte = 0,
        KB = 1,
        MB = 2,
    }

    const enum DocumentFormats {
        MSG = 0,
        DOC = 1,
        PDF = 2,
        PDFA = 3,
        RTF = 4,
    }

    export class BaseConfigurationFileCabinet extends dev.docuware.com.settings.connecttooutlook.FileCabinet {
        IndexFields: Array<dev.docuware.com.settings.connecttooutlook.IndexField>;
    }

    export class FileCabinet {
        GUID: string;
        PromptPerEMail: boolean;
        ShowStoreDialog: boolean;
        StoreDialogGUID: string;
        UseDefaultWebBasket: boolean;
        WebBasketGUID: string;
    }

    export class IndexField {
        DBName: string;
        DWType: dev.docuware.com.settings.interop.DWFieldType;
        FieldDataProvider: dev.docuware.com.settings.connecttooutlook.FieldDataProvider;
        MatchCode: boolean;
        Value: string;
    }

    export class FieldDataProvider {

    }

    export class SQLQueryProvider extends dev.docuware.com.settings.connecttooutlook.FieldDataProvider {
        DBConnectionName: string;
        Database: string;
        Driver: dev.docuware.com.settings.connecttooutlook.DALDriverType;
        DriverSpecified: boolean;
        Password: string;
        Port: number;
        PortSpecified: boolean;
        SQLQuery: string;
        Server: string;
        TrustedLogin: boolean;
        TrustedLoginSpecified: boolean;
        UserName: string;
    }

    const enum DALDriverType {
        MySQL = 0,
        MSSQL = 1,
        ORACLE = 2,
        ODBC = 3,
    }

    export class FolderLevelProvider extends dev.docuware.com.settings.connecttooutlook.FieldDataProvider {
        FolderLevel: number;
    }

    export class FixedValueProvider extends dev.docuware.com.settings.connecttooutlook.FieldDataProvider {
        FixedValue: string;
    }

    export class FileCabinetFieldProvider extends dev.docuware.com.settings.connecttooutlook.FieldDataProvider {
        FieldDBName: string;
        FileCabinet: string;
        FileCabinetGUID: string;
        QueryFieldOperator: dev.docuware.com.settings.connecttooutlook.FileCabinetFieldProviderQueryFieldOperator;
        QueryFields: Array<dev.docuware.com.settings.connecttooutlook.QueryField>;
    }

    const enum FileCabinetFieldProviderQueryFieldOperator {
        AND = 0,
        OR = 1,
        NOT = 2,
    }

    export class QueryField {
        DBName: string;
        DWType: dev.docuware.com.settings.interop.DWFieldType;
        FieldDataProvider: dev.docuware.com.settings.connecttooutlook.FieldDataProvider;
        ToValue: string;
        Value: string;
    }

    export class EMailFieldProvider extends dev.docuware.com.settings.connecttooutlook.FieldDataProvider {
        EMailField: dev.docuware.com.settings.connecttooutlook.MailItemProperty;
    }

    const enum MailItemProperty {
        Attachments = 0,
        BCC = 1,
        Body = 2,
        Categories = 3,
        CC = 4,
        Companies = 5,
        Contact = 6,
        CreationTime = 7,
        Direction = 8,
        EntryID = 9,
        HTMLBody = 10,
        LastModificationTime = 11,
        OutlookVersion = 12,
        ReceivedByName = 13,
        ReceivedOnBehalfOfName = 14,
        ReceivedTime = 15,
        Recipients = 16,
        ReplyRecipients = 17,
        SenderEmailAddress = 18,
        SenderName = 19,
        SentOn = 20,
        SentOnBehalfOfName = 21,
        Size = 22,
        Subject = 23,
        To = 24,
        FolderName = 25,
        MessageID = 26,
    }

    export class PredefinedValueProvider extends dev.docuware.com.settings.connecttooutlook.FieldDataProvider {
        PredefinedField: dev.docuware.com.settings.interop.DWSystemVariableName;
    }

    export class DocuWareDALProvider extends dev.docuware.com.settings.connecttooutlook.FieldDataProvider {
        DBConnectionName: string;
        Database: string;
        Driver: dev.docuware.com.settings.connecttooutlook.DALDriverType;
        DriverSpecified: boolean;
        Password: string;
        Port: number;
        PortSpecified: boolean;
        Server: string;
        TrustedLogin: boolean;
        TrustedLoginSpecified: boolean;
        UserName: string;
    }

    export class AddressBookProvider extends dev.docuware.com.settings.connecttooutlook.FieldDataProvider {
        AddressBookField: dev.docuware.com.settings.connecttooutlook.ContactItemProperty;
        Query: string;
    }

    const enum ContactItemProperty {
        Account = 0,
        AssistantName = 1,
        AssistantTelephoneNumber = 2,
        BillingInformation = 3,
        Body = 4,
        Business2TelephoneNumber = 5,
        BusinessAddress = 6,
        BusinessAddressCity = 7,
        BusinessAddressCountry = 8,
        BusinessAddressPostalCode = 9,
        BusinessAddressPostOfficeBox = 10,
        BusinessAddressState = 11,
        BusinessAddressStreet = 12,
        BusinessFaxNumber = 13,
        BusinessHomePage = 14,
        BusinessTelephoneNumber = 15,
        CallbackTelephoneNumber = 16,
        CarTelephoneNumber = 17,
        Categories = 18,
        Children = 19,
        Companies = 20,
        CompanyAndFullName = 21,
        CompanyLastFirstNoSpace = 22,
        CompanyLastFirstSpaceOnly = 23,
        CompanyMainTelephoneNumber = 24,
        CompanyName = 25,
        ComputerNetworkName = 26,
        ConversationIndex = 27,
        ConversationTopic = 28,
        CustomerID = 29,
        Department = 30,
        Email1Address = 31,
        Email1AddressType = 32,
        Email1DisplayName = 33,
        Email1EntryID = 34,
        Email2Address = 35,
        Email2AddressType = 36,
        Email2DisplayName = 37,
        Email2EntryID = 38,
        Email3Address = 39,
        Email3AddressType = 40,
        Email3DisplayName = 41,
        Email3EntryID = 42,
        EntryID = 43,
        FileAs = 44,
        FirstName = 45,
        FTPSite = 46,
        FullName = 47,
        FullNameAndCompany = 48,
        GovernmentIDNumber = 49,
        Hobby = 50,
        Home2TelephoneNumber = 51,
        HomeAddress = 52,
        HomeAddressCity = 53,
        HomeAddressCountry = 54,
        HomeAddressPostalCode = 55,
        HomeAddressPostOfficeBox = 56,
        HomeAddressState = 57,
        HomeAddressStreet = 58,
        HomeFaxNumber = 59,
        HomeTelephoneNumber = 60,
        Initials = 61,
        InternetFreeBusyAddress = 62,
        ISDNNumber = 63,
        JobTitle = 64,
        Language = 65,
        LastFirstAndSuffix = 66,
        LastFirstNoSpace = 67,
        LastFirstNoSpaceCompany = 68,
        LastFirstSpaceOnly = 69,
        LastFirstSpaceOnlyCompany = 70,
        LastName = 71,
        LastNameAndFirstName = 72,
        MailingAddress = 73,
        MailingAddressCity = 74,
        MailingAddressCountry = 75,
        MailingAddressPostalCode = 76,
        MailingAddressPostOfficeBox = 77,
        MailingAddressState = 78,
        MailingAddressStreet = 79,
        ManagerName = 80,
        MessageClass = 81,
        MiddleName = 82,
        Mileage = 83,
        MobileTelephoneNumber = 84,
        NetMeetingAlias = 85,
        NetMeetingServer = 86,
        NickName = 87,
        OfficeLocation = 88,
        OrganizationalIDNumber = 89,
        OtherAddress = 90,
        OtherAddressCity = 91,
        OtherAddressCountry = 92,
        OtherAddressPostalCode = 93,
        OtherAddressPostOfficeBox = 94,
        OtherAddressState = 95,
        OtherAddressStreet = 96,
        OtherFaxNumber = 97,
        OtherTelephoneNumber = 98,
        OutlookVersion = 99,
        PagerNumber = 100,
        PersonalHomePage = 101,
        PrimaryTelephoneNumber = 102,
        Profession = 103,
        RadioTelephoneNumber = 104,
        ReferredBy = 105,
        Spouse = 106,
        Subject = 107,
        Suffix = 108,
        TelexNumber = 109,
        Title = 110,
        TTYTDDTelephoneNumber = 111,
        User1 = 112,
        User2 = 113,
        User3 = 114,
        User4 = 115,
        WebPage = 116,
        YomiCompanyName = 117,
        YomiFirstName = 118,
        YomiLastName = 119,
        Anniversary = 120,
        Birthday = 121,
        CreationTime = 122,
        LastModificationTime = 123,
    }

    export class BaseConfigurationFilter {
        FilterSettings: string;
    }

    const enum LoginMethod {
        Manual = 0,
        FixedUser = 1,
        WindowsLogin = 2,
    }

    export class MonitorConfiguration extends dev.docuware.com.settings.connecttooutlook.BaseConfiguration {
        CreateOutlookFolder: boolean;
        Header: dev.docuware.com.settings.connecttooutlook.OutlookMonitorConfigurationHeader;
        IncludeOutlookSubFolders: boolean;
        MonitorAttributes: Array<dev.docuware.com.settings.connecttooutlook.MonitorAttribute>;
        OutlookFolderName: string;
        UseMonitorAttributes: boolean;
    }

    export class OutlookMonitorConfigurationHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Description: string;
    }

    export class MonitorAttribute {
        Attribute: dev.docuware.com.settings.connecttooutlook.MonitorAttributeType;
        Value: string;
    }

    const enum MonitorAttributeType {
        SENDER = 0,
        SENDERDOMAIN = 1,
        SUBJECT = 2,
        RECIPIENT = 3,
        RECIPIENTDOMAIN = 4,
    }

    export class ConnectToOutlookQuickAccessQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {

    }

    export class QuickAccessSettingHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Description: string;
    }

    export class QuickAccessSetting {
        FileCabinetGUID: string;
        Header: dev.docuware.com.settings.connecttooutlook.QuickAccessSettingHeader;
        IntegrationIdentifier: string;
        IntegrationType: dev.docuware.com.settings.connecttooutlook.WebClientIntegrationType;
        IntegrationTypeSpecified: boolean;
        QueryFieldOperator: dev.docuware.com.settings.connecttooutlook.QuickAccessSettingQueryFieldOperator;
        QueryFieldOperatorSpecified: boolean;
        QueryFields: Array<dev.docuware.com.settings.connecttooutlook.QueryField>;
        ResultListGUID: string;
        SearchQuery: string;
        TaskListGUID: string;
        TrustedLogin: boolean;
        TrustedLoginSpecified: boolean;
        WebClientURL: string;
    }

    const enum WebClientIntegrationType {
        Viewer = 0,
        ResultList = 1,
        Download = 2,
    }

    const enum QuickAccessSettingQueryFieldOperator {
        AND = 0,
        OR = 1,
        NOT = 2,
    }

    export class ConnectToOutlookMonitorQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {

    }
}

declare module dev.docuware.com.settings.dependencies {
    export class DependencyQuery extends dev.docuware.com.settings.interop.DWQuery {
        Identifier: string;
        Setting: dev.docuware.com.settings.dependencies.DependencyCheckType;
    }

    const enum DependencyCheckType {
        FileCabinet = 0,
        StoreDialog = 1,
        SelectList = 2,
        FileConnection = 3,
        Group = 4,
        Role = 5,
        User = 6,
        RegularExpression = 7,
        DatabaseConnection = 8,
        StorageLocation = 9,
        SOLRConnection = 10,
        SMTPConnection = 11,
        IntellixConnection = 12,
        AutoNumber = 13,
        WebService = 14
    }

    export class DependencyRecord {
        Objects: Array<dev.docuware.com.settings.dependencies.DependentObject>;
        TranslatedMessage: string;
    }

    export class DependentObject {
        Guid: string;
        Name: string;
        Type: dev.docuware.com.settings.dependencies.DependentType;
    }

    const enum DependentType {
        FileCabinet = 0,
        StoreDialog = 1,
        SearchDialog = 2,
        ResultListInfoDialog = 3,
        DialogField = 4,
        Stamp = 5,
        StampField = 6,
        TaskListInfoDialog = 7,
        TreeViewInfoDialog = 8,
        TreeViewFolders = 9,
        RegularExpressions = 10,
    }
}

declare module dev.docuware.com.settings.emailarchivingservice {
    export class ImportConfigurationQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {
        Active: boolean;
    }

    export class ImportConfigurationHeader extends dev.docuware.com.settings.emailarchivingservice.ConfigurationHeader {

    }

    export class ConfigurationHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        Description: string;
        Timestamp: Date;
    }

    export class ImapConnectionHeader extends dev.docuware.com.settings.emailarchivingservice.ConfigurationHeader {
        UserGuid: string;
    }

    export class ImportConfiguration {
        ArchivingMode: dev.docuware.com.settings.emailarchivingservice.ArchivingModes;
        ArchivingOption: dev.docuware.com.settings.emailarchivingservice.ArchivingOptions;
        AttachmentFilter: dev.docuware.com.settings.emailarchivingservice.AttachmentFilter;
        DefaultWebBasket: dev.docuware.com.settings.emailarchivingservice.WebBasket;
        DocumentConversion: dev.docuware.com.settings.emailarchivingservice.DocumentFormats;
        ExcludeInlineAttachments: boolean;
        FileCabinet: dev.docuware.com.settings.emailarchivingservice.FileCabinet;
        Filter: dev.docuware.com.settings.emailarchivingservice.ImportConfigurationFilter;
        Folders: Array<string>;
        Header: dev.docuware.com.settings.emailarchivingservice.ImportConfigurationHeader;
        MoveTargetFolder: string;
        UseAttachmentFilter: boolean;
    }

    const enum ArchivingModes {
        Complete = 0,
        AttachmentsOnly = 1,
        MailBodyOnly = 2,
        MailBodyAsLastSection = 3,
    }

    const enum ArchivingOptions {
        DeleteEMail = 0,
        DeleteEMailPermanently = 1,
        DeleteAttachments = 2,
        MarkEMail = 3,
        MoveEMail = 4,
    }

    export class WebBasket {
        Id: string;
        Name: string;
        IntellixLanguage: any;
    }

    const enum DocumentFormats {
        EML = 0,
        PDF = 1,
        PDFA = 2,
    }

    export class FileCabinet {
        DialogGUID: string;
        GUID: string;
        IndexFields: Array<dev.docuware.com.settings.emailarchivingservice.IndexField>;
        UseDefaultWebBasket: boolean;
        UseDefaultWebBasketSpecified: boolean;
        WebBasketGUID: string;
    }

    export class IndexField {
        DBName: string;
        DWType: dev.docuware.com.settings.interop.DWFieldType;
        EMailProperty: dev.docuware.com.settings.emailarchivingservice.EMailProperties;
        EMailPropertySpecified: boolean;
        Value: string;
    }

    const enum EMailProperties {
        SendDate = 0,
        ReceivedDate = 1,
        Recipients = 2,
        RecipientsEmail = 3,
        Sender = 4,
        SenderEmail = 5,
        Subject = 6,
        Contact = 7,
        ContactEmail = 8,
        Direction = 9,
        Size = 10,
        CC = 11,
        CCEmail = 12,
        BCC = 13,
        BCCEmail = 14,
        SendTo = 15,
        SendToEmail = 16,
        AttachmentNames = 17,
    }

    export class ImportConfigurationFilter {
        FilterSettings: string;
    }

    export class ImapConnectionQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class ImapConnection {
        Culture: string;
        DWImpersonateUserName: string;
        DWLoginToken: string;
        Domain: string;
        EMailAddress: string;
        Header: dev.docuware.com.settings.emailarchivingservice.ImapConnectionHeader;
        ImapServerGuid: string;
        ImportConfigurationMappings: Array<dev.docuware.com.settings.emailarchivingservice.ImportConfigurationMapping>;
        Interval: number;
        Password: string;
        RunOnce: boolean;
        TimeZone: string;
        UserName: string;
    }

    export class ImportConfigurationMapping {
        Active: boolean;
        Guid: string;
        MonitoredFolders: Array<string>;
        MoveTargetFolder: string;
    }

    export class ImapServerQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Active: boolean;
        ServerURL: string;
    }

    export class ImapServer {
        Active: boolean;
        Default: boolean;
        Domain: string;
        Guid: string;
        Name: string;
        Password: string;
        Port: number;
        PortSpecified: boolean;
        Provider: dev.docuware.com.settings.emailarchivingservice.EMailProviders;
        ServerURL: string;
        UseSSL: boolean;
        UseSSLSpecified: boolean;
        UserName: string;
    }

    const enum EMailProviders {
        Custom = 0,
        GoogleMail = 1,
        GMX = 2,
        Webde = 3,
        Yahoo = 4,
        AppleMail = 5,
        MsExchange = 6,
        Office365 = 7,
    }

    export class AttachmentFilter {
        Extensions: string;
        SizeRestriction: dev.docuware.com.settings.emailarchivingservice.SizeRestriction;
        UseSizeRestriction: boolean;
    }

    export class SizeRestriction {
        SizeType: dev.docuware.com.settings.emailarchivingservice.SizeType;
        SizeValue: number;
    }

    const enum SizeType {
        Byte = 0,
        KB = 1,
        MB = 2,
    }
}

declare module dev.docuware.com.settings.exceptions {
    export class DWLoginException extends dev.docuware.com.settings.exceptions.DWServiceException {
        Reason: dev.docuware.com.settings.exceptions.LoginFailedReason;
    }

    export class DWServiceException {
        Message: string;
    }

    const enum LoginFailedReason {
        Unknown = 0,
        UserNotFound = 1,
        NotActiveUser = 2,
        PasswordExpired = 3,
        PasswordSecurity = 4,
    }

    export class DWSessionException extends dev.docuware.com.settings.exceptions.DWServiceException {

    }

    export class DWRightException extends dev.docuware.com.settings.exceptions.DWServiceException {
        ExpectedRight: string;
    }

    export class DWNotFoundInDatabaseException extends dev.docuware.com.settings.exceptions.DWServiceException {

    }

    export class DWDependenceException extends dev.docuware.com.settings.exceptions.DWServiceException {
        Dependencies: Array<string>;
    }

    export class LockException extends dev.docuware.com.settings.exceptions.DWServiceException {
        Responses: Array<dev.docuware.com.settings.locks.LockResponse>;
    }

    export class DWForeignKeyConflictException extends dev.docuware.com.settings.exceptions.DWServiceException {
        Reason: string;
    }
}

declare module dev.docuware.com.settings.filecabinet {
    export class FileCabinetQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        RequiredRights: Array<dev.docuware.com.settings.interop.DWFileCabinetRights>;
    }

    export class FileCabinetHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        ColorAsString: string;
        Description: string;
        ShortFCName: string;
        Timestamp: number;
        Version: string;
    }

    export class FileCabinetAuditSettings {
        AuditConfigurationChangesEnabled: boolean;
        AuditDocumentEventsEnabled: boolean;
    }

    export class DWFileCabinet extends dev.docuware.com.settings.interop.SettingWithFileCabinetHeader {
        AuditSettings: FileCabinetAuditSettings;
        DatabaseConnectionID: string;
        Disks: dev.docuware.com.settings.filecabinet.DisksCollection;
        Fields: Array<dev.docuware.com.settings.filecabinet.Field>;
        Fulltext: dev.docuware.com.settings.filecabinet.FulltextOptions;
        IsHighSecurityFileCabinet: boolean;
        MasterFCGuid: string;
        Options: dev.docuware.com.settings.filecabinet.FileCabinetOptions;
        StorageLocationID: string;
        TableCollection: dev.docuware.com.settings.filecabinet.TableCollection;
    }

    export class DisksCollection {
        Items: Array<dev.docuware.com.settings.filecabinet.Disk>;
    }

    export class Disk {
        Number: number;
        Quotas: Array<dev.docuware.com.settings.filecabinet.DiskQuota>;
    }

    export class DiskQuota {
        Limit: number;
        Type: dev.docuware.com.settings.filecabinet.DiskQuotaTypes;
    }

    const enum DiskQuotaTypes {
        Space = 1,
        Documents = 2,
    }

    export class Field {
        DBName: string;
        DBType: string;
        DWLength: number;
        DWType: dev.docuware.com.settings.interop.DWFieldType;
        DigitsAfterDecimalPoint: number;
        DropLeadingBlanks: boolean;
        DropLeadingZeros: boolean;
        FieldInfoText: string;
        FixedEntry: dev.docuware.com.settings.filecabinet.FixedEntryTypes;
        FixedValue: string;
        Guid: string;
        HasValidation: boolean;
        InternalIndex: number;
        Name: string;
        NotEmpty: boolean;
        Uniqueness: dev.docuware.com.settings.filecabinet.DWUniqueTypes;
        UsedAsDocumentName: boolean;
        UserDefined: boolean;
        Writable: boolean;
    }

    const enum FixedEntryTypes {
        None = 1,
        FixedValue = 2,
        StoreUserEmail = 3,
        StoreUser = 4,
        StoreUser_LongName = 5,
        ModifyUser = 6,
        ModifyUser_LongName = 7,
        AccessUser = 8,
        AccessUser_LongName = 9,
        StoreDate = 10,
        ModifyDate = 11,
        AccessDate = 12,
    }

    const enum DWUniqueTypes {
        None = 0,
        Database = 1,
        Internal = 2,
    }

    export class FulltextOptions {
        BlackLists: Array<string>;
        Enabled: boolean;
        MaxHitCount: number;
        MaxHitCountType: dev.docuware.com.settings.filecabinet.FulltextMaximumHitCountsType;
        MaxTextshotsPerSection: number;
        SOLRConnection: string;
        SolrApplicationName: string;
        WhiteLists: Array<string>;
    }

    const enum FulltextMaximumHitCountsType {
        None = 1,
        Absolute = 2,
    }

    export class FileCabinetOptions {
        AddIndexEntriesInUpperCase: boolean;
        AllowTrustedApplicationUserAccess: boolean;
        AllowWindowsExplorerClientAccess: boolean;
        CanBeUsedAsSatellite: boolean;
        Checksum: boolean;
        Encryption: dev.docuware.com.settings.filecabinet.FileCabinetEncryptionType;
        EncryptionSize: dev.docuware.com.settings.filecabinet.FileCabinetEncryptionSize;
        NotesAccess: boolean;
        NotificationsEnabled: boolean;
        OCRTemplate: string;
        SAPAccess: boolean;
        VersionManagement: dev.docuware.com.settings.filecabinet.VersionManagement;
    }

    const enum FileCabinetEncryptionType {
        None = 1,
        OnlyDocument = 2,
    }

    const enum FileCabinetEncryptionSize {
        _0Bits = 1,
        _128Bits = 2,
        _192Bits = 3,
        _256Bits = 4,
    }

    const enum VersionManagement {
        None = 1,
        Manual = 2,
        Automatic = 3,
    }

    export class TableCollection {
        Keywords: Array<dev.docuware.com.settings.cabinet.KeywordTable>;
        LegacyKeywordTables: Array<dev.docuware.com.settings.cabinet.LegacyKeywordTable>;
        LegacyTables: Array<dev.docuware.com.settings.cabinet.LegacyTable>;
        Tables: Array<dev.docuware.com.settings.cabinet.Table>;
    }

    export class SearchDialogQuery extends dev.docuware.com.settings.filecabinet.DialogQuery {

    }

    export class DialogQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        FileCabinetGuid: string;
        QueryUsage: dev.docuware.com.settings.interop.QueryUsage;
    }

    export class SearchDialogHeader extends dev.docuware.com.settings.filecabinet.DialogHeader {
        ResultListGuid: string;
    }

    export class DialogHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        FileCabinetGuid: string;
        IsDefault: boolean;
    }

    const enum SearchDialogContentFilterFlag {
        Whole = 1,
    }

    export class SearchDialog extends dev.docuware.com.settings.filecabinet.DialogWithSearchDialogHeader {

    }

    export class DialogWithSearchDialogHeader extends dev.docuware.com.settings.interop.SettingWithSearchDialogHeader {
        Fields: Array<dev.docuware.com.settings.filecabinet.DialogField>;
    }

    export class DialogField {
        AddWildcards: boolean;
        AllowFiltering: boolean;
        AutoNumberGuid: string;
        DBName: string;
        DisplayName: string;
        DynamicEntry: dev.docuware.com.settings.interop.DWSystemVariableName;
        DialogFieldColumns: Array<dev.docuware.com.settings.filecabinet.DialogField>;
        FieldGuid: string;
        FixedEntry: string;
        IsUserDefinedField: boolean;
        Locked: boolean;
        Mask: string;
        MaskGuid: string;
        OrderNumber: number;
        SelectListOnly: boolean;
        SelectLists: dev.docuware.com.settings.filecabinet.DialogFieldSelectLists;
        Type: dev.docuware.com.settings.interop.DWFieldType;
        Visible: boolean;
        Required: boolean;
    }

    export class DialogFieldSelectLists {
        BannedSelectiveFields: Array<string>;
        Selected: Array<dev.docuware.com.settings.filecabinet.AssignedSelectList>;
        UseStandardSelectList: boolean;
    }

    export class AssignedSelectList {
        Guid: string;
    }

    export class MultiFieldAssignedSelectList extends dev.docuware.com.settings.filecabinet.AssignedSelectList {
        Filters: System.Collections.Generic.Dictionary<string, string>;
        ValueField: string;
    }

    export class StoreDialogQuery extends dev.docuware.com.settings.filecabinet.DialogQuery {
        IntellixEnabled: boolean;
    }

    export class StoreDialogHeader extends dev.docuware.com.settings.filecabinet.DialogHeader {
        IntellixEnabled: boolean;
    }

    const enum StoreDialogContentFilterFlag {
        Whole = 1,
    }

    export class StoreDialog extends dev.docuware.com.settings.filecabinet.DialogWithStoreDialogHeader {
        IntellixMappings: any;
        ValidationServiceGuid: string;
    }

    export class DialogWithStoreDialogHeader extends dev.docuware.com.settings.interop.SettingWithStoreDialogHeader {
        Fields: Array<dev.docuware.com.settings.filecabinet.DialogField>;
    }

    export class ResultListQuery extends dev.docuware.com.settings.filecabinet.ResultDialogQuery {

    }

    export class ResultDialogQuery extends dev.docuware.com.settings.filecabinet.DialogQuery {

    }

    export class ResultListHeader extends dev.docuware.com.settings.filecabinet.ResultDialogHeader {

    }

    export class ResultDialogHeader extends dev.docuware.com.settings.filecabinet.DialogHeader {

    }

    export class TaskListHeader extends dev.docuware.com.settings.filecabinet.ResultDialogHeader {
        Private: boolean;
    }

    export class TreeViewHeader extends dev.docuware.com.settings.filecabinet.ResultDialogHeader {

    }

    const enum ResultListDialogContentFilterFlag {
        Whole = 1,
    }

    export class ResultListDialog extends dev.docuware.com.settings.filecabinet.ResultDialogWithResultListHeader {
        Functions: Array<dev.docuware.com.settings.filecabinet.ResultListFunction>;
        Options: dev.docuware.com.settings.filecabinet.RLOptions;
        SortOrder: Array<dev.docuware.com.settings.filecabinet.ResultListSortField>;
        Viewer: dev.docuware.com.settings.filecabinet.ViewerOptions;
    }

    export class ResultDialogWithResultListHeader extends dev.docuware.com.settings.filecabinet.DialogWithResultListHeader {

    }

    export class DialogWithResultListHeader extends dev.docuware.com.settings.interop.SettingWithResultListHeader {
        Fields: Array<dev.docuware.com.settings.filecabinet.DialogField>;
    }

    export class ResultListFunction {
        ShowAsButton: boolean;
        ShowInToolbar: boolean;
        Type: dev.docuware.com.settings.filecabinet.RLFunctionType;
    }

    const enum RLFunctionType {
        ShowLinkedDocuments = 3,
        DisplayDocument = 9,
        DisplayInfoBox = 11,
        PrintSelectedDocument = 15,
        DeleteSelectedDocument = 16,
        CopyToBasket = 18,
        ShowHideCheckedoutDocuments = 20,
        CopyIntoAnotherFileCabinet = 24,
        AppendFromBasket = 25,
        OpenDocumentInPlugin = 26,
        PageSize = 30,
        FixedHeight = 31,
        SortBy = 32,
        Refresh = 33,
        DownloadAsOriginalFile = 34,
        DownloadAsPDFWithoutAnno = 35,
        DownloadAsPDF = 36,
        DownloadAsDWDoc = 37,
        SendAsOriginal = 38,
        SendAsPDFWithoutAnno = 39,
        SendAsPDF = 40,
        SendAsDWDoc = 41,
        SendAsHyperlink = 42,
        SendResultList = 43,
        EMailReply = 44,
        EMailReplyAll = 45,
        EMailForward = 46,
        ShowInSeparateViewer = 47,
        EditDocument = 48,
        CheckoutToBasket = 49,
        CheckoutToFileSystem = 50,
        ChangeDocumentStatus = 52,
        ShowVersionHistory = 53,
        ShowWorkflowHistory = 54,
        ExportToCSV = 55,
        CreateREQUEST = 56,
        ChangeIndexOfMultipleDocuments = 57,
        SendREQUEST = 58
    }

    export class RLOptions {
        DisplayFirstDocument: boolean;
        ShowCheckoutDocuments: boolean;
    }

    export class ResultListSortField {
        Accending: boolean;
        FieldGuid: string;
        Order: number;
    }

    export class ViewerOptions {
        ImmediateFulltextResults: boolean;
        Mode: dev.docuware.com.settings.filecabinet.ViewerMode;
    }

    const enum ViewerMode {
        Edit = 1,
        AdhocEdit = 2,
        ReadOnly = 3,
    }

    export class TreeViewQuery extends dev.docuware.com.settings.filecabinet.ResultDialogQuery {

    }

    const enum TreeViewContentFilterFlag {
        Whole = 1,
    }

    export class TreeView extends dev.docuware.com.settings.filecabinet.ResultDialogWithTreeViewHeader {
        Filter: dev.docuware.com.settings.filter.SearchFilter;
        StoreDialog: string;
        TreeViewOptions: dev.docuware.com.settings.filecabinet.TreeViewOptions;
    }

    export class ResultDialogWithTreeViewHeader extends dev.docuware.com.settings.filecabinet.DialogWithTreeViewHeader {

    }

    export class DialogWithTreeViewHeader extends dev.docuware.com.settings.interop.SettingWithTreeViewHeader {
        Fields: Array<dev.docuware.com.settings.filecabinet.DialogField>;
    }

    export class TreeViewOptions {
        ColorAsString: string;
        Icon: string;
    }

    export class InfoDialogQuery extends dev.docuware.com.settings.filecabinet.DialogQuery {
        Private: boolean;
    }

    export class InfoDialogHeader extends dev.docuware.com.settings.filecabinet.DialogHeader {
        Private: boolean;
    }

    const enum InfoDialogContentFilterFlag {
        Whole = 1,
    }

    export class InfoDialog extends dev.docuware.com.settings.filecabinet.DialogWithInfoDialogHeader {
        ValidationServiceGuid: string;
    }

    export class DialogWithInfoDialogHeader extends dev.docuware.com.settings.interop.SettingWithInfoDialogHeader {
        Fields: Array<dev.docuware.com.settings.filecabinet.DialogField>;
    }

    export class TaskListQuery extends dev.docuware.com.settings.filecabinet.ResultDialogQuery {
        Private: boolean;
    }

    const enum TaskListContentFilterFlag {
        Whole = 1,
    }

    export class TaskList extends dev.docuware.com.settings.filecabinet.ResultDialogWithTaskListHeader {
        AutoRefresh: boolean;
        Filter: dev.docuware.com.settings.filter.SearchFilter;
        Functions: Array<dev.docuware.com.settings.filecabinet.ResultListFunction>;
        Options: dev.docuware.com.settings.filecabinet.RLOptions;
        SortOrder: Array<dev.docuware.com.settings.filecabinet.ResultListSortField>;
        Viewer: dev.docuware.com.settings.filecabinet.ViewerOptions;
    }

    export class ResultDialogWithTaskListHeader extends dev.docuware.com.settings.filecabinet.DialogWithTaskListHeader {

    }

    export class DialogWithTaskListHeader extends dev.docuware.com.settings.interop.SettingWithTaskListHeader {
        Fields: Array<dev.docuware.com.settings.filecabinet.DialogField>;
    }

    export class FileCabinetProfileQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {
        FileCabinetGuid: string;
        ProfileQueryType: dev.docuware.com.settings.filecabinet.FileCabinetProfileQueryType;
        Types: Array<dev.docuware.com.settings.filecabinet.FileCabinetProfileType>;
        Usage: dev.docuware.com.settings.interop.QueryUsage;
    }

    const enum FileCabinetProfileQueryType {
        Normal = 0,
        Index = 1,
    }

    const enum FileCabinetProfileType {
        Custom = 0,
        Owner = 1,
        Read = 2,
        Edit = 3,
        Delete = 4,
    }

    export class FileCabinetProfileHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        FileCabinetGuid: string;
        Type: dev.docuware.com.settings.filecabinet.FileCabinetProfileType;
    }

    export class FileCabinetProfile extends dev.docuware.com.settings.interop.SettingWithFileCabinetProfileHeader {
        AdministrativeRights: Array<dev.docuware.com.settings.interop.DWFileCabinetRights>;
        AnnotationRights: Array<dev.docuware.com.settings.interop.DWFileCabinetAnnotationRights>;
        FieldRights: Array<dev.docuware.com.settings.filecabinet.FieldRight>;
    }

    export class FieldRight {
        Field: string;
        Rights: Array<dev.docuware.com.settings.interop.DWFileCabinetFieldRights>;
    }

    export class IndexFileCabinetProfile extends dev.docuware.com.settings.filecabinet.FileCabinetProfile {
        Filter: dev.docuware.com.settings.filecabinet.IndexFilter;
        FilterType: dev.docuware.com.settings.filecabinet.IndexFilterType;
    }

    export class IndexFilter {

    }

    export class SimpleIndexFilter extends dev.docuware.com.settings.filecabinet.IndexFilter {
        Fields: Array<dev.docuware.com.settings.filecabinet.IndexProfileField>;
    }

    export class IndexProfileField {
        FieldDBName: string;
        Filter: string;
    }

    export class SQLIndexFilter extends dev.docuware.com.settings.filecabinet.IndexFilter {
        SQLFilter: string;
    }

    export class ExtendedIndexFilter extends dev.docuware.com.settings.filecabinet.IndexFilter {
        ExtendedQuery: dev.docuware.com.settings.web.querybuilder.QueryBuilderSettingsType;
    }

    const enum IndexFilterType {
        Simple = 1,
        SQL = 2,
        Extended = 3,
    }

    export class DocumentLinkQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        FileCabinetGuid: string;
    }

    export class DocumentLinkHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Description: string;
        FileCabinetGuid: string;
    }

    export class DocumentLink extends dev.docuware.com.settings.interop.SettingWithDocumentLinkHeader {
        Filter: dev.docuware.com.settings.filter.SearchFilter;
        ForbiddenResultLists: Array<string>;
        TargetFileCabinet: string;
        TargetFilter: dev.docuware.com.settings.filter.SearchFilter;
        TargetResultList: string;
    }

    export class AutoNumberQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        FileCabinetGuid: string;
    }

    export class AutoNumberHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        FileCabinetGuid: string;
    }

    export class AutoNumber extends dev.docuware.com.settings.interop.SettingWithAutoNumberHeader {
        CurrentValue: number;
        Start: number;
    }

    export class AssignedDialog {
        Guid: string;
        Name: string;
        Type: dev.docuware.com.settings.filecabinet.DialogTypes;
    }

    const enum DialogTypes {
        Search = 1,
        Store = 2,
        ResultList = 3,
        ResultTree = 4,
        InfoDialog = 5,
        TaskList = 6,
    }

    export class DocumentTypeQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        FileCabinet: string;
        FileCabinets: Array<string>;
    }

    export class DocumentType extends dev.docuware.com.settings.interop.DWSetting {
        FID: number;
        Fields: Array<dev.docuware.com.settings.filecabinet.DocumentTypeField>;
        FileCabinet: string;
        Guid: string;
        ID: number;
        Name: string;
    }

    export class DocumentTypeField {
        DBName: string;
        DigitsAfterDecimalPoint: number;
        Mandatory: boolean;
    }

    export class GlobalDocumentTypeQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class GlobalDocumentType extends dev.docuware.com.settings.interop.DWSetting {
        Fields: Array<dev.docuware.com.settings.filecabinet.GlobalDocTypeField>;
        Guid: string;
        ID: number;
        Name: string;
    }

    export class GlobalDocTypeField {
        AllowEmpty: boolean;
        CustomUserField: boolean;
        DBName: string;
        DWType: dev.docuware.com.settings.interop.DWFieldType;
        DefaultSelected: boolean;
        DisplayName: string;
        IsIndexField: boolean;
        Lenght: number;
        Mandatory: boolean;
        Order: number;
    }
}

declare module dev.docuware.com.settings.filter {
    export class SearchFilter {
        Condition: any;
        Logic: dev.docuware.com.settings.filter.FilterCombineLogic;
    }

    export class ISearchCondition {
        ExtendedQuery: any;
    }

    export class ExtendedCondition extends dev.docuware.com.settings.filter.ISearchCondition {
        ExtendedQuery: dev.docuware.com.settings.web.querybuilder.QueryBuilderSettingsType;
    }

    export class SQLCondition extends dev.docuware.com.settings.filter.ISearchCondition {
        SQLWhereClause: string;
    }

    const enum FilterCombineLogic {
        And = 0,
        Or = 1,
    }
}

declare module dev.docuware.com.settings.forms {
    export class FormConfigQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {
        Active: boolean;
    }

    export class FormConfigHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        Created: Date;
        Description: string;
        Destination: string;
        LastModified: Date;
        Public: boolean;
        SanitizedName: string;
        UseTemplate: boolean;
    }

    export class FormConfig {
        FormProperties: dev.docuware.com.settings.forms.FormProperties;
        FormTemplates: Array<dev.docuware.com.settings.forms.FormTemplateConfig>;
        Header: dev.docuware.com.settings.forms.FormConfigHeader;
        PublicUser: dev.docuware.com.settings.forms.PublicUser;
        SubmissionOptions: dev.docuware.com.settings.forms.SubmissionOptions;
        WebForm: dev.docuware.com.settings.forms.WebForm;
    }

    export class FormProperties {
        FormAlignment: dev.docuware.com.settings.forms.AlignmentType;
        FormWidth: number;
        WebPageBackgroundColor: string;
    }

    const enum AlignmentType {
        Left = 0,
        Center = 1,
        Right = 2,
    }

    export class FormTemplateConfig {
        Active: boolean;
        Description: string;
        ExcludedFileAttachments: Array<string>;
        FileName: string;
        FilePageCount: number;
        FlattenPDF: boolean;
        Guid: string;
        Indexing: Array<dev.docuware.com.settings.forms.IndexField>;
        IsWebFormTemplate: boolean;
        Name: string;
        PageSize: dev.docuware.com.settings.forms.PageSizeTypes;
        Target: dev.docuware.com.settings.forms.Target;
        ZonePropertyDefaults: dev.docuware.com.settings.forms.ZonePropertyDefaults;
        Zones: Array<dev.docuware.com.settings.forms.Zone>;
    }

    export class IndexField {
        DBName: string;
        DWType: dev.docuware.com.settings.interop.DWFieldType;
        DisplayName: string;
        SourceType: dev.docuware.com.settings.forms.IndexFieldSourceTypes;
        Value: string;
    }

    const enum IndexFieldSourceTypes {
        WebFormField = 0,
        FixedValue = 1,
    }

    const enum PageSizeTypes {
        A4 = 0,
        Letter = 1,
    }

    export class Target {
        DialogGUID: string;
        FileCabinetGUID: string;
        UseDefaultWebBasket: boolean;
        UseDefaultWebBasketSpecified: boolean;
        UseDefaultWebBasketSpecified1: boolean;
        UseDefaultWebBasketSpecified1Specified: boolean;
        WebBasketGUID: string;
    }

    export class ZonePropertyDefaults {
        FontColor: string;
        FontSize: number;
        FontType: string;
        FontWeightBold: boolean;
        FontWeightItalic: boolean;
        FontWeightUnderlined: boolean;
        TextAlignment: dev.docuware.com.settings.forms.AlignmentType;
    }

    export class Zone {
        FillAreaName: string;
        FontColor: string;
        FontSize: number;
        FontType: string;
        FontWeightBold: boolean;
        FontWeightItalic: boolean;
        FontWeightUnderlined: boolean;
        H: number;
        MappedWebFormFieldName: string;
        MappedWebFormFieldType: string;
        OriginalImageWidth: number;
        PageNumber: number;
        SampleText: string;
        TextAlignment: dev.docuware.com.settings.forms.AlignmentType;
        Type: string;
        W: number;
        WrapText: boolean;
        X: number;
        Y: number;
        ZoneID: number;
    }

    export class PublicUser {
        Encrypted: boolean;
        Organization: string;
        Password: string;
        UserGUID: string;
        Username: string;
    }

    export class SubmissionOptions {
        Redirect: boolean;
        RedirectDelaySeconds: number;
        RedirectImmediately: boolean;
        RedirectType: dev.docuware.com.settings.forms.RedirectType;
        RedirectUrl: string;
        ShowLinkToStoredDocument: boolean;
        ShowReturnToForm: boolean;
        ShowSubmissionMessage: boolean;
        SubmissionMessage: string;
    }

    const enum RedirectType {
        ReturnToForm = 0,
        URL = 1,
        StoredDocument = 2,
    }

    export class WebForm {
        Behaviors: Array<dev.docuware.com.settings.forms.Behavior>;
        FieldValidations: Array<dev.docuware.com.settings.forms.CustomFieldValidation>;
        Fields: Array<dev.docuware.com.settings.forms.WebFormControl>;
    }

    export class Behavior {
        BehaviorID: string;
        Conditions: Array<dev.docuware.com.settings.forms.BehaviorCondition>;
        Description: string;
        FailActions: Array<dev.docuware.com.settings.forms.BehaviorAction>;
        Name: string;
        PassActions: Array<dev.docuware.com.settings.forms.BehaviorAction>;
    }

    export class BehaviorCondition extends dev.docuware.com.settings.forms.FormCondition {

    }

    export class FormCondition {
        Continuation: dev.docuware.com.settings.forms.Continuation;
        FieldID: string;
        Operator: dev.docuware.com.settings.forms.Operator;
        Value: string;
    }

    const enum Continuation {
        None = 0,
        And = 1,
        Or = 2,
    }

    const enum Operator {
        Equals = 0,
        DoesNotEqual = 1,
        Contains = 2,
        DoesNotContain = 3,
        LessThan = 4,
        GreaterThan = 5,
        LessThanOrEqual = 6,
        GreaterThanOrEqual = 7,
        IsEmpty = 8,
        IsNotEmpty = 9,
    }

    export class ValidationCondition extends dev.docuware.com.settings.forms.FormCondition {
        ComparisonType: dev.docuware.com.settings.forms.ComparisonType;
    }

    const enum ComparisonType {
        FixedValue = 0,
        WebFormField = 1,
        CurrentDate = 2,
    }

    export class BehaviorAction {
        Name: string;
    }

    export class ToggleBehaviorAction extends dev.docuware.com.settings.forms.BehaviorAction {
        Enabled: boolean;
    }

    export class CustomFieldValidation {
        Conditions: Array<dev.docuware.com.settings.forms.ValidationCondition>;
        Description: string;
        ErrorMessage: string;
        FieldType: string;
        FieldValidationID: string;
        Name: string;
    }

    export class WebFormControl {
        BehaviorID: string;
        ID: string;
        Label: string;
        Position: dev.docuware.com.settings.forms.Position;
        Type: string;
    }

    export class Position {
        height: number;
        width: number;
        x: number;
        y: number;
    }

    export class WebFormField extends dev.docuware.com.settings.forms.WebFormControl {
        Hidden: boolean;
        HiddenSpecified: boolean;
        Hint: string;
        Readonly: boolean;
        ReadonlySpecified: boolean;
        Required: boolean;
        RequiredSpecified: boolean;
        ValidationID: string;
        Value: string;
    }

    export class SpacerField extends dev.docuware.com.settings.forms.WebFormField {
        DisplayLine: boolean;
    }

    export class AutoNumberField extends dev.docuware.com.settings.forms.WebFormField {
        FontColor: string;
        FontSize: number;
        NumberGroupGuid: string;
        NumberGroupID: number;
        SourceFileCabinet: string;
    }

    export class ImageField extends dev.docuware.com.settings.forms.WebFormField {
        Alignment: dev.docuware.com.settings.forms.AlignmentType;
        OriginalImageSize: number;
        OriginalImageWidth: number;
    }

    export class FixedText extends dev.docuware.com.settings.forms.WebFormField {

    }

    export class AttachFileField extends dev.docuware.com.settings.forms.WebFormField {
        AttachFileInfos: Array<dev.docuware.com.settings.forms.AttachFileInfo>;
        FileTypes: string;
        MaxFileCount: number;
        MaxFileSize: number;
        MinFileCount: number;
        ShowFileInfo: boolean;
    }

    export class AttachFileInfo {
        FormattedSize: string;
        Name: string;
        Source: dev.docuware.com.settings.forms.FileSource;
    }

    const enum FileSource {
        FileSystem = 0,
        DocTray = 1,
    }

    export class SignatureField extends dev.docuware.com.settings.forms.WebFormField {
        Color: string;
    }

    export class Headline extends dev.docuware.com.settings.forms.WebFormField {
        Alignment: dev.docuware.com.settings.forms.AlignmentType;
        FontSize: number;
        Subtitle: string;
    }

    export class DropDownList extends dev.docuware.com.settings.forms.WebFormField {
        Options: Array<string>;
        PredefinedValue: string;
        SelectListGuid: string;
        SortOrder: string;
        SourceUserProvided: boolean;
    }

    export class CheckGroup extends dev.docuware.com.settings.forms.WebFormField {
        ColumnWidth: dev.docuware.com.settings.forms.ColumnWidthType;
        NumberOfColumns: number;
        Options: Array<dev.docuware.com.settings.forms.WebFormOption>;
        Orientation: dev.docuware.com.settings.forms.OrientationType;
        PredefinedValues: Array<string>;
        SortOrder: string;
    }

    const enum ColumnWidthType {
        Auto = 0,
        Equal = 1,
    }

    export class WebFormOption {
        Checked: boolean;
        CheckedSpecified: boolean;
        Label: string;
    }

    const enum OrientationType {
        Vertical = 0,
        Horizontal = 1,
    }

    export class RadioGroup extends dev.docuware.com.settings.forms.WebFormField {
        ColumnWidth: dev.docuware.com.settings.forms.ColumnWidthType;
        NumberOfColumns: number;
        Options: Array<dev.docuware.com.settings.forms.WebFormOption>;
        Orientation: dev.docuware.com.settings.forms.OrientationType;
        PredefinedValue: string;
        SortOrder: string;
    }

    export class DateField extends dev.docuware.com.settings.forms.WebFormField {
        PredefinedCustomEntry: string;
        PredefinedEntry: dev.docuware.com.settings.forms.PredefinedEntryType;
    }

    const enum PredefinedEntryType {
        None = 0,
        Custom = 1,
        CurrentUserShortName = 2,
        CurrentUserLongName = 3,
        CurrentDate = 4,
        CurrentDateTime = 5,
        CurrentUserEmail = 6,
    }

    export class NumberField extends dev.docuware.com.settings.forms.WebFormField {
        DecimalPlaces: number;
        ForceDecimalPlaces: boolean;
        MaxValue: number;
        MaxValueSpecified: boolean;
        MinValue: number;
        MinValueSpecified: boolean;
        PredefinedCustomEntry: number;
        PredefinedCustomEntrySpecified: boolean;
        PredefinedEntry: dev.docuware.com.settings.forms.PredefinedEntryType;
    }

    export class MultiLineTextField extends dev.docuware.com.settings.forms.WebFormField {
        MaxLength: number;
        MaxLengthSpecified: boolean;
        MinLength: number;
        MinLengthSpecified: boolean;
        PredefinedCustomEntry: string;
        PredefinedEntry: dev.docuware.com.settings.forms.PredefinedEntryType;
    }

    export class TextField extends dev.docuware.com.settings.forms.WebFormField {
        FieldMaskGuid: string;
        MaxLength: number;
        MaxLengthSpecified: boolean;
        MinLength: number;
        MinLengthSpecified: boolean;
        PredefinedCustomEntry: string;
        PredefinedEntry: dev.docuware.com.settings.forms.PredefinedEntryType;
    }
}

declare module dev.docuware.com.settings.interop {
    const enum DWProductTypes {
        DocuWareClient = 0,
        DocuWareClientLic4 = 1,
        ReadAndApproveClient = 2,
        DocuWareSite = 3,
        CONNECTToMOSS = 4,
        SmartConnect = 5,
        WebClient = 6,
        ROWebClient = 7,
        TaskList = 8,
        EmailAlert = 9,
        CONNECTToOutlook = 10,
        Mobile = 11,
        CONNECTToMail = 12,
        DocuWareServer = 13,
        PlatformService = 14,
        WorkflowManager = 15,
        Import = 16,
        DWRequest = 17,
        BarcodeAndForms = 18,
        WindowsExplorerClient = 19,
        Administration = 20,
        Unknown = 21,
        Forms = 22,
        PublicForms = 23,
        AutoIndex = 24,
        DesktopApps = 25
    }

    export class SettingsQuery extends dev.docuware.com.settings.interop.DWQuery {
        Guid: string;
        Guids: Array<string>;
        ID: number;
        IDs: Array<number>;
        Name: string;
    }

    export class DWQuery {

    }

    export class SettingsHeader {
        Guid: string;
        ID: number;
        Name: string;
    }

    const enum DWFieldType {
        Text,
        Numeric,
        Memo,
        Date,
        Keyword,
        Decimal,
        DateTime,
        Table
    }

    export class SettingsRightQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Right: dev.docuware.com.settings.relations.RelationRight;
    }

    const enum SaveFlags {
        New = 0,
        OverwriteExisting = 1,
    }

    const enum DeleteFlags {
        DeleteOnlyIfSingleHit = 1,
        ForceDelete = 2,
    }

    const enum DWSystemVariableName {
        None = 0,
        CurrentUserShortName = 1,
        CurrentUserLongName = 2,
        CurrentDate = 3,
        CurrentDateTime = 4,
        CurrentUserEmail = 5,
        Clipboard = 6,
        ImportDirectoryName = 7,
        ImportParentDirectoryName = 8,
        FileName = 9,
        FileExtension = 10,
        FileNameWithExtension = 11,
        FileModificationDateTime = 12,
        FileCreationDateTime = 13,
    }

    const enum DWFileCabinetRights {
        OWNER = 0,
        MODIFY_RIGHTS = 1,
        OPERATOR = 2,
        EDIT_DIALOGS = 3,
        STORE = 4,
        APPEND = 5,
        SEARCH = 6,
        EDIT_INDEX_DATA = 7,
        DISPLAY_DOCUMENT = 8,
        EDIT_DOCUMENTS = 9,
        DELETE_DOCUMENTS = 10,
        EXPORT = 11,
        APPEND_TO_RO = 12,
        MODIFY_RO_DOCUMENT = 13,
        CHECKOUT = 14,
        VIEW_AUDIT_DATA = 15
    }

    export class SettingWithFileCabinetHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.FileCabinetHeader;
    }

    export class DWSetting {

    }

    const enum QueryUsage {
        Administration = 0,
        Runtime = 1,
    }

    export class SettingWithSearchDialogHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.SearchDialogHeader;
    }

    export class SettingWithStoreDialogHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.StoreDialogHeader;
    }

    export class SettingWithResultListHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.ResultListHeader;
    }

    export class SettingWithTreeViewHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.TreeViewHeader;
    }

    export class SettingWithInfoDialogHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.InfoDialogHeader;
    }

    export class SettingWithTaskListHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.TaskListHeader;
    }

    export class RelationSettingsQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Relations: dev.docuware.com.settings.relations.RelationQuery;
    }

    export class SettingWithFileCabinetProfileHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.FileCabinetProfileHeader;
    }

    const enum DWFileCabinetAnnotationRights {
        NEW = 0,
        DELETE = 1,
        CHANGE = 2,
        STAMP = 3,
        HIDE_GRAPHICAL_ELEMENT = 4,
    }

    const enum DWFileCabinetFieldRights {
        ALLOW_NEW_VALUES = 0,
        READ = 1,
        SEARCH = 2,
        WRITE = 3,
        MODIFY_INDEX_ENTRIES = 4,
    }

    export class SettingWithDocumentLinkHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.DocumentLinkHeader;
    }

    export class SettingWithAutoNumberHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.filecabinet.AutoNumberHeader;
    }

    export class SettingWithOrganizationHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.organization.OrganizationHeader;
    }

    const enum DocumentSourceType {
        Printer = 0,
        Scanner = 1,
        WebCapture = 2,
        DocTray = 3,
        None = 4,
    }

    const enum DWFunctionalRights {
        SYSTEM_ADMIN = 0,
        ORGANIZATION_ADMIN = 1,
        FILECABINETS = 2,
        USERMANAGEMENT = 3,
        WEBADMIN_MANAGESMARTCONNECT = 4,
        WEBADMIN_MANAGEWEBBASKET = 5,
        WEBADMIN_MANAGEEMAILALERT = 6,
        WEBADMIN_MANAGEOCRTEMPLATE = 7,
        WEBADMIN_MANAGEC2OUTLOOK = 8,
        BPW_DESIGNWORKFLOWS = 9,
        WEBADMIN_MANAGEDOCUMENTPROCESSING = 10,
        WEBADMIN_MANAGEDWREQUEST = 11,
        WEBADMIN_MANAGEINTELLIX = 12,
        WEBADMIN_MANAGECONNECTTOMAIL = 13,
        STAMPS = 14,
        SELECTLISTS = 15,
        WEBADMIN_MANAGEFORMSCONFIGURATION = 16,
        MAINTAIN_FIXED_SELECTLISTS = 17,
        AUTOINDEXPROCESS = 18,
        WEBADMIN_MANAGESYNCHRONIZATION = 19,
        DELETIONPROCESS = 20,
        WEBADMIN_AUDITCONFIGURATION = 21,
        EXPORTPROCESS = 22,
        FREESQLS = 23,
        USERSYNCHRONIZATION = 24,
        FIELDENTRYMASKS = 25,
        WEBSERVICES = 26
    }

    const enum SortColumn {
        Name = 0,
        Email = 1
    }

    const enum OrderDirection {
        Asc = 0,
        Desc = 1
    }

    export class SettingWithFileConnectionHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.organization.FileConnectionHeader;
    }

    export class SettingWithSelectListHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.organization.SelectListHeader;
    }

    export class SettingWithWebInstanceHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.web.WebInstanceHeader;
    }

    export class SettingWithRegExHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.organization.RegExHeader;
    }

    export class SettingWithStampHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.stamp.StampHeader;
    }

    export class SettingWithSubstitutionRuleHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.organization.SubstitutionRuleHeader;
    }

    export class SettingWithSubstitutionListHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.organization.SubstitutionListHeader;
    }

    export class SettingWithFileExtensionListHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.organization.FileExtensionListHeader;
    }

    export class SettingWithServerHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.system.ServerHeader;
    }

    export class SettingWithDatabaseConnectionHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.system.DatabaseConnectionHeader;
    }

    export class SettingWithStorageLocationHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.system.StorageLocationHeader;
    }

    export class SettingWithSMTPConnectionHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.system.SMTPConnectionHeader;
    }

    export class SettingWithSolrConnectionHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.system.SolrConnectionHeader;
    }

    export class SettingWithWebConnectionHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.web.WebConnectionHeader;
    }

    export class SettingWithIntellixConnectionHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.system.IntellixConnectionHeader;
    }

    export class SettingWithExternalApplicationHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.system.ExternalApplicationHeader;
    }

    export class SettingWithTrustedUserHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.usermanagement.TrustedUserHeader;
    }

    export class SettingWithRoleHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.usermanagement.RoleHeader;
    }

    export class SettingWithGeneralProfileHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.usermanagement.GeneralProfileHeader;
    }

    export class SettingWithGroupHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.usermanagement.GroupHeader;
    }

    export class FieldMetaDataResultItem {
        Description: Array<dev.docuware.com.settings.interop.FieldMetaDataResultItemLangValue>;
        Id: string;
        Label: Array<dev.docuware.com.settings.interop.FieldMetaDataResultItemLangValue>;
        Type: string;
    }

    export class FieldMetaDataResultItemLangValue {
        Lang: string;
        Value: string;
    }

    export class SettingWithWebServiceHeader extends dev.docuware.com.settings.interop.DWSetting {
        Header: dev.docuware.com.settings.webservices.WebServiceHeader;
    }
}

declare module dev.docuware.com.settings.license {
    export class LicenseQuery extends dev.docuware.com.settings.interop.DWQuery {
        ExpirationType: dev.docuware.com.settings.license.LicenseExpirationType;
        Expired: boolean;
        IncludeNamedLicenses: boolean;
        Organization: string;
        Products: Array<dev.docuware.com.settings.interop.DWProductTypes>;
    }

    const enum LicenseExpirationType {
        Demo = 1,
        Limited_WithWarrning = 2,
        Limited_NoWarrning = 3,
        Unlimited = 4,
    }

    export class License {
        Count: number;
        ExpirationType: dev.docuware.com.settings.license.LicenseExpirationType;
        ExpiredOn: Date;
        Guid: string;
        Product: dev.docuware.com.settings.interop.DWProductTypes;
        Version: number;
    }

    export class NamedLicense extends dev.docuware.com.settings.license.License {
        UserID: string;
        UserName: string;
    }
}

declare module dev.docuware.com.settings.locks {
    export class LockResponse {
        LockSettingID: string;
        Response: dev.docuware.com.settings.locks.DWLockedResponse;
        ServerMessage: string;
    }

    const enum DWLockedResponse {
        Okay = 0,
        LockedByOther = 1,
        Deleted = 2,
    }

    export class LockItem {
        SettingID: string;
        SettingType: dev.docuware.com.settings.locks.DWLockedSettings;
    }

    const enum DWLockedSettings {
        SmartConnect = 0,
        WebBasket = 1,
        EMailAlert = 2,
        OCRTemplate = 3,
        DWUser = 4,
        Role = 5,
        Group = 6,
        FileCabinet = 7,
        SearchDialog = 8,
        StoreDialog = 9,
        ResultDialog = 10,
        FileCabinetProfile = 11,
        OutlookConfiguration = 12,
        OutlookAccessSetting = 13,
        DocumentType = 14,
        PrinterConfiguration = 15,
        EMailImportConfiguration = 16,
        IntellixConnection = 17,
        GeneralProfile = 18,
        Stamp = 19,
        SelectList = 20,
        IMAPServer = 21,
        DocumentLink = 22,
        AutoNumber = 23,
        FormsConfiguration = 24,
        WholeFileCabinet = 25,
        OBRTemplate = 26,
        WebBasketLocation = 27,
        Replication = 28,
        MailService = 29,
        AutoIndex = 30,
        OutlookMonitorConfiguration = 31,
        RegularExpression = 32,
        DeletionProcess = 33,
        FileCabinetAudit = 34,
        ExportProcess = 35,
        RequestExport = 36,
        RequestImport = 37,
        WebService = 38,
        SMTPConnection = 39,
        OrgSMTPConnection = 40
    }
}

declare module dev.docuware.com.settings.mailservices {
    export class MailServiceQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Active: boolean;
    }

    export class MailServiceHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        Description: string;
    }

    export class MailService {
        Header: dev.docuware.com.settings.mailservices.MailServiceHeader;
        MailsPerIteration: number;
        MailsPerIterationSpecified: boolean;
        Timeout: number;
        TimeoutSpecified: boolean;
    }

    export class IMAPMailService extends dev.docuware.com.settings.mailservices.MailService {
        Host: string;
        Port: number;
        PortSpecified: boolean;
        UseSSL: boolean;
        UseSSLSpecified: boolean;
    }

    export class ExchangeMailService extends dev.docuware.com.settings.mailservices.MailService {
        Domain: string;
        EWS: string;
        Password: string;
        SoftDelete: boolean;
        SoftDeleteSpecified: boolean;
        User: string;
    }
}

declare module DocuWare.WAFServices.DataContracts.Organization {
    export class SMTPOrgAssignmentQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        AssignedModule: dev.docuware.com.settings.SMTPModule;
        SmtpConnectionGuid: string;
        SmtpConnectionGuids: Array<string>;
        UsedForDeletion: boolean;
    }
}

declare module dev.docuware.com.settings.ocr.configuration {
    export class OCRConfigHeader extends dev.docuware.com.settings.ocr.OptRecHeader {
        LastModified: Date;
        ProviderGuid: string;
        ProviderName: string;
    }

    export class OCRConfig extends dev.docuware.com.settings.ocr.OptRecConfig {
        Body: dev.docuware.com.settings.ocr.configuration.Settings;
        Header: dev.docuware.com.settings.ocr.configuration.OCRConfigHeader;
    }

    export class Settings extends dev.docuware.com.settings.ocr.OptRecBody {
        GeneralSettings: dev.docuware.com.settings.ocr.configuration.General;
        ProviderSpecificSettings: string;
    }

    export class General {
        Languages: Array<dev.docuware.com.settings.ocr.configuration.Language>;
        RemoveBlanks: boolean;
        TradeOff: dev.docuware.com.settings.ocr.TradeOffType;
    }

    export class Language {
        languageID: number;
        name: string;
    }

    export class OCRQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {
        AssignedToFileCabinet: string;
        AssignedToWebBasket: string;
        Provider: string;
    }
}

declare module dev.docuware.com.settings.ocr {
    export class OptRecHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Description: string;
        OrganizationGuid: string;
        RecognitionType: dev.docuware.com.settings.ocr.OptRecType;
    }

    const enum OptRecType {
        OCR = 0,
        OBR = 1,
    }

    export class OptRecConfig {

    }

    export class OptRecBody {
        KeyValues: Array<dev.docuware.com.settings.common.KeyValuePair>;
    }

    export class BarcodeType {
        DwBarcodeType: dev.docuware.com.settings.ocr.DocuWareBarcodeTypes;
    }

    const enum DocuWareBarcodeTypes {
        Unknown = 0,
        All = 1,
        UpcE = 2,
        UpcA = 3,
        Ean = 4,
        EanExt2 = 5,
        EanExt5 = 6,
        Ean8 = 7,
        Ean13 = 8,
        Ean128 = 9,
        C25Industrial = 10,
        C25Matrix = 11,
        C25Interleaved = 12,
        C25DataLogic = 13,
        C25Iata = 14,
        C25Inverted = 15,
        Code39 = 16,
        Code93 = 17,
        Code128 = 18,
        BcdMatrix = 19,
        Codabar = 20,
        Code11 = 21,
        MSI = 22,
        RSS = 23,
        Postal = 24,
        Telepen = 25,
        PatchCode = 26,
        Pharmacode = 27,
        DataMatrix = 28,
        QR = 29,
        PDF417 = 30,
        MaxiCode = 31,
        Aztec = 32,
    }

    const enum TradeOffType {
        BALANCED = 0,
        FAST = 1,
        ACCURATE = 2,
    }
}

declare module dev.docuware.com.settings.organization {
    export class OrganizationIdentityQuery extends dev.docuware.com.settings.interop.DWQuery {
        LegacyId: number;
        Guid: string;
        Name: string;
        Guids: Array<string>;
    }

    export class OrganizationIdentity {
        Active: boolean;
        Databases: System.Collections.Generic.Dictionary<dev.docuware.com.settings.organization.DatabaseType, string>;
        DomainAddress: string;
        Guid: string;
        LegacyId: number;
        JobServerAddress: string;
        Name: string;
        PlatformAddress: string;
        SettingsServiceAddress: string;
        WebClientAddress: string;
        WebClientSettingsAddress: string;
    }

    const enum DatabaseType {
        Organization = 1,
        Workflow = 2,
    }

    export class OrganizationQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class OrganizationHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        CompanyNames: Array<string>;
    }

    export class OrganizationAuditSettings {
        AuditConfigurationChangesEnabled: boolean;
        AuditUserLoggingEnabled: boolean;
    }

    export class OrganizationSettings extends dev.docuware.com.settings.interop.SettingWithOrganizationHeader {
        AuditSettings: OrganizationAuditSettings;
        AddressLines: Array<string>;
        Administrator: string;
        AllowFeedbackToDocuWare: boolean;
        Calendar: OrganizationCalendar;
        EMail: string;
        FaxNumber: string;
        PhoneNumber: string;
        RuntimeVersion: string;
        SystemNumber: string;
        Type: string;
        HasSecurePassword: boolean;
        SingleSignOn: SingleSignOnSettings;
    }

    export class SingleSignOnSettings {
        IsEnabled: boolean;
        OpenIdConnection: OpenIdConnection;
    }

    export class OpenIdConnection {
        IdentityProvider: IdentityProvider;
        IssuerUrl: string;
        ClientId: string;
        ClientSecret: string;
    }

    const enum IdentityProvider {
        AzureAd = 0,
        ADFS = 1,
    }

    export class OrganizationCalendar {
        TimeZoneId: string;
    }

    export class CreateOrganizationParams {
        AdministratorParams: dev.docuware.com.settings.organization.CreateOrganizationAdminParams;
        Guid: string;
        LicenseContent: string;
        LoggingConnectionGuid: string;
        OrganizationDatabaseConnectionGuid: string;
        WorkflowDatabaseConnectionGuid: string;
    }

    export class CreateOrganizationAdminParams {
        DBName: string;
        Name: string;
        Password: string;
    }

    export class FileConnection extends dev.docuware.com.settings.interop.SettingWithFileConnectionHeader {
        CodePage: number;
        ExampleFile: string;
        File: string;
        StorageLocation: string;
    }

    export class FileConnectionHeader extends dev.docuware.com.settings.interop.SettingsHeader {

    }

    export class FixedWidthFileConnection extends dev.docuware.com.settings.organization.FileConnection {
        Columns: Array<dev.docuware.com.settings.organization.FixedWidthColumn>;
    }

    export class FixedWidthColumn extends dev.docuware.com.settings.organization.ColumnSettings {
        Width: number;
    }

    export class ColumnSettings {
        Active: boolean;
        Caption: string;
        ColumnType: dev.docuware.com.settings.organization.ColumnType;
        DateFormat: DateFormat;
        NumberFormat: NumberFormat;
    }

    const enum ColumnType {
        Text = 1,
        Numeric = 2,
        Date = 4,
        DateTime = 7
    }

    export class DateFormat {
        Format: string;
        Culture: string;
        InterpretYearMax: number;
    }

    export class NumberFormat {
        Culture: string;
        NumberDecimalSeparator: string;
        NumberDecimalDigits: number;
        NumberGroupSeparator: string;
        NumberNegativePattern: number;
    }

    export class DelimitedFileConnection extends dev.docuware.com.settings.organization.FileConnection {
        Columns: Array<dev.docuware.com.settings.organization.DelimitedColumn>;
        DelimitersCodes: Array<number>;
        TextIndicator: string;
    }

    export class DelimitedColumn extends dev.docuware.com.settings.organization.ColumnSettings {

    }

    export class FixedSelectList extends dev.docuware.com.settings.organization.SelectList {
        Entries: Array<dev.docuware.com.settings.organization.SelectListEntry>;
    }

    export class SelectList extends dev.docuware.com.settings.interop.SettingWithSelectListHeader {
        Columns: Array<string>;
    }

    export class SelectListHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        IsMultiField: boolean;
        Type: dev.docuware.com.settings.organization.SelectListType;
    }

    const enum SelectListType {
        External = 0,
        Fixed = 1,
    }

    export class DynamicSelectList extends dev.docuware.com.settings.organization.SelectList {
        ConnectionGuid: string;
        Payload: string;
        Type: dev.docuware.com.settings.organization.DynamicSelectListType;
    }

    const enum DynamicSelectListType{
        FileConnection=0,
        Table=1,
        SQLCommand = 2,
        View = 3
    }

    export class SettingsSelectList extends dev.docuware.com.settings.organization.SelectList {
        IsUserDefined: boolean;
        Type: DocuWare.WAFServices.DataContracts.SelectLists.SettingsTypes;
    }

    export class LdsSelectList extends dev.docuware.com.settings.organization.SelectList {
        LdsGuid: string;
        LdsName: string;
    }

    export class SelectListEntry {

    }

    export class SingleFieldSelectListEntry extends dev.docuware.com.settings.organization.SelectListEntry {
        Value: string;
    }

    export class MultiFieldSelectListEntry extends dev.docuware.com.settings.organization.SelectListEntry {
        Values: Array<string>;
    }

    export class RegExQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Expression: string;
    }

    export class RegExHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Expression: string;
    }

    export class RegularExpression extends dev.docuware.com.settings.interop.SettingWithRegExHeader {
        ErrorText: string;
        Placeholder: dev.docuware.com.settings.organization.Placeholder;
        SampleEditText: string;
    }

    const enum Placeholder {
        None = 0,
        Space = 1,
        UnderScore = 2,
        Number = 3,
        At = 4,
        Exclamation = 5,
        Percent = 6,
        Asterisk = 7,
        Dollar = 8,
    }

    export class SelectListQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        MultiField: boolean;
        Type: dev.docuware.com.settings.organization.SelectListTypes;
    }

    const enum SelectListTypes {
        DWSetting = 0,
        Dynamic = 1,
        Fixed = 2,
        LdsConnection = 3,
    }

    export class SubstitutionRuleQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Active: boolean;
    }

    export class SubstitutionRuleHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        Description: string;
    }

    export class SubstitutionRule extends dev.docuware.com.settings.interop.SettingWithSubstitutionRuleHeader {
        Users: Array<dev.docuware.com.settings.organization.SubstitutionUser>;
    }

    export class SubstitutionUser {
        Guid: string;
        Order: number;
    }

    export class SubstitutionListQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Active: boolean;
    }

    export class SubstitutionListHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        Description: string;
    }

    export class SubstitutionList extends dev.docuware.com.settings.interop.SettingWithSubstitutionListHeader {
        Rules: Array<string>;
    }

    export class FileExtensionListQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class FileExtensionList extends dev.docuware.com.settings.interop.SettingWithFileExtensionListHeader {
        Extensions: Array<string>;
    }

    export class FileExtensionListHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        IsPredefined: boolean;
    }

    export class FileConnectionQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class OrgSMTPConnectionQuery extends dev.docuware.com.settings.system.SMTPConnectionQuery {

    }

    export class OrgSMTPConnection extends dev.docuware.com.settings.interop.SettingWithSMTPConnectionHeader {
        Password: string;
        Port: number;
        SecurityProtocol: dev.docuware.com.settings.SecurityProtocol;
        Sender: string;
        SenderEmail: string;
        Server: string;
        UseAuthentication: boolean;
        User: string;
    }

    export class SMTPOrgAssignment extends dev.docuware.com.settings.interop.DWSetting {
        AssignedModules: Array<dev.docuware.com.settings.SMTPModule>;
        SMTPSettingsGuid: string;
    }
}

declare module dev.docuware.com.settings.recognition.base {
    export class RecognitionHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        DefaultOCRSettingsGuid: string;
        DefaultRecognitionTechnology: dev.docuware.com.settings.recognition.base.RecognitionTechnology;
        Description: string;
        Hotkey: dev.docuware.com.settings.common.KeyDef;
        IsValid: boolean;
        LastModified: Date;
        SourceWindow: dev.docuware.com.settings.recognition.base.SourceWindowDef;
        Target: dev.docuware.com.settings.recognition.base.RecognitionTarget;
    }

    const enum RecognitionTechnology {
        OCR = 0,
        Native = 1,
    }

    export enum SimpleTextRuleOperands {
        //0
        Equals,

        //1
        Contains,

        //2
        BeginsWith,

        //3
        EndsWith,
    }

    export class ScreenshotIdentificationRule {
        public Operand: SimpleTextRuleOperands;
        public Value: string;
    }

    export class SourceWindowDef {
        WindowTitleMatchExpression: ScreenshotIdentificationRule;
    }

    export class RecognitionTarget extends dev.docuware.com.settings.recognition.base.RecognitionTargetBase {
        Fields: Array<dev.docuware.com.settings.recognition.base.RecognitionField>;
    }

    export class RecognitionTargetBase extends dev.docuware.com.settings.recognition.base.StoreTarget {
        DialogGuid: string;
        DialogName: string;
        DialogType: dev.docuware.com.settings.recognition.base.DWDialogTypes;
        FileCabinetGuid: string;
        FileCabinetName: string;
    }

    export class StoreTarget {

    }

    const enum DWDialogTypes {
        Search = 0,
        Store = 1,
        ResultList = 2,
        ResultTree = 3,
        InfoDialog = 4,
    }

    export class RecognitionField extends dev.docuware.com.settings.common.DWDialogField {
        FCFixedEntryType: string;
        ValueTargets: Array<dev.docuware.com.settings.recognition.base.ConnectionTarget>;
        WildCardSearch: dev.docuware.com.settings.recognition.base.WildCardSearch;
    }

    export class ConnectionTarget {
        ErrorWhenNull: boolean;
        IncomingConnection: Array<dev.docuware.com.settings.recognition.base.Connection>;
    }

    export class Connection {
        Output: dev.docuware.com.settings.recognition.base.ConnectionOutput;
        Source: dev.docuware.com.settings.recognition.base.ConnectionSource;
    }

    export class ConnectionOutput {
        Item: any;
    }

    export class ConnectionSource {
        Prefix: string;
    }

    export class DWSystemVariable extends dev.docuware.com.settings.recognition.base.ConnectionSource {
        Name: dev.docuware.com.settings.interop.DWSystemVariableName;
    }

    export class FixedValue extends dev.docuware.com.settings.recognition.base.ConnectionSource {

    }

    export class DateValue extends dev.docuware.com.settings.recognition.base.FixedValue {
        Value: Date;
    }

    export class DecimalValue extends dev.docuware.com.settings.recognition.base.FixedValue {
        Value: number;
    }

    export class NumericValue extends dev.docuware.com.settings.recognition.base.FixedValue {
        Value: number;
    }

    export class StringValue extends dev.docuware.com.settings.recognition.base.FixedValue {
        Value: string;
    }

    export class ZoneSource extends dev.docuware.com.settings.recognition.base.ConnectionSource {
        DateTimeFormat: dev.docuware.com.settings.common.DateFormatString;
        NumberFormatDescription: dev.docuware.com.settings.recognition.base.SimpleNumberFormatDescription;
        TimeBeforeDate: boolean;
        TimeFormat: string;
        TimeSeparator: string;
        ZoneDefGuid: string;
    }

    export class SimpleNumberFormatDescription {
        Culture: string;
        DecimalSeparator: string;
        GroupSeparator: SimpleNumberFormatDescriptionGroupSeparator;
        NegativeSign: string;
    }

    export class SimpleNumberFormatDescriptionGroupSeparator {
        public Value: string;
    }

    export class ListZoneSource extends dev.docuware.com.settings.recognition.base.ZoneSource {
        ItemSeparator: string;
        ListSelector: dev.docuware.com.settings.recognition.base.ListSelector;
    }

    export class ListSelector {
        ExcludeDuplicateEntries: boolean;
        ListSelectionMode: dev.docuware.com.settings.recognition.base.ListSelectionMode;
    }

    const enum ListSelectionMode {
        SelectAllEntries = 0,
        UserSelection = 1,
    }

    export class ItemZoneSource extends dev.docuware.com.settings.recognition.base.ZoneSource {

    }

    const enum WildCardSearch {
        ExtactSearch = 0,
        PrefixSearch = 1,
        SuffixSearch = 2,
        InfixSearch = 3,
    }

    export class RecognitionBody {
        AnchorDefs: Array<dev.docuware.com.settings.recognition.base.AnchorDef>;
        AreaDefs: Array<dev.docuware.com.settings.recognition.base.AreaDef>;
        ControlDefs: Array<dev.docuware.com.settings.recognition.base.ControlDef>;
        Layout: dev.docuware.com.settings.recognition.base.Layout;
        ProcessConfig: dev.docuware.com.settings.recognition.base.RecognitionProcessConfig;
        Sample: dev.docuware.com.settings.recognition.base.Sample;
        ZoneDefs: Array<dev.docuware.com.settings.recognition.base.ZoneDef>;
    }

    export class AnchorDef extends dev.docuware.com.settings.recognition.base.ElementDef {
        AreaDefGuid: string;
        OCRSettingsGuid: string;
        OccurrenceIndex: number;
        OccurrenceIndexSpecified: boolean;
        RecognitionTechnology: dev.docuware.com.settings.recognition.base.RecognitionTechnology;
        SearchString: string;
    }

    export class ElementDef {
        Guid: string;
        Name: string;
    }

    export class ControlDef extends dev.docuware.com.settings.recognition.base.ElementDef {

    }

    export class AreaDef extends dev.docuware.com.settings.recognition.base.ElementDef {

    }

    export class ZoneDef extends dev.docuware.com.settings.recognition.base.ElementDef {
        OCRSettingsGuid: string;
        RecognitionTechnology: dev.docuware.com.settings.recognition.base.RecognitionTechnology;
    }

    export class SourceZoneDef extends dev.docuware.com.settings.recognition.base.ZoneDef {
        AnchorDefGuid: string;
        AnchorType: dev.docuware.com.settings.recognition.base.AnchorType;
    }

    const enum AnchorType {
        TopLeft = 0,
        TopRight = 1,
        BottomLeft = 2,
        BottomRight = 3,
        Custom = 4,
    }

    export class ListZoneDef extends dev.docuware.com.settings.recognition.base.SourceZoneDef {
        DefaultZoneSource: dev.docuware.com.settings.recognition.base.ListZoneSource;
    }

    export class ItemZoneDef extends dev.docuware.com.settings.recognition.base.SourceZoneDef {
        DefaultZoneSource: dev.docuware.com.settings.recognition.base.ItemZoneSource;
    }

    export class BarcodeZoneDef extends dev.docuware.com.settings.recognition.base.SourceZoneDef {

    }

    export class Layout {
        Faces: dev.docuware.com.settings.recognition.base.Faces;
    }

    export class Faces {
        Face: dev.docuware.com.settings.recognition.base.Face;
    }

    export class Face {
        FaceLayouts: dev.docuware.com.settings.recognition.base.FaceLayouts;
    }

    export class FaceLayouts {
        FaceLayout: dev.docuware.com.settings.recognition.base.FaceLayout;
    }

    export class FaceLayout {
        Anchors: Array<dev.docuware.com.settings.recognition.base.Anchor>;
        ApplyWhenDifferentSize: boolean;
        Areas: Array<dev.docuware.com.settings.recognition.base.Area>;
        Controls: Array<dev.docuware.com.settings.recognition.base.DWControl>;
        FaceSampleGuid: string;
        Name: string;
        Zones: Array<dev.docuware.com.settings.recognition.base.Zone>;
    }

    export class Anchor extends dev.docuware.com.settings.recognition.base.Element {
        Text: string;
    }

    export class Element {
        BoundingBox: dev.docuware.com.settings.common.DWRectangle;
        DefGuid: string;
    }

    export class DWControl extends dev.docuware.com.settings.recognition.base.Element {

    }

    export class Area extends dev.docuware.com.settings.recognition.base.Element {

    }

    export class Zone extends dev.docuware.com.settings.recognition.base.Element {
        RecognitionEvaluation: dev.docuware.com.settings.recognition.base.RecognitionEvaluation;
        RecognitionEvaluationSpecified: boolean;
        Text: string;
    }

    const enum RecognitionEvaluation {
        Unknown = 0,
        Correct = 1,
        Wrong = 2,
    }

    export class BarcodeZone extends dev.docuware.com.settings.recognition.base.Zone {

    }

    export class ListZone extends dev.docuware.com.settings.recognition.base.Zone {

    }

    export class ItemZone extends dev.docuware.com.settings.recognition.base.Zone {

    }

    export class RecognitionProcessConfig {
        Guid: string;
    }

    export class Sample {
        FaceSamples: dev.docuware.com.settings.recognition.base.FaceSamples;
    }

    export class FaceSamples {
        FaceSample: dev.docuware.com.settings.recognition.base.FaceSample;
    }

    export class FaceSample extends dev.docuware.com.settings.recognition.base.FaceSampleMetaData {
        Guid: string;
        Image: dev.docuware.com.settings.common.DWImage;
        Textshot: dev.docuware.com.settings.recognition.base.Textshot;
    }

    export class FaceSampleMetaData {
        ClientArea: dev.docuware.com.settings.common.DWRectangle;
        FontSmoothing: dev.docuware.com.settings.recognition.base.FontSmoothing;
        HorizontalResolutionDpi: number;
        RecognizedTitle: string;
        RecordingDate: Date;
        RecordingDateSpecified: boolean;
        RemoteProcessInfo: dev.docuware.com.settings.common.ProcessInformation;
        SmartConnectProcessInfo: dev.docuware.com.settings.common.ProcessInformation;
        VerticalResolutionDpi: number;
    }

    export class FontSmoothing {
        Contrast: number;
        Enabled: boolean;
        FontSmoothingType: dev.docuware.com.settings.recognition.base.FontSmoothingType;
    }

    const enum FontSmoothingType {
        Unknown = 0,
        Standard = 1,
        ClearType = 2,
    }

    export class Textshot {
        StringBoxes: Array<dev.docuware.com.settings.recognition.base.StringBox>;
    }

    export class StringBox {
        BoundingBox: dev.docuware.com.settings.common.DWRectangle;
        CharacterWidths: string;
        Text: string;
    }
}

declare module dev.docuware.com.settings.recognition.smartconnect {
    export class SmartConnectQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {
        Active: boolean;
        DialogID: string;
        Organization: string;
        SCType: dev.docuware.com.settings.recognition.smartconnect.SmartConnectQueryType;
        WindowTitleMatchString: string;
    }

    const enum SmartConnectQueryType {
        Any = 0,
        SmartSearch = 1,
        SmartStore = 2,
        SmartIndexEnhancement = 3,
    }

    export class SmartConnectHeader extends dev.docuware.com.settings.recognition.base.RecognitionHeader {
        DefaultExtractionEngine: dev.docuware.com.settings.recognition.smartconnect.ExtractionEngine;
        SmartConnectType: dev.docuware.com.settings.recognition.smartconnect.SmartConnectType;
    }

    const enum ExtractionEngine {
        Undefined = 0,
        OCRService = 1,
        OCRServiceUseDocuwareCorrectionEngine = 2,
        TextgrabSDK = 3,
        ClipboardOnly = 4,
        ScreenScraperSDKNative = 5,
        ScreenScraperSDKOCR = 6,
        ScreenScraperSDKOCRDocuWareCorrectionEngine = 7,
        ScreenScraperSDKOCRUseInternalCorrectionEngine = 8,
        ScreenScraperSDKFullText = 9,
        ScreenScraperSDKAutomatic = 10,
        ScreenScraperSDKTextOnlyEngine = 11,
        UIAutomationScrapingEngine = 12,
    }

    const enum SmartConnectType {
        SmartSearch = 0,
        SmartStore = 1,
        SmartIndexEnhancement = 2,
        SmartIndexAndStore = 3,
    }

    const enum SmartConnectContentFilterFlags {
        None = 0,
        ExcludeFaceSampleImages = 1,
        ExcludeFaceSampleTextshots = 2,
        ExcludeSamples = 7,
        ExcludeBody = 4294967295,
    }

    export class SmartConnectConfiguration {
        Body: dev.docuware.com.settings.recognition.base.RecognitionBody;
        Header: dev.docuware.com.settings.recognition.smartconnect.SmartConnectHeader;
    }

    export class SmartConnectButtonDef extends dev.docuware.com.settings.recognition.base.ControlDef {
        Caption: string;
        IconName: string;
    }

    export class SmartConnectButton extends dev.docuware.com.settings.recognition.base.DWControl {

    }

    export class SmartIndexEnhancementConfig extends dev.docuware.com.settings.recognition.base.RecognitionProcessConfig {
        StoreChangesImmediately: boolean;
    }

    export class SmartStoreConfig extends dev.docuware.com.settings.recognition.base.RecognitionProcessConfig {
        AllowMultipleFiles: boolean;
        DeleteStoredFilesFromClient: boolean;
        DocCreationMode: dev.docuware.com.settings.recognition.smartconnect.DocCreationMode;
        FileOrderingMode: dev.docuware.com.settings.recognition.smartconnect.FileOrderingMode;
        ShowDocument: boolean;
        ShowStoreDialog: boolean;
        SmartConnectButtonDefGuid: string;
    }

    const enum DocCreationMode {
        UserDecision = 0,
        SingleDocument = 1,
        DocumentPerFile = 2,
    }

    const enum FileOrderingMode {
        UserDecision = 0,
        FileNameAscending = 1,
        FileNameDescending = 2,
        StoreDateAscending = 3,
        StoreDateDescending = 4,
    }

    export class SmartSearchConfig extends dev.docuware.com.settings.recognition.base.RecognitionProcessConfig {
        AlwaysOpenResultList: boolean;
        ShowSearchDialog: boolean;
        SmartConnectButtonDefGuid: string;
    }
}

declare module dev.docuware.com.settings.relations {
    const enum RelationRight {
        Admin = 1,
        Usage = 2,
    }

    export class RelationQuery extends dev.docuware.com.settings.interop.DWQuery {
        SourceID: string;
        SourceIDs: Array<string>;
        SourceType: dev.docuware.com.settings.relations.RelationSettingsType;
        TargetID: string;
        TargetIDs: Array<string>;
        TargetType: dev.docuware.com.settings.relations.RelationSettingsType;
    }

    const enum RelationSettingsType {
        User = 1,
        Role = 2,
        SmartConnect = 3,
        Notification_Rule = 5,
        WebBasket = 6,
        OCRTemplate = 7,
        Organization = 8,
        Server = 9,
        DatabaseConnection = 10,
        StorageLocation = 11,
        FileConnection = 12,
        Group = 13,
        GeneralProfile = 14,
        SearchDialog = 15,
        StoreDialog = 16,
        ResultDialog = 17,
        FileCabinetProfile = 18,
        SolrConnection = 20,
        OutlookConfiguration = 21,
        OutlookAccessSetting = 22,
        PrinterConfiguration = 23,
        EMailImportConfiguration = 24,
        DWRequestLite = 25,
        IntellixConnection = 26,
        Stamp = 27,
        DWImportRequest = 28,
        FormsConfiguration = 29,
        OBRTemplate = 31,
        Replication = 32,
        AutoIndex = 33,
        OutlookMonitorConfiguration = 34,
        DeletionProcess = 35,
        ExportProcess = 36,
    }

    export class ResourceRelationQuery extends dev.docuware.com.settings.relations.RelationQuery {

    }

    export class RelationshipQuery extends dev.docuware.com.settings.relations.RelationQuery {
        Right: dev.docuware.com.settings.relations.RelationRight;
    }

    export class Relationship extends dev.docuware.com.settings.relations.Relation {
        Right: dev.docuware.com.settings.relations.RelationRight;
    }

    export class Relation {
        SourceID: string;
        SourceType: dev.docuware.com.settings.relations.RelationSettingsType;
        TargetID: string;
        TargetType: dev.docuware.com.settings.relations.RelationSettingsType;
    }

    export class ResourceRelation extends dev.docuware.com.settings.relations.Relation {

    }
}

declare module dev.docuware.com.settings.stamp {
    export class StampQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Private: boolean;
        QueryUsage: dev.docuware.com.settings.interop.QueryUsage;
        Types: dev.docuware.com.settings.stamp.StampType;
    }

    export const enum StampType {
        Text = 0,
        Bitmap = 1,
    }

    export class Stamp extends dev.docuware.com.settings.interop.SettingWithStampHeader {
        DesignSettings: dev.docuware.com.settings.stamp.StampDesignSettings;
        Fields: dev.docuware.com.settings.stamp.StampFields;
        GeneralSettings: dev.docuware.com.settings.stamp.StampGeneralSettings;
        Signature: dev.docuware.com.settings.stamp.StampSignature;
    }

    export class StampHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        InnerName: string;
        IsPrivateStamp: boolean;
    }

    export class StampDesignSettings {
        ExistFrame: boolean;
        HeadFont: dev.docuware.com.settings.stamp.FontSettings;
        InsertStampDate: boolean;
        InsertStampTime: boolean;
        InsertUserName: boolean;
    }

    export class FontSettings {
        Bold: boolean;
        Charset: number;
        FontFamily: string;
        Italic: boolean;
        Size: number;
        Strikeout: boolean;
        Underline: boolean;
        Unit: dev.docuware.com.settings.stamp.FontUnits;
    }

    const enum FontUnits {
        World = 0,
        Display = 1,
        Pixel = 2,
        Point = 3,
        Inch = 4,
        Document = 5,
        Millimeter = 6,
    }

    export class StampFields {
        FCGuid: string;
        Fields: Array<dev.docuware.com.settings.stamp.StampField>;
        IgnoreNonexistingFields: boolean;
        InAssignedFCOnly: boolean;
        OverrideExistingEntries: boolean;
    }

    export class StampField {
        DWType: dev.docuware.com.settings.interop.DWFieldType;
        FieldDBName: string;
        FieldName: string;
        Value: dev.docuware.com.settings.stamp.StampFieldValue;
    }

    export class StampFieldValue {

    }

    export class StampFieldFixedValue extends dev.docuware.com.settings.stamp.StampFieldValue {
        Value: string;
    }

    export class StampFieldPromptValue extends dev.docuware.com.settings.stamp.StampFieldValue {
        StampFormFieldUId: string;
    }

    export class StampFieldPredefinedValue extends dev.docuware.com.settings.stamp.StampFieldValue {
        DateTimeValueContainsOnlyTime: boolean;
        Value: dev.docuware.com.settings.interop.DWSystemVariableName;
    }

    export class StampGeneralSettings {
        AutoSaveTime: number;
        AutoSaveType: dev.docuware.com.settings.stamp.AutoSaveStampTypes;
        AutomaticallyOpenNextDocument: boolean;
        CloseWindowAfterStampSet: boolean;
        ColorAsString: string;
        HiddenStamp: boolean;
        KeepStampActive: boolean;
        RequiredPassword: boolean;
    }

    const enum AutoSaveStampTypes {
        AfterSet = 1,
        AfterTime = 2,
        ByUser = 3,
    }

    export class StampSignature {

    }

    export class StampSimpleSignature extends dev.docuware.com.settings.stamp.StampSignature {
        MassAllowed: boolean;
    }

    export class TextStamp extends dev.docuware.com.settings.stamp.Stamp {
        TextContent: dev.docuware.com.settings.stamp.StampTextContent;
    }

    export class StampTextContent {
        FormFields: dev.docuware.com.settings.stamp.StampFormFields;
        Text: string;
        TextFont: dev.docuware.com.settings.stamp.FontSettings;
    }

    export class StampFormFields {
        items: Array<dev.docuware.com.settings.stamp.StampFormField>;
    }

    export class StampFormField {
        Field: string;
        Label: string;
        RegularExpression: string;
        SelectListOnly: boolean;
        SelectLists: Array<string>;
        UIdentifier: number;
        Required: boolean;
    }

    export class BitmapStamp extends dev.docuware.com.settings.stamp.Stamp {
        BitmapContent: Array<number>;
        TransparentBackground: boolean;
    }
}

declare module dev.docuware.com.settings.system {
    export class VersionInfo {
        AssemblyVersion: string;
        FileVersion: string;
        ProductVersion: string;
    }

    export class ServerQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {
        Type: dev.docuware.com.settings.system.ServerTypes;
    }

    const enum ServerTypes {
        Authentication = 1,
        Content = 2,
        Workflow = 4,
        SAPHttp = 8,
        Notification = 16,
        Thumbnail = 32,
        BusinessProcessWorkflow = 64,
    }

    export class ServerHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        RemotingConnection: string;
        Type: dev.docuware.com.settings.system.ServerTypes;
    }

    export class ServerSettings extends dev.docuware.com.settings.interop.SettingWithServerHeader {

    }

    export class WCFServerSettings extends dev.docuware.com.settings.system.ServerSettings {
        BaseAddresses: Array<string>;
    }

    export class BusinessProcessServerSettings extends dev.docuware.com.settings.system.WCFServerSettings {
        SMTPConnection: string;
    }

    export class AuthenticationServerSettings extends dev.docuware.com.settings.system.ServerSettings {
        DatabaseConnection: string;
    }

    export class DatabaseConnectionQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {
        Usage: dev.docuware.com.settings.system.DatabaseConnectionUsage;
    }

    const enum DatabaseConnectionUsage {
        IndexEntries = 1,
        Logging = 2,
        AUTOINDEX = 4,
        SelectLists = 8,
        WebBaskets = 16,
        Thumbnails = 32,
        Notifications = 64,
    }

    export class DatabaseConnectionHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Usage: dev.docuware.com.settings.system.DatabaseConnectionUsage;
    }

    export class DatabaseConnection extends dev.docuware.com.settings.interop.SettingWithDatabaseConnectionHeader {
        DBType: dev.docuware.com.settings.system.DatabaseConnectionTypes;
        Database: string;
        Password: string;
        Port: number;
        Server: string;
        TrustedLogin: boolean;
        User: string;
    }

    const enum DatabaseConnectionTypes {
        MySQL = 1,
        MSSQL = 2,
        ORACLE = 4,
        ODBC = 5,
    }

    export class StorageLocationQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {
        Usage: dev.docuware.com.settings.system.StorageLocationUsage;
    }

    const enum StorageLocationUsage {
        FileCabinets = 1,
        Logging = 2,
        REQUESTContainer = 4,
        WebBaskets = 8,
        FileConnections = 16,
        WorkflowManager = 32,
    }

    export class StorageLocationHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Usage: dev.docuware.com.settings.system.StorageLocationUsage;
    }

    export class StorageLocation extends dev.docuware.com.settings.interop.SettingWithStorageLocationHeader {
        CompressionLevelType: dev.docuware.com.settings.system.CompressionLevelType;
        LocationType: dev.docuware.com.settings.system.StorageLocationType;
        StoragePath: string;
    }

    const enum CompressionLevelType {
        None = 0,
        Low = 1,
        Medium = 2,
        High = 3,
    }

    const enum StorageLocationType {
        FileSystem = 1,
        Other = 2,
    }

    export class SMTPConnectionQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class SMTPConnectionHeader extends dev.docuware.com.settings.interop.SettingsHeader {

    }

    export class SMTPConnection extends dev.docuware.com.settings.interop.SettingWithSMTPConnectionHeader {
        Password: string;
        Port: number;
        SecurityProtocol: dev.docuware.com.settings.SecurityProtocol;
        Sender: string;
        SenderEmail: string;
        Server: string;
        UseAuthentication: boolean;
        User: string;
    }

    export class SolrConnectionQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {

    }

    export class SolrConnectionHeader extends dev.docuware.com.settings.interop.SettingsHeader {

    }

    export class SolrConnection extends dev.docuware.com.settings.interop.SettingWithSolrConnectionHeader {
        IndexFilesPath: string;
        TomcatURL: string;
    }

    export class IntellixConnectionQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {
        EnabledOnly: boolean;
    }

    export class IntellixConnectionHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Enabled: boolean;
        ServiceUri: string;
    }

    export class IntellixConnection extends dev.docuware.com.settings.interop.SettingWithIntellixConnectionHeader {
        ModelspaceName: string;
        Password: string;
        User: string;
    }

    export class IntellixInstallationsOptions {
        AssignedOrganization: string;
        IntellixConnectionGuid: string;
        IntellixConnectionName: string;
        LicenseFileContent: string;
    }

    export class ExternalApplicationQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        ApplicationId: string;
    }

    export class ExternalApplicationHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        ApplicationId: string;
    }

    export class ExternalApplication extends dev.docuware.com.settings.interop.SettingWithExternalApplicationHeader {
        Content: string;
    }
}

declare module dev.docuware.com.settings.usermanagement {

    export class LockSettings {
        IsLocked: boolean;
        LockedUntil: Date;
    }

    export class UserQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {
        Active: boolean;
        OnlyHighSecurityUsers: boolean;
        SortColumn: dev.docuware.com.settings.interop.SortColumn;
        OrderDirection: dev.docuware.com.settings.interop.OrderDirection;
        FilterOptions: dev.docuware.com.settings.usermanagement.UserFilterOptions;
        StartFrom: number;
        Take: number;
    }

    export class UserFilterOptions {
        UserOrEmailText: string;
        FilterOperation: dev.docuware.com.settings.usermanagement.UserFilterOperation;
    }

    const enum UserFilterOperation {
        Contains = 0,
        Equals = 1,
    }

    export class UserHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        DBName: string;
        EMail: string;
        FirstName: string;
        LastName: string;
        OutOfOfficeStatus: dev.docuware.com.settings.usermanagement.OutOfOffice;
        Title: string;
        LockSettings: dev.docuware.com.settings.usermanagement.LockSettings;
    }

    export class OutOfOffice {
        EndDateTime: Date;
        EndDateTimeSpecified: boolean;
        IsOutOfOffice: boolean;
        StartDateTime: Date;
    }

    export class DWUser {
        DefaultWebBasket: string;
        Header: dev.docuware.com.settings.usermanagement.UserHeader;
        NetworkID: string;
        Password: string;
        SecurityLevel: dev.docuware.com.settings.usermanagement.UserSecurityLevel;
        UserRegion: dev.docuware.com.settings.usermanagement.RegionalSettings;
        PasswordNeverExpires: boolean;
    }

    const enum UserSecurityLevel {
        Normal = 0,
        High = 1,
    }

    export class RegionalSettings {
        Calendar: string;
        Culture: string;
        Language: string;
    }

    export class TrustedUserQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Active: boolean;
    }

    export class TrustedUserHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
    }

    export class TrustedUser extends dev.docuware.com.settings.interop.SettingWithTrustedUserHeader {
        FileCabinets: Array<string>;
    }

    export class RoleQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {
        Active: boolean;
        QueryUsage: dev.docuware.com.settings.interop.QueryUsage;
        Type: dev.docuware.com.settings.usermanagement.RoleTypes;
    }

    const enum RoleTypes {
        StandardRole = 1,
        OrganizationAdministrator = 3,
        DefaultOrganizationRole = 4,
    }

    export class RoleHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        RoleType: dev.docuware.com.settings.usermanagement.RoleTypes;
    }

    export class Role extends dev.docuware.com.settings.interop.SettingWithRoleHeader {

    }

    export class GeneralProfileQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Types: dev.docuware.com.settings.usermanagement.GeneralProfileTypes;
    }

    const enum GeneralProfileTypes {
        DefaultOrganization = 1,
        Standard = 2,
    }

    export class GeneralProfileHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Type: dev.docuware.com.settings.usermanagement.GeneralProfileTypes;
    }

    export class GeneralProfile extends dev.docuware.com.settings.interop.SettingWithGeneralProfileHeader {
        Rights: Array<dev.docuware.com.settings.interop.DWFunctionalRights>;
    }

    export class GroupQuery extends dev.docuware.com.settings.interop.RelationSettingsQuery {
        Active: boolean;
        Types: dev.docuware.com.settings.usermanagement.GroupTypes;
    }

    const enum GroupTypes {
        Standard = 1,
        Public = 2,
    }

    export class GroupHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        Type: dev.docuware.com.settings.usermanagement.GroupTypes;
    }

    export class Group extends dev.docuware.com.settings.interop.SettingWithGroupHeader {

    }
}

declare module dev.docuware.com.settings.waf {
    export class WAFSettingsType {
        PluginSettings: dev.docuware.com.settings.waf.PluginSettingsType;
    }

    export class PluginSettingsType {
        PluginCategories: Array<dev.docuware.com.settings.waf.PluginCategoryType>;
        PluginInfos: Array<dev.docuware.com.settings.waf.PluginInfoType>;
    }

    export class PluginCategoryType {
        Description: string;
        DescriptionTID: string;
        Header: string;
        HeaderTID: string;
        PluginLinks: Array<dev.docuware.com.settings.waf.PluginLinkType>;
        ShowWhenEmpty: boolean;
        Hidden: boolean;
    }

    export class PluginLinkType {
        IconCSS: string;
        LinkDescription: string;
        LinkDescriptionTID: string;
        LinkID: string;
        LinkTitle: string;
        LinkTitleTID: string;
        NeedsLogin: boolean;
        PluginID: string;
        RequiredLicenses: Array<dev.docuware.com.settings.waf.LicenseType>;
        RequiredRights: dev.docuware.com.settings.waf.RequiredRightsType;
        StartupParameters: Array<dev.docuware.com.settings.waf.ParameterType>;
    }

    export class LicenseType {
        DWProductType: dev.docuware.com.settings.interop.DWProductTypes;
    }

    export class RequiredRightsType {
        FileCabinetRights: Array<dev.docuware.com.settings.waf.FCRightsType>;
        FunctionalRights: Array<dev.docuware.com.settings.waf.FunctionalRightType>;
    }

    export class FCRightsType {
        FCGuid: string;
        FileCabinetRight: Array<dev.docuware.com.settings.waf.FileCabinetRightType>;
    }

    export class FileCabinetRightType {
        Name: dev.docuware.com.settings.interop.DWFileCabinetRights;
    }

    export class FunctionalRightType {
        Name: dev.docuware.com.settings.interop.DWFunctionalRights;
        NotExclusive: boolean;
        NotExclusiveSpecified: boolean;
    }

    export class ParameterType {
        Key: string;
        Value: string;
    }

    export class PluginInfoType {
        Description: string;
        DescriptionTID: string;
        FilePath: string;
        IconCSS: string;
        Name: string;
        NameTID: string;
        PluginID: string;
        RequiredLicenses: Array<dev.docuware.com.settings.waf.LicenseType>;
        RequiredRights: dev.docuware.com.settings.waf.RequiredRightsType;
        StartupParameters: Array<dev.docuware.com.settings.waf.ParameterType>;
    }
}

declare module dev.docuware.com.settings.web {

    export class WebInstance extends dev.docuware.com.settings.interop.SettingWithWebInstanceHeader {
        Site: string;
        VirtualDirectory: string;
    }

    export class WebInstanceHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        HttpAddress: string;
        Organization: string;
        Type: dev.docuware.com.settings.web.WebInstanceType;
    }

    const enum WebInstanceType {
        SharePointWebServices = 5,
    }

    export class WebAssignedDialog extends dev.docuware.com.settings.filecabinet.AssignedDialog {
        FileCabinetGuid: string;
        FileCabinetName: string;
    }

    export class SharePointWebInstance extends dev.docuware.com.settings.web.WebInstance {

    }

    export class FTPConnection {
        Directory: string;
        Password: string;
        Server: string;
        User: string;
    }

    export class WebInstanceQuery extends dev.docuware.com.settings.interop.SettingsQuery {
        Type: dev.docuware.com.settings.web.WebInstanceType;
    }

    export class WebConnectionQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class WebConnectionHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        InternalModuleURLs: System.Collections.Generic.Dictionary<dev.docuware.com.settings.web.WebConnectionModules, string>;
        ModuleURLs: System.Collections.Generic.Dictionary<dev.docuware.com.settings.web.WebConnectionModules, string>;
    }

    const enum WebConnectionModules {
        WebClientSettings = 1,
        SettingsService = 2,
        Platform = 4,
        WebClient = 16,
    }

    export class WebConnection extends dev.docuware.com.settings.interop.SettingWithWebConnectionHeader {
        Machine: string;
    }

    export class UserApplicationPreferences extends dev.docuware.com.settings.interop.SettingsHeader {
        Preferences: string;
        UserId: number;
    }

    export class WebBasketLocationQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }

    export class WebBasketLocation extends dev.docuware.com.settings.interop.DWSetting {
        DatabaseConnectionID: string;
        Guid: string;
        ID: number;
        IDSpecified: boolean;
        LegacyTables: Array<dev.docuware.com.settings.cabinet.LegacyTable>;
        MaxTextshotsPerSection: number;
        Name: string;
        StorageLocationID: string;
    }

    export class WebBasketQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {
        BasketLocation: string;
    }

    export class WebBasket extends dev.docuware.com.settings.interop.DWSetting {
        AssignedFileCabinetGuid: string;
        BasketLocation: string;
        ColorAsString: string;
        Description: string;
        DiskNumber: number;
        Guid: string;
        ID: number;
        IDSpecified: boolean;
        IntellixStoreDialogId: string;
        Name: string;
        OCRTemplate: string;
        Quota: number;
        RefreshTimeAsLong: number;
        Tables: Array<dev.docuware.com.settings.cabinet.Table>;
        Version: string;
        IntellixLanguage: any;
        IntellixMappings: any;
    }

    export class WebBasketInfo {
        DocumentsStored: number;
        FreeSpace: number;
        Guid: string;
        LocationGuid: string;
        LocationName: string;
        Name: string;
        UsedSpace: number;
    }
}

declare module dev.docuware.com.settings.workflow.processconfig {
    export class PrinterConfigurationQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {
        Active: boolean;
        IndexingFromMetadata: string;
        IndexingFromMetadataTypes: Array<string>;
        SourceType: dev.docuware.com.settings.interop.DocumentSourceType;
        SourceTypes: Array<dev.docuware.com.settings.interop.DocumentSourceType>;
        Timestamp: Date;
    }

    export class PluginIndexActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        PluginName: string;
    }

    export class ExternalIndexActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {

    }

    export class ImproveActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        Deskew: boolean;
        Rotate: boolean;
    }

    export class ConvertActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        RecreatePdf: boolean;
        TargetType: dev.docuware.com.settings.workflow.processconfig.DocConversionTargetType;
    }

    const enum DocConversionTargetType {
        None = 0,
        Pdf = 1,
        PdfA = 2,
    }

    export class ImportActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        AllowLocalOverwrite: boolean;
        Connector: dev.docuware.com.settings.workflow.processconfig.ImportConnector;
        Filter: dev.docuware.com.settings.workflow.processconfig.ImportFilter;
        Location: dev.docuware.com.settings.workflow.processconfig.ImportLocation;
        Metadata: dev.docuware.com.settings.workflow.processconfig.ImportMetadata;
        Schedule: dev.docuware.com.settings.workflow.processconfig.ImportSchedule;
    }

    export class ImportConnector {
        ConnectorType: dev.docuware.com.settings.workflow.processconfig.ImportConnectorType;
    }

    const enum ImportConnectorType {
        None = 0,
        DocuWare = 1,
        eCopy = 2,
        Ricoh = 3,
        HP = 4,
        Kyocera = 5,
        Toshiba = 6,
        PlanetPress = 7,
        Custom = 8,
    }

    export class ImportFilter {
        BlackList: dev.docuware.com.settings.workflow.processconfig.FileTypes;
        WhiteList: dev.docuware.com.settings.workflow.processconfig.FileTypes;
    }

    export class FileTypes {
        DocTypes: Array<string>;
        FileExtensions: Array<string>;
    }

    export class ImportLocation {
        PathExpression: string;
        Type: dev.docuware.com.settings.workflow.processconfig.LocationType;
    }

    const enum LocationType {
        Directory = 0,
        SubDirectories = 1,
        DirectoryAndSubDirectories = 2,
        None = 3,
    }

    export class ImportMetadata {
        Filter: dev.docuware.com.settings.workflow.processconfig.ImportFilter;
        IsEnabled: boolean;
        MatchType: dev.docuware.com.settings.workflow.processconfig.MetadataFileMatchType;
    }

    const enum MetadataFileMatchType {
        None = 0,
        FileNamesAreEqual = 1,
        FilesResideInSameDirectory = 2,
        MetadataDefinesDocumentFile = 3,
    }

    export class ImportSchedule {
        InspectionInterval: dev.docuware.com.settings.common.Duration;
        MinFileAge: dev.docuware.com.settings.common.Duration;
    }

    export class PrinterProcessConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        ErrorStoreTarget: dev.docuware.com.settings.workflow.processconfig.PrinterProcessConfigErrorStoreTarget;
        PrintWithoutOverlay: boolean;
        PrintWithoutOverlaySpecified: boolean;
    }

    export class PrinterProcessConfigErrorStoreTarget extends dev.docuware.com.settings.workflow.processconfig.StoreTarget {
        Item: dev.docuware.com.settings.workflow.processconfig.RecognitionTargetBase;
    }

    export class StoreTarget {

    }

    export class RecognitionTargetBase extends dev.docuware.com.settings.workflow.processconfig.StoreTarget {
        DialogGuid: string;
        DialogName: string;
        DialogType: dev.docuware.com.settings.workflow.processconfig.DWDialogTypes;
        FileCabinetGuid: string;
        FileCabinetName: string;
    }

    const enum DWDialogTypes {
        Search = 0,
        Store = 1,
        ResultList = 2,
        ResultTree = 3,
        InfoDialog = 4,
    }

    export class BasketTarget extends dev.docuware.com.settings.workflow.processconfig.RecognitionTargetBase {
        BasketGuid: string;
        BasketName: string;
    }

    export class FileCabinetTarget extends dev.docuware.com.settings.workflow.processconfig.RecognitionTargetBase {
        StoreAutomatically: boolean;
        StoreAutomaticallySpecified: boolean;
    }

    export class RecognitionTarget extends dev.docuware.com.settings.workflow.processconfig.RecognitionTargetBase {
        Fields: Array<dev.docuware.com.settings.workflow.processconfig.RecognitionField>;
    }

    export class RecognitionField extends dev.docuware.com.settings.common.DWDialogField {
        DigitsAfterDecimal: number;
        FCFixedEntryType: string;
        ValueTargets: Array<dev.docuware.com.settings.workflow.processconfig.Connection>;
    }

    export class Connection {
        Output: dev.docuware.com.settings.workflow.processconfig.ConnectionOutput;
        Source: dev.docuware.com.settings.workflow.processconfig.ConnectionSource;
    }

    export class ConnectionOutput {
        Item: any;
    }

    export class ConnectionSource {
        Prefix: string;
    }

    export class DWSystemVariable extends dev.docuware.com.settings.workflow.processconfig.ConnectionSource {
        Name: dev.docuware.com.settings.interop.DWSystemVariableName;
    }

    export class FixedValue extends dev.docuware.com.settings.workflow.processconfig.ConnectionSource {

    }

    export class DateValue extends dev.docuware.com.settings.workflow.processconfig.FixedValue {
        Value: Date;
    }

    export class DecimalValue extends dev.docuware.com.settings.workflow.processconfig.FixedValue {
        Value: number;
    }

    export class NumericValue extends dev.docuware.com.settings.workflow.processconfig.FixedValue {
        Value: number;
    }

    export class StringValue extends dev.docuware.com.settings.workflow.processconfig.FixedValue {
        Value: string;
    }

    export class ZoneSource extends dev.docuware.com.settings.workflow.processconfig.ConnectionSource {
        DateTimeFormat: dev.docuware.com.settings.common.DateFormatString;
        NumberFormatDescription: dev.docuware.com.settings.workflow.processconfig.SimpleNumberFormatDescription;
        RemoveSubstrings: Array<dev.docuware.com.settings.common.RemoveSubstringDef>;
        StringMappings: dev.docuware.com.settings.workflow.processconfig.StringMappings;
        SubstringDefinition: dev.docuware.com.settings.common.SubstringDef;
        TimeBeforeDate: boolean;
        TimeFormat: string;
        TimeSeparator: string;
        ZoneDefGuid: string;
    }

    export class SimpleNumberFormatDescription {
        Culture: string;
        DecimalSeparator: string;
        GroupSeparator: SimpleNumberFormatDescriptionGroupSeparator;
        NegativeSign: string;
    }

    export class SimpleNumberFormatDescriptionGroupSeparator {
        public Value: string;
    }

    export class StringMappings {
        Default: string;
        FaultMessage: string;
        MappingBehavior: dev.docuware.com.settings.workflow.processconfig.MappingBehavior;
        MatchCase: boolean;
        StringMapping: Array<dev.docuware.com.settings.workflow.processconfig.StringMapping>;
    }

    const enum MappingBehavior {
        Disabled = 0,
        TakeDefault = 1,
        Fail = 2,
        TakeKey = 3,
    }

    export class StringMapping {
        Key: string;
        Value: string;
    }

    export class MetaZoneSource extends dev.docuware.com.settings.workflow.processconfig.ZoneSource {
        XPathTmpCopy: string;
    }

    export class MetaNumericZoneSource extends dev.docuware.com.settings.workflow.processconfig.MetaZoneSource {

    }

    export class MetaDateZoneSource extends dev.docuware.com.settings.workflow.processconfig.MetaZoneSource {

    }

    export class MetaTextZoneSource extends dev.docuware.com.settings.workflow.processconfig.MetaZoneSource {

    }

    export class ColumnZoneSource extends dev.docuware.com.settings.workflow.processconfig.ZoneSource {
        ColumnDefGuid: string;
        TableDefGuid: string;
    }

    export class BarcodeZoneSource extends dev.docuware.com.settings.workflow.processconfig.ZoneSource {
        ItemSelector: dev.docuware.com.settings.common.SeparatedListItem;
    }

    export class ListZoneSource extends dev.docuware.com.settings.workflow.processconfig.ZoneSource {
        ItemSeparator: string;
        ListSelector: dev.docuware.com.settings.workflow.processconfig.ListSelector;
    }

    export class ListSelector {
        ExcludeDuplicateEntries: boolean;
        ListSelectionMode: dev.docuware.com.settings.workflow.processconfig.ListSelectionMode;
    }

    const enum ListSelectionMode {
        SelectAllEntries = 0,
        UserSelection = 1,
    }

    export class ItemZoneSource extends dev.docuware.com.settings.workflow.processconfig.ZoneSource {

    }

    export class NotifyUserActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        NotifyOnFailure: boolean;
        NotifyOnFailureSpecified: boolean;
        NotifyOnSuccess: boolean;
        NotifyOnSuccessSpecified: boolean;
    }

    export class DoSubProcessActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        HostType: dev.docuware.com.settings.workflow.processdef.ProcessHostType;
        ProcessDefId: string;
    }

    export class StartIntellixActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        IntellixServiceUri: string;
        ModelSpaceId: string;
        Password: string;
        Username: string;
    }

    export class SignActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        Certificate: dev.docuware.com.settings.workflow.processconfig.CertificateConfig;
    }

    export class CertificateConfig {
        Binary: Array<number>;
        SKI: string;
        Subject: dev.docuware.com.settings.workflow.processconfig.CertificateSubject;
    }

    export class CertificateSubject {
        CN: string;
        O: string;
        OU: string;
    }

    export class SeparateActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        ProcessDefForFirstDocument: dev.docuware.com.settings.workflow.processdef.ProcessDefReference;
        SeparationRules: Array<dev.docuware.com.settings.workflow.processconfig.SeparationRule>;
    }

    export class SeparationRule {
        DeletePage: boolean;
        DeletePageSpecified: boolean;
        ProcessDefForTailingDocument: dev.docuware.com.settings.workflow.processdef.ProcessDefReference;
        Rule: dev.docuware.com.settings.workflow.rules.Rule;
        SamplePageIndex: number;
        SeparateBefore: boolean;
    }

    export class RecognizeActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        Body: dev.docuware.com.settings.workflow.processconfig.RecognitionBody;
        Enabled: boolean;
        EnabledSpecified: boolean;
        Header: dev.docuware.com.settings.workflow.processconfig.RecognitionHeader;
    }

    export class RecognitionBody {
        AnchorDefs: Array<dev.docuware.com.settings.workflow.processconfig.AnchorDef>;
        FaceLayouts: Array<dev.docuware.com.settings.workflow.processconfig.FaceLayout>;
        FaceSamples: Array<dev.docuware.com.settings.workflow.processconfig.FaceSample>;
        SampleDocument: dev.docuware.com.settings.common.EmbeddedFile;
        TableDefs: Array<dev.docuware.com.settings.workflow.processconfig.TableDef>;
        ZoneDefs: Array<dev.docuware.com.settings.workflow.processconfig.ZoneDef>;
    }

    export class AnchorDef extends dev.docuware.com.settings.workflow.processconfig.ElementDef {
        OCRSettingsGuid: string;
        OriginalAnchorDefGuid: string;
        RecognitionTechnology: dev.docuware.com.settings.workflow.processconfig.RecognitionTechnology;
        SearchStrategy: dev.docuware.com.settings.workflow.processconfig.ElementSearchStrategy;
        SearchString: string;
    }

    export class ElementDef {
        Description: string;
        Guid: string;
        Name: string;
    }

    export class ZoneDef extends dev.docuware.com.settings.workflow.processconfig.ElementDef {
        OCRSettingsGuid: string;
        RecognitionTechnology: dev.docuware.com.settings.workflow.processconfig.RecognitionTechnology;
        SearchStrategy: dev.docuware.com.settings.workflow.processconfig.SearchOnPage;
        StretchToPageSize: boolean;
    }

    const enum RecognitionTechnology {
        OCR = 0,
        Native = 1,
        OCRandBarcode = 2,
        BarcodeWithoutOCR = 3,
        Disabled = 4,
    }

    export class SearchOnPage extends dev.docuware.com.settings.workflow.processconfig.SearchInDocument {
        PageNumber: number;
    }

    export class SearchInDocument extends dev.docuware.com.settings.workflow.processconfig.ElementSearchStrategy {
        Direction: dev.docuware.com.settings.workflow.processconfig.ElementSearchDirection;
    }

    export class ElementSearchStrategy {
        OccurrenceIndex: number;
        OccurrenceIndexSpecified: boolean;
    }

    export class ElementSearchDirection {
        PageOrder: dev.docuware.com.settings.workflow.processconfig.PageOrderType;
        ReadingDirection: dev.docuware.com.settings.workflow.processconfig.ReadingDirectionType;
    }

    const enum PageOrderType {
        FirstToLast = 0,
        LastToFirst = 1,
    }

    const enum ReadingDirectionType {
        Forward = 0,
        Backward = 1,
    }

    export class SourceZoneDef extends dev.docuware.com.settings.workflow.processconfig.ZoneDef {
        AnchorDefGuid: string;
        AnchorType: dev.docuware.com.settings.workflow.processconfig.AnchorType;
    }

    const enum AnchorType {
        TopLeft = 0,
        TopRight = 1,
        BottomLeft = 2,
        BottomRight = 3,
        Custom = 4,
    }

    export class MetaElementDef extends dev.docuware.com.settings.workflow.processconfig.SourceZoneDef {

    }

    export class MetaZoneDef extends dev.docuware.com.settings.workflow.processconfig.MetaElementDef {
        Categories: string;
        XPath: string;
    }

    export class MetaGroupDef extends dev.docuware.com.settings.workflow.processconfig.MetaElementDef {
        Items: Array<dev.docuware.com.settings.workflow.processconfig.MetaElementDef>;
    }

    export class TableZoneDef extends dev.docuware.com.settings.workflow.processconfig.SourceZoneDef {
        ColumnZoneDefs: Array<dev.docuware.com.settings.workflow.processconfig.ColumnZoneDef>;
        EndAnchorDefGuid: string;
        EndAnchorType: dev.docuware.com.settings.workflow.processconfig.AnchorType;
        TableDefGuid: string;
    }

    export class ColumnZoneDef extends dev.docuware.com.settings.workflow.processconfig.SourceZoneDef {
        ColumnDefGuid: string;
    }

    export class BarcodeZoneDef extends dev.docuware.com.settings.workflow.processconfig.SourceZoneDef {
        BarcodeSelectionRule: dev.docuware.com.settings.workflow.rules.TextRule;
        BarcodeType: string;
        DefaultZoneSource: dev.docuware.com.settings.workflow.processconfig.BarcodeZoneSource;
    }

    export class ListZoneDef extends dev.docuware.com.settings.workflow.processconfig.SourceZoneDef {
        DefaultZoneSource: dev.docuware.com.settings.workflow.processconfig.ListZoneSource;
    }

    export class ItemZoneDef extends dev.docuware.com.settings.workflow.processconfig.SourceZoneDef {
        DefaultZoneSource: dev.docuware.com.settings.workflow.processconfig.ItemZoneSource;
    }

    export class FaceLayout {
        Anchors: Array<dev.docuware.com.settings.workflow.processconfig.Anchor>;
        FaceSampleGuid: string;
        IsVirtual: boolean;
        Metadata: dev.docuware.com.settings.workflow.processconfig.XmlMetadata;
        Name: string;
        Zones: Array<dev.docuware.com.settings.workflow.processconfig.Zone>;
    }

    export class Anchor extends dev.docuware.com.settings.workflow.processconfig.Element {
        Text: string;
    }

    export class Element {
        BoundingBox: dev.docuware.com.settings.common.MeasuredRectangle;
        DefGuid: string;
    }

    export class Zone extends dev.docuware.com.settings.workflow.processconfig.Element {
        RecognitionEvaluation: dev.docuware.com.settings.workflow.processconfig.RecognitionEvaluation;
        RecognitionEvaluationSpecified: boolean;
        Text: string;
    }

    const enum RecognitionEvaluation {
        Unknown = 0,
        Correct = 1,
        Wrong = 2,
    }

    export class ColumnZone extends dev.docuware.com.settings.workflow.processconfig.Zone {

    }

    export class CompositeZone extends dev.docuware.com.settings.workflow.processconfig.Zone {
        ChildZones: Array<dev.docuware.com.settings.workflow.processconfig.Zone>;
    }

    export class TableZone extends dev.docuware.com.settings.workflow.processconfig.CompositeZone {
        Bottom: dev.docuware.com.settings.common.Distance;
        Right: dev.docuware.com.settings.common.Distance;
        SegmentGuid: string;
    }

    export class BarcodeZone extends dev.docuware.com.settings.workflow.processconfig.Zone {
        Barcodes: Array<dev.docuware.com.settings.workflow.processconfig.Barcode>;
    }

    export class Barcode {
        Type: string;
        Value: string;
    }

    export class ListZone extends dev.docuware.com.settings.workflow.processconfig.Zone {

    }

    export class ItemZone extends dev.docuware.com.settings.workflow.processconfig.Zone {

    }

    export class MetaElement extends dev.docuware.com.settings.workflow.processconfig.Zone {

    }

    export class MetaZone extends dev.docuware.com.settings.workflow.processconfig.MetaElement {

    }

    export class MetaNumericZone extends dev.docuware.com.settings.workflow.processconfig.MetaZone {
        Number: number;
        NumberSpecified: boolean;
    }

    export class MetaDateZone extends dev.docuware.com.settings.workflow.processconfig.MetaZone {
        Date: Date;
        DateSpecified: boolean;
    }

    export class MetaTextZone extends dev.docuware.com.settings.workflow.processconfig.MetaZone {

    }

    export class MetaGroup extends dev.docuware.com.settings.workflow.processconfig.MetaElement {
        Items: Array<dev.docuware.com.settings.workflow.processconfig.MetaElement>;
    }

    export class XmlMetadata {
        Categories: Array<string>;
        ContainerHandle: string;
        DocumentTypeDescription: string;
        DocumentTypeId: string;
        Items: Array<dev.docuware.com.settings.workflow.processconfig.Item>;
        Namespaces: Array<string>;
        XmlDocument: string;
    }

    export class Item {
        EditorOptions: string;
    }

    export class ItemGroup extends dev.docuware.com.settings.workflow.processconfig.Item {
        GroupType: dev.docuware.com.settings.workflow.processconfig.ItemGroupType;
        Items: Array<dev.docuware.com.settings.workflow.processconfig.Item>;
        Name: string;
    }

    const enum ItemGroupType {
        Element = 0,
        TableColumns = 1,
        TableRows = 2,
    }

    export class XmlItemGroup extends dev.docuware.com.settings.workflow.processconfig.ItemGroup {
        VariableId: string;
        XPath: string;
        MinOccur: string;
        MaxOccur: string;
    }

    export class XmlItem extends dev.docuware.com.settings.workflow.processconfig.Item {
        Categories: string;
        ConnectionTarget: Array<dev.docuware.com.settings.workflow.processconfig.Connection>;
        Description: string;
        VariableId: string;
        XPath: string;
        MinOccur: string;
        MaxOccur: string;
    }

    export class XmlNumericItem extends dev.docuware.com.settings.workflow.processconfig.XmlItem {
        Content: number;
        ContentSpecified: boolean;
    }

    export class XmlDateItem extends dev.docuware.com.settings.workflow.processconfig.XmlItem {
        Content: Date;
        ContentSpecified: boolean;
    }

    export class XmlTextItem extends dev.docuware.com.settings.workflow.processconfig.XmlItem {
        Content: string;
    }

    export class FaceSample {
        Guid: string;
        HorizontalResolutionDpi: number;
        Image: dev.docuware.com.settings.common.MeasuredImageBase;
        RecordingDate: Date;
        RecordingDateSpecified: boolean;
        Textshot: dev.docuware.com.settings.workflow.processconfig.Textshot;
        VerticalResolutionDpi: number;
    }

    export class Textshot {
        StringBoxes: Array<dev.docuware.com.settings.workflow.processconfig.StringBox>;
    }

    export class StringBox {
        BoundingBox: dev.docuware.com.settings.common.MeasuredRectangle;
        CharacterWidths: string;
        Text: string;
    }

    export class TableDef {
        Columns: Array<dev.docuware.com.settings.workflow.processconfig.ColumnDef>;
        Guid: string;
        Name: string;
        SegmentTableZones: Array<string>;
    }

    export class ColumnDef {
        Guid: string;
        LayoutType: dev.docuware.com.settings.workflow.processconfig.ColumnCellLayoutType;
        Name: string;
        NeverEmpty: boolean;
        Width: dev.docuware.com.settings.common.Distance;
    }

    const enum ColumnCellLayoutType {
        Undefined = 0,
        MultiRow = 1,
        SingleRowTop = 2,
        SingleRowBottom = 3,
    }

    export class RecognitionHeader {
        DefaultExtractionEngine: dev.docuware.com.settings.workflow.processconfig.ExtractionEngine;
        DefaultOCRSettingsGuid: string;
        DefaultRecognitionTechnology: dev.docuware.com.settings.workflow.processconfig.RecognitionTechnology;
        RecognitionAsNeededOnly: boolean;
        Target: dev.docuware.com.settings.workflow.processconfig.RecognitionTarget;
        XmlTarget: dev.docuware.com.settings.workflow.processconfig.RecognitionXmlTarget;
    }

    const enum ExtractionEngine {
        TextgrabSDK = 0,
        ScreenScraperSDK = 1,
    }

    export class RecognitionXmlTarget {
        Metadata: dev.docuware.com.settings.workflow.processconfig.XmlMetadata;
    }

    export class PrintActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        DeviceSettingsBlob: Array<number>;
        PrintAdditionalFiles: Array<dev.docuware.com.settings.workflow.processconfig.PrintFile>;
        PrinterConnection: dev.docuware.com.settings.workflow.processconfig.PrinterConnection;
    }

    export class PrintFile {
        Data: Array<number>;
        Enabled: boolean;
        FileName: string;
    }

    export class PrinterConnection {
        PrinterName: string;
    }

    export class StoreActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        Target: dev.docuware.com.settings.workflow.processconfig.StoreActConfigTarget;
    }

    export class StoreActConfigTarget extends dev.docuware.com.settings.workflow.processconfig.StoreTarget {
        Item: dev.docuware.com.settings.workflow.processconfig.RecognitionTargetBase;
    }

    export class IndexAndStoreActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        IndexActConfig: dev.docuware.com.settings.workflow.processconfig.IndexActConfig;
        StoreActConfig: dev.docuware.com.settings.workflow.processconfig.StoreActConfig;
    }

    export class IndexActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        Assignments: Array<dev.docuware.com.settings.workflow.processconfig.IndexAssignment>;
        Target: dev.docuware.com.settings.workflow.processconfig.RecognitionTargetBase;
    }

    export class IndexAssignment {
        ErrorWhenNull: boolean;
        FieldType: dev.docuware.com.settings.interop.DWFieldType;
        TargetFieldName: string;
        ValueBin: dev.docuware.com.settings.common.ValueBin;
    }

    export class EvaluateRuleActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        Rule: dev.docuware.com.settings.workflow.rules.Rule;
    }

    export class SelectProcessActConfig extends dev.docuware.com.settings.workflow.processconfig.EvaluateRuleActConfig {
        SelectedProcess: dev.docuware.com.settings.workflow.processdef.ProcessDefReference;
    }

    export class EmailActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        AttachmentName: string;
        Bccs: Array<string>;
        Body: string;
        Ccs: Array<string>;
        EmailServer: dev.docuware.com.settings.workflow.processconfig.ServerConnection;
        Enabled: boolean;
        EnabledSpecified: boolean;
        Subject: string;
        Tos: Array<string>;
    }

    export class ServerConnection {
        ServerName: string;
    }

    export class AddOverlayActConfig extends dev.docuware.com.settings.workflow.processdef.ProcessConfig {
        Overlays: Array<dev.docuware.com.settings.workflow.processconfig.Overlay>;
        UseTransparency: boolean;
    }

    export class Overlay {
        BoundingBox: dev.docuware.com.settings.common.MeasuredRectangle;
        File: dev.docuware.com.settings.common.EmbeddedFile;
        Image: dev.docuware.com.settings.common.MeasuredImageBase;
        Print: boolean;
        TargetPageNumber: number;
        TargetPageNumberSpecified: boolean;
        TargetPages: dev.docuware.com.settings.workflow.processconfig.TargetPages;
    }

    const enum TargetPages {
        PageWithNumber = 0,
        FirstPage = 1,
        AllPages = 2,
        AllPagesExceptFirst = 3,
        EvenPages = 4,
        OddPages = 5,
        OddPagesExceptFirst = 6,
        LastPage = 7,
    }
}

declare module dev.docuware.com.settings.workflow.processdef {
    export class PrinterConfigurationHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Active: boolean;
        ConfiguratorVersion: string;
        ConfiguredActivities: Array<dev.docuware.com.settings.workflow.processdef.ConfiguredActivity>;
        DateCreated: Date;
        Description: string;
        IndexingFromMetadata: string;
        IsValid: boolean;
        RecognitionAsNeededOnly: boolean;
        SchemaVersion: string;
        SelectConfigurationAutomatically: boolean;
        SourceType: dev.docuware.com.settings.interop.DocumentSourceType;
        StoreTargetName: string;
        Thumbnail: dev.docuware.com.settings.common.DWImage;
        Timestamp: Date;
    }

    export class ConfiguredActivity {
        Configured: boolean;
        Type: dev.docuware.com.settings.workflow.processdef.ProcessType;
    }

    const enum ProcessType {
        AddOverlay = 0,
        DoSubProcess = 1,
        Email = 2,
        Index = 3,
        IndexAndStore = 4,
        NotifyUser = 5,
        Print = 6,
        Recognize = 7,
        Sign = 8,
        SelectProcess = 9,
        Separate = 10,
        StartIntellix = 11,
        Store = 12,
        EvaluateRule = 13,
        RecognizePrinterProcess = 14,
        SeparatePrinterProcess = 15,
        PrinterProcess = 16,
        Import = 17,
        Convert = 18,
        Improve = 19,
        ExternalIndex = 20,
        PluginIndex = 21,
        RecognizeMetadata = 22,
        RecognizeMetadata_GenerateZugferd = 23,
        Index_FromTextRecognition = 24,
        Index_FromBarcodeRecognition = 25,
        Index_FromFixedValues = 26,
        Index_FromSystemVariables = 27,
        Index_FromMetadata = 28,
        Unknown = 29,
        PrinterConfiguration = 30,
        SelectProcess_FromTextRecognition = 31,
        SelectProcess_FromBarcodeRecognition = 32,
        SelectProcess_FromSystemVariables = 33,
        Separate_FromTextRecognition = 34,
        Separate_FromBarcodeRecognition = 35,
        Separate_FromSystemVariables = 36,
        Recognize_Text = 37,
        Recognize_Barcodes = 38,
        RecognizeMetadata_Text = 39,
        RecognizeMetadata_Barcodes = 40,
        SelectProcess_FromFileName = 41,
        SelectProcess_FromDirectoryName = 42,
        SelectProcess_FromPrintingApplication = 43,
        SelectProcess_FromPrintJobTitle = 44,
        Import_UseMetadata = 45,
        SmartConnect = 46,
    }

    export class PrinterConfiguration {
        BusinessProcess: dev.docuware.com.settings.workflow.processdef.PrinterProcessDef;
        Header: dev.docuware.com.settings.workflow.processdef.PrinterConfigurationHeader;
        RecognizeProcess: dev.docuware.com.settings.workflow.processdef.RecognizePrinterProcessDef;
        SeparateProcess: dev.docuware.com.settings.workflow.processdef.SeparatePrinterProcessDef;
    }

    export class PrinterProcessDef extends dev.docuware.com.settings.workflow.processdef.PCProcessDef {
        Activities: Array<dev.docuware.com.settings.workflow.processdef.ActivityDef>;
    }

    export class PCProcessDef extends dev.docuware.com.settings.workflow.processdef.CompositeProcessDef {
        PCId: string;
        Timestamp: Date;
    }

    export class CompositeProcessDef extends dev.docuware.com.settings.workflow.processdef.ProcessDef {
        Configs: Array<dev.docuware.com.settings.workflow.processdef.ProcessConfig>;
    }

    export class ProcessDef {
        ConfigId: string;
        Enabled: boolean;
        Id: string;
        Type: string;
    }

    export class ActivityDef extends dev.docuware.com.settings.workflow.processdef.ProcessDef {
        Config: dev.docuware.com.settings.workflow.processdef.ProcessConfig;
    }

    export class ProcessConfig {
        Id: string;
    }

    const enum ProcessHostType {
        Server = 0,
        Client = 1,
        DecideAtRuntime = 2,
    }

    export class ProcessDefReference {
        Id: string;
        PCName: string;
        Type: string;
    }

    export class Sequence extends dev.docuware.com.settings.workflow.processdef.CompositeProcessDef {
        Childs: Array<dev.docuware.com.settings.workflow.processdef.ProcessDef>;
    }

    export class SeparatePrinterProcessDef extends dev.docuware.com.settings.workflow.processdef.PCProcessDef {
        RecognizeActivity: dev.docuware.com.settings.workflow.processdef.ActivityDef;
        SeparateActivity: dev.docuware.com.settings.workflow.processdef.ActivityDef;
    }

    export class RecognizePrinterProcessDef extends dev.docuware.com.settings.workflow.processdef.PCProcessDef {
        ImportActivity: dev.docuware.com.settings.workflow.processdef.ActivityDef;
        RecognizeActivity: dev.docuware.com.settings.workflow.processdef.ActivityDef;
        SelectProcessActivity: dev.docuware.com.settings.workflow.processdef.ActivityDef;
    }

    export class JobQuery extends dev.docuware.com.settings.interop.SettingsRightQuery {
        Configuration: string;
        Configurations: Array<string>;
        Timestamp: Date;
        TypeAsString: string;
    }
}

declare module dev.docuware.com.settings.workflow.rules {
    export class Rule {

    }

    export class AtomicRule extends dev.docuware.com.settings.workflow.rules.Rule {

    }

    export class DateRule extends dev.docuware.com.settings.workflow.rules.AtomicRule {
        Operand: dev.docuware.com.settings.workflow.rules.DateRuleOperands;
        Value: Date;
    }

    const enum DateRuleOperands {
        Equals = 0,
        Before = 1,
        After = 2,
    }

    export class DateSystemVariableRule extends dev.docuware.com.settings.workflow.rules.DateRule {
        Variable: dev.docuware.com.settings.common.DateSystemVariable;
    }

    export class DateVariableRule extends dev.docuware.com.settings.workflow.rules.DateRule {
        Variable: dev.docuware.com.settings.common.DateVariable;
    }

    export class NumericRule extends dev.docuware.com.settings.workflow.rules.AtomicRule {
        Operand: dev.docuware.com.settings.workflow.rules.NumericRuleOperands;
        Value: number;
    }

    const enum NumericRuleOperands {
        Equals = 0,
        GreaterThan = 1,
        LessThan = 2,
    }

    export class NumericSystemVariableRule extends dev.docuware.com.settings.workflow.rules.NumericRule {
        Variable: dev.docuware.com.settings.common.NumericSystemVariable;
    }

    export class NumericVariableRule extends dev.docuware.com.settings.workflow.rules.NumericRule {
        Variable: dev.docuware.com.settings.common.NumericVariable;
    }

    export class TextRule extends dev.docuware.com.settings.workflow.rules.AtomicRule {
        Operand: dev.docuware.com.settings.workflow.rules.TextRuleOperands;
        Value: string;
    }

    const enum TextRuleOperands {
        Equals = 0,
        Contains = 1,
        BeginsWith = 2,
        EndsWith = 3,
        NotEmpty = 4,
        IsEmpty = 5,
        IsDifferentFromPreviousPage = 6,
    }

    export class TextSystemVariableRule extends dev.docuware.com.settings.workflow.rules.TextRule {
        Variable: dev.docuware.com.settings.common.TextSystemVariable;
    }

    export class TextVariableRule extends dev.docuware.com.settings.workflow.rules.TextRule {
        Variable: dev.docuware.com.settings.common.TextVariable;
    }

    export class BarcodeTextVariableRule extends dev.docuware.com.settings.workflow.rules.TextVariableRule {
        BarcodeType: string;
    }

    export class RuleGroup extends dev.docuware.com.settings.workflow.rules.Rule {
        Childs: Array<dev.docuware.com.settings.workflow.rules.Rule>;
    }

    export class OrRuleGroup extends dev.docuware.com.settings.workflow.rules.RuleGroup {

    }

    export class AndRuleGroup extends dev.docuware.com.settings.workflow.rules.RuleGroup {

    }
}

declare module dev.docuware.com.settings.bpsprocesses.common {
    export class BPSProcessHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        Description: string;
    }

    export class BPSProcess {
        Header: BPSProcessHeader;
        FileCabinetGuid: string;
    }
}

declare module dev.docuware.com.settings.workflows.autoindex {
    export class AutoIndexQuery extends dev.docuware.com.settings.interop.SettingsQuery {
    }

    export class AutoIndex extends dev.docuware.com.settings.bpsprocesses.common.BPSProcess {
        AIMatchOptionSettings: dev.docuware.com.settings.workflows.autoindex.AIMatchOptions;
        ExtDBActions: dev.docuware.com.settings.workflows.autoindex.AIDSActionsType;
        ExtDBSource: dev.docuware.com.settings.workflows.autoindex.AIDataSourceType;
        ExternalDataSourceType: dev.docuware.com.settings.workflows.autoindex.ExternalDataSource;
        FCActions: dev.docuware.com.settings.workflows.autoindex.AIDSActionsType;
        FCSource: dev.docuware.com.settings.workflows.autoindex.AIDataSourceType;
        IteratedRecordsAreIn: dev.docuware.com.settings.workflows.autoindex.AutoIndexIterator;
        Version: string;
        Schedule: any;
        RuleGuid: string;
    }

    export class AIMatchOptions {
        MatchCodes: Array<dev.docuware.com.settings.workflows.autoindex.EqualityMatchCode>;
        MultiMatchMode: dev.docuware.com.settings.workflows.autoindex.MultiMatchMode;
    }

    export class EqualityMatchCode {
        ExtDBField: string;
        FCField: string;
        SourceField: string;
        TargetField: string;
        Operation: dev.docuware.com.settings.workflows.autoindex.MatchCodeOperation;
    }

    const enum MatchCodeOperation {
        Equal = 0,
        NotEqual = 1
    }

    const enum MultiMatchMode {
        FirstMatch = 0,
        AllMatches = 1,
        NoMatch = 2,
    }

    export class AIDSActionsType {
        MatchActions: dev.docuware.com.settings.workflows.autoindex.MatchActions;
        NoMatchActions: dev.docuware.com.settings.workflows.autoindex.NoMatchActions;
    }

    export class MatchActions {
        DeleteRow: boolean;
        Fields: Array<dev.docuware.com.settings.workflows.autoindex.IndexField>;
    }

    export class IndexField {
        Field: string;
        Value: string;
    }

    export class IndexDeletion extends dev.docuware.com.settings.workflows.autoindex.IndexField {

    }

    export class OverWriteIndexField extends dev.docuware.com.settings.workflows.autoindex.IndexField {
        OverWrite: boolean;
    }

    export class ContextIndexAssignment extends dev.docuware.com.settings.workflows.autoindex.OverWriteIndexField {
        ContextId: string;
    }

    export class IndexTransfer extends dev.docuware.com.settings.workflows.autoindex.OverWriteIndexField {
        AllowNulls: boolean;
        FromField: string;
    }

    export class DynamicIndexAssignment extends dev.docuware.com.settings.workflows.autoindex.OverWriteIndexField {

    }

    export class FixedIndexAssignment extends dev.docuware.com.settings.workflows.autoindex.OverWriteIndexField {
        FixedValue: dev.docuware.com.settings.workflows.autoindex.FixedTextValue;
    }

    export class FixedTextValue {
        Date: Date;
        DateSpecified: boolean;
        DateTime: Date;
        DateTimeSpecified: boolean;
        Decimal: number;
        DecimalAsString: string;
        DecimalSpecified: boolean;
        Text: string;
    }

    export class NoMatchActions {
        Fields: Array<dev.docuware.com.settings.workflows.autoindex.IndexField>;
        InsertRow: boolean;
    }

    export class AIDataSourceType {
        AIDataSource: dev.docuware.com.settings.workflows.autoindex.AIDataSource;
        DSFields: Array<dev.docuware.com.settings.workflows.autoindex.DataSourceField>;
        FilterOption: dev.docuware.com.settings.workflows.autoindex.DocumentFilter;
        UsedFilter: dev.docuware.com.settings.filter.SearchFilter;
    }

    export class AIDataSource {
        DSGuid: string;
        SourceName: string;
        UserLogin: UserLogin;
    }

    export class LocalDataSource extends dev.docuware.com.settings.workflows.autoindex.AIDataSource {
        Login: dev.docuware.com.settings.workflows.autoindex.UserLogin;
    }

    export class UserLogin {
        ComputerAddress: string;
        IsFixedLogin: boolean;
        IsLoggedInOtherSystem: boolean;
        Organization: string;
        Password: string;
        Port: number;
        ReadOnly: boolean;
        Token: string;
        User: string;
        UserGuid: string;
    }

    export class FixedEntriesDataSource extends dev.docuware.com.settings.workflows.autoindex.AIDataSource {

    }

    export class DatabaseDataSource extends dev.docuware.com.settings.workflows.autoindex.AIDataSource {
        DBQuery: string;
        DatabaseType: dev.docuware.com.settings.workflows.autoindex.DatabaseType;
    }

    const enum DatabaseType {
        Table = 0,
        View = 1,
        SQLStatement = 2,
    }

    export class FileDataSource extends dev.docuware.com.settings.workflows.autoindex.AIDataSource {
        FileOpenMode: dev.docuware.com.settings.workflows.autoindex.FileOpenMode;
        FilePostProcessMode: dev.docuware.com.settings.workflows.autoindex.FilePostProcessMode;
        OrganizationGuid: string;
    }

    const enum FileOpenMode {
        ReadWrite = 0,
        ReadOnly = 1,
        TemporaryCopy = 2,
    }

    const enum FilePostProcessMode {
        None = 0,
        Move = 1,
        Delete = 2,
    }

    export class FileCabinetDataSource extends dev.docuware.com.settings.workflows.autoindex.AIDataSource {
        UserLogin: dev.docuware.com.settings.workflows.autoindex.UserLogin;
    }

    export class DataSourceField {
        DisplayName: string;
        InternalType: dev.docuware.com.settings.workflows.autoindex.DataSourceFieldType;
        IsReadonly: boolean;
        Length: number;
        Name: string;
        Type: dev.docuware.com.settings.interop.DWFieldType;
    }

    const enum DataSourceFieldType {
        Normal = 0,
        DocID = 1,
        SAPDOCID = 2,
    }

    const enum DocumentFilter {
        AllDocuments = 0,
        Filter = 1,
    }

    export class SearchFilter {
        AllowedFormats: number;
        ExtendedStatement: string;
        FirstComposite: dev.docuware.com.settings.workflows.autoindex.SearchFilter;
        Format: dev.docuware.com.settings.workflows.autoindex.SearchFilterForm;
        Operation: dev.docuware.com.settings.workflows.autoindex.SimpleOperation;
        SQLStatement: string;
        SecondComposite: dev.docuware.com.settings.workflows.autoindex.SearchFilter;
        Simple: Array<dev.docuware.com.settings.workflows.autoindex.FDRTerm>;
    }

    const enum SearchFilterForm {
        Simple = 0,
        Proffesional = 1,
        Composite = 2,
        Free = 3,
        Extended = 4,
    }

    const enum SimpleOperation {
        And = 0,
        Or = 1,
    }

    export class FDRTerm {
        Field: string;
        Operation: dev.docuware.com.settings.workflows.autoindex.SearchOperation;
        Value: string;
    }

    const enum SearchOperation {
        And = 0,
        Or = 1,
        Less = 2,
        More = 3,
        Equal = 4,
        Different = 5,
        LessEqual = 6,
        MoreEqual = 7,
        Is = 8,
        In = 9,
        Like = 10,
        Range = 11,
        Contain = 12,
        Not = 13,
        Free = 14,
        StartsWith = 15,
        EndsWith = 16,
    }

    const enum ExternalDataSource {
        FileCabinet = 0,
        DatabaseConnection = 1,
        FileConnection = 2,
        FixedEntries = 3,
    }

    const enum AutoIndexIterator {
        FileCabinet = 0,
        ExternalDataSource = 1,
    }
}

declare module dev.docuware.com.settings.workflows.deletionprocess {
    export class DeletionProcessQuery extends dev.docuware.com.settings.interop.SettingsQuery {
    }

    export class DeletionProcess extends dev.docuware.com.settings.bpsprocesses.common.BPSProcess {
        DeleteOptions: dev.docuware.com.settings.workflows.deletionprocess.DeletionOptions;
        FileCabinetGuid: string;
        Filter: dev.docuware.com.settings.filter.SearchFilter;
        LoginPassword: string;
        LoginUser: string;
        LoginUserGuid: string;
        OrganizationGuid: string;
        Name: string;
        Description: string;
    }

    const enum DeletionOptions {
        Full = 0,
        HistoryOnly = 1,
    }
}

declare module dev.docuware.com.settings.workflows.documentssync {
    export class ReplicationQuery extends dev.docuware.com.settings.interop.SettingsQuery {
    }

    export class Replication extends dev.docuware.com.settings.bpsprocesses.common.BPSProcess {
        Active: boolean;
        CreatedBy: string;
        DocumentDeletedInMaster: boolean;
        DocumentDeletedInSatellite: boolean;
        DocumentModifiedInMaster: boolean;
        DocumentModifiedInSatellite: boolean;
        DocumentStoredToMaster: boolean;
        DocumentStoredToSatellite: boolean;
        EnableFilterDate: boolean;
        EnableFilterField: boolean;
        FieldMappings: Array<dev.docuware.com.settings.workflows.documentssync.FieldMapping>;
        FileCabinetAInfo: dev.docuware.com.settings.workflows.documentssync.FileCabinetInfo;
        FileCabinetBInfo: dev.docuware.com.settings.workflows.documentssync.FileCabinetInfo;
        FilterDate: Date;
        FilterField: string;
        FilterFieldValue: string;
        OrganizationGuid: string;
        Schedule: dev.docuware.com.settings.common.dwschedule.SynchronizationScheduleSettings;
        SyncDirection: dev.docuware.com.settings.workflows.documentssync.SyncDirection;
        LocalUserGuid: string;
        LocalUsername: string;
        LocalPassword: string;
        LocalToken: string;
    }

    export class FieldMapping {
        Destination: string;
        Source: string;
    }

    export class FileCabinetInfo {
        Connection: dev.docuware.com.settings.workflows.documentssync.PlatformConnection;
        FileCabinetGuid: string;
        FileCabinetName: string;
        IsRemote: boolean;
        OrganizationName: string;
    }

    export class PlatformConnection {
        Password: string;
        PlatformUrl: string;
        Username: string;
    }

    const enum SyncDirection {
        Unknown = 0,
        Export = 1,
        Synchronize = 2,
        Custom = 3,
    }
}

declare module dev.docuware.com.settings.workflows.dwimportrequest {
    export class DWImportRequestQuery extends dev.docuware.com.settings.interop.SettingsQuery {
    }

    export class DWImportRequest extends dev.docuware.com.settings.bpsprocesses.common.BPSProcess {
        Admins: Array<dev.docuware.com.settings.workflows.dwrequestuser.DWRequestUser>;
        CreatedAt: Date;
        CreatedBy: string;
        DeleteContainerOnSuccess: boolean;
        FileCabinetGuid: string;
        FileCabinetName: string;
        IsOnlineInstallation: boolean;
        LoginToken: string;
        OrganizationGuid: string;
        OrganizationName: string;
        OriginalStoreDate: boolean;
        OriginalStoreUser: boolean;
        OwnerGuid: string;
        RequestFileName: string;
        StorageLocationId: string;
        Users: Array<dev.docuware.com.settings.workflows.dwrequestuser.DWRequestUser>;
        WFGuid: string;
        WorkflowServer: string;
    }
}

declare module dev.docuware.com.settings.workflows.dwrequestlite {
    export class DWRequestLiteQuery extends dev.docuware.com.settings.interop.SettingsQuery {
    }

    export class DWRequestLite extends dev.docuware.com.settings.bpsprocesses.common.BPSProcess {
        ContainerSize: number;
        CreatedAt: Date;
        CreatedBy: string;
        DocumentFormat: dev.docuware.com.settings.workflows.dwrequestlite.DWRequestDocumentFormat;
        FileCabinetGuid: string;
        FileCabinetName: string;
        UsedFilter: dev.docuware.com.settings.filter.SearchFilter;
        FullTextSearchEnabled: boolean;
        IncludeWorkflowHistory: boolean;
        IsOnlineInstallation: boolean;
        LoginPassword: string;
        LoginUser: string;
        LoginUserGuid: string;
        OrganizationGuid: string;
        OrganizationName: string;
        OwnerGuid: string;
        ResultListGuid: string;
        ResultListIntegrationLink: string;
        ScheduleStartDateTime: Date;
        ScheduleType: dev.docuware.com.settings.workflows.dwrequestlite.DWRequestScheduleType;
        SearchQuery: string;
        SearchDialogGuid: string;
        TaskListGuid: string;
        UseDocVersioning: boolean;
        AllowElectronicSigning: boolean;
    }

    const enum DWRequestDocumentFormat {
        Original = 0,
        ConvertToPdf = 1,
        ConvertToPdfWithoutAnnotations = 2,
    }

    export class DWRequestFilter {
        DateOperator: dev.docuware.com.settings.workflows.dwrequestlite.DWRequestDateOperator;
        FieldGuid: string;
        FieldName: string;
        IsPastValue: boolean;
        IsUserDefined: boolean;
        Keywords: Array<string>;
        PastValueType: dev.docuware.com.settings.workflows.dwrequestlite.DWRequestPastValueType;
        Type: dev.docuware.com.settings.interop.DWFieldType;
        Value1: string;
        Value2: string;
    }

    const enum DWRequestDateOperator {
        Unknown = 0,
        Range = 1,
        Past = 2,
    }

    const enum DWRequestPastValueType {
        Unknown = 0,
        Days = 1,
        Months = 2,
        Years = 3,
    }

    const enum DWRequestScheduleWeek {
        First = 0,
        Second = 1,
        Third = 2,
        Fourth = 3,
    }

    const enum DWRequestScheduleWeekDay {
        Monday = 0,
        Tuesday = 1,
        Wednesday = 2,
        Thursday = 3,
        Friday = 4,
        Saturday = 5,
        Sunday = 6,
    }

    const enum DWRequestScheduleType {
        Unknown = 0,
        RunImmediately = 1,
        RunAtDateTime = 2,
        RecurringDay = 3,
        RecurringMonth = 4,
    }
}

declare module dev.docuware.com.settings.workflows.dwrequestuser {
    export class DWRequestUser {
        Guid: string;
        Name: string;
        Type: dev.docuware.com.settings.workflows.dwrequestuser.DWRequestRoleType;
    }

    const enum DWRequestRoleType {
        User = 0,
        Role = 1,
    }
}

declare module dev.docuware.com.settings.workflows {
    export class ProcessStatusQuery extends dev.docuware.com.settings.interop.SettingsQuery {

    }
}

declare module dev.docuware.com.settings.workflowservice {
    const enum BPSProcessResultState {
        Unknown = 0,
        Success = 1,
        Warning = 2,
        Error = 3,
        Aborted = 4
    }

    export class DBWorkflowStatus {
        LastError: string;
        LastUpdateTime: Date;
        Paused: boolean;
        SetID: number;
        SettingsGuid: string;
        TimeRunning: System.TimeSpan;
        version: string;
    }

    export class BPSProcessHistoryStatus {
        CreatedAt: Date;
        Duration: string;
        CreatedBy: string;
        LastError: string;
        LogLocation: string;
        LogLocationHash: string;
        SuccessfulDocumentsCount: number;
        FailedDocumentsCount: number;
        TotalDocumentsCount: number;
        ResultState: BPSProcessResultState;
    }

    export class ReplicationStatus extends dev.docuware.com.settings.workflowservice.DBWorkflowStatus {
        DeletedDocs: number;
        FailedDocs: number;
        LogLocation: string;
        UpdatedDocs: number;
        WasRun: boolean;
    }

    export abstract class BPSProcessStatus extends dev.docuware.com.settings.workflowservice.DBWorkflowStatus {
        LastRunTime: Date;
        ProcessState: DocuWare.WAFServices.DataContracts.WorkflowService.BPSProcessState;
        abstract HistoryStatus: Array<dev.docuware.com.settings.workflowservice.BPSProcessHistoryStatus>;
    }

    export class DeletionProcessStatus extends dev.docuware.com.settings.workflowservice.BPSProcessStatus {
        HistoryStatus: Array<DeletionProcessHistoryStatus>;
    }

    export class DeletionProcessHistoryStatus extends BPSProcessHistoryStatus { }

    export class ExportProcessStatus extends dev.docuware.com.settings.workflowservice.BPSProcessStatus {
        HistoryStatus: Array<dev.docuware.com.settings.workflowservice.ExportProcessHistoryStatus>;
    }

    export class ExportProcessHistoryStatus extends BPSProcessHistoryStatus { }

    export class AutoIndexStatus extends dev.docuware.com.settings.workflowservice.BPSProcessStatus {
        HistoryStatus: Array<AutoIndexHistoryStatus>;
    }

    export class AutoIndexHistoryStatus extends BPSProcessHistoryStatus {
        IteratedRecords: number;
        FailedFCRecords: number;
        FailedExternalRecords: number;
        SuccessfulFCRecords: number;
        SuccessfulExternalRecords: number;
        LastRunTime: Date;
    }

    export class DWRequestLiteStatus extends dev.docuware.com.settings.workflowservice.BPSProcessStatus {
        HistoryStatus: Array<dev.docuware.com.settings.workflowservice.DWRequestLiteContainer>;
        OnlineStatus: DocuWare.WAFServices.DataContracts.WorkflowService.DWRequestOnlineStatus;
        RestoreData: dev.docuware.com.settings.workflowservice.RequestExportRestoreData;
    }

    export class DWRequestLiteContainer extends BPSProcessHistoryStatus {
        ExpiresAt: Date;
        Location: string;
        LocationHash: string;
        Name: string;
        Size: number;
        TempLocation: string;
    }

    export class RequestExportRestoreData {
        CompletedIterations: number;
        FailedDocumentsCount: number;
        FilesLocation: string;
        LocalId: number;
        LogFileFullName: string;
        OriginalId: number;
        RestorePhase: string;
        StartedAt: Date;
    }

    export class RequestImportStatus extends dev.docuware.com.settings.workflowservice.BPSProcessStatus {
        HistoryStatus: Array<dev.docuware.com.settings.workflowservice.RequestImportHistoryStatus>;
    }

    export class RequestImportHistoryStatus extends BPSProcessHistoryStatus {
        TempLocation: string;
    }

    export class DocumentSizeQuery {
        IncludeVersions: boolean;
        WFGuid: string;
    }

    export class RuntimeWorkflowStatus {
        ExceptionMsg: string;
        Percentage: number;
        WFstate: dev.docuware.com.settings.workflowservice.RuntimeWorkflowState;
        WaitReason: string;
        WaitReasonData: string;
        WorkflowGuid: string;
    }

    const enum RuntimeWorkflowState {
        Idle = 1,
        OnHold = 2,
        Stop = 3,
        Running = 4,
        Error = 5,
        Waiting = 6,
    }

    const enum WaitResultType {
        Unknown = 0,
        Yes = 1,
        No = 2,
        Cancel = 3,
        OK = 4,
    }
}

declare module dev.docuware.com.settings {
    const enum SMTPModule {
        System = 1,
        Notification = 2,
        BPW = 3,
    }

    const enum DWSettings {
        SmartConnect = 1,
    }

    const enum SecurityProtocol {
        None = 1,
        SSL = 2,
        TLS = 3,
        STARTTLS = 4,
    }
}

declare module dev.docuware.com.wafservice {
    export class ClientServiceSession extends dev.docuware.com.wafservice.SessionBase {
        Organization: string;
        OrganizationGuid: string;
        User: string;
        UserGuid: string;
    }

    export class SessionBase {
        SessionID: string;
    }

    export class TokenDetails {
        LifetimeAsString: string;
        Permanent: boolean;
        TargetModules: Array<dev.docuware.com.settings.interop.DWProductTypes>;
        Usage: dev.docuware.com.wafservice.TokenType;
    }

    const enum TokenType {
        SingleUsage = 0,
        MultiUsage = 1,
    }
}

declare module DocuWare.WAFServices.DataContracts.SelectLists {
    const enum SettingsTypes {
        Groups = 0,
        Roles = 1,
        Users = 2,
        SubstitutionLists = 3,
    }
}

declare module DocuWare.WAFServices.DataContracts.WorkflowService {
    const enum BPSProcessState {
        Unknown = 0,
        Running = 1,
        Stopped = 2,
    }

    const enum DWRequestOnlineStatus {
        Unknown = 0,
        Waiting = 1,
        Approved = 2,
        Finished = 3,
    }
}

declare module System.Windows.Input {
    const enum Key {
        None = 0,
        Cancel = 1,
        Back = 2,
        Tab = 3,
        LineFeed = 4,
        Clear = 5,
        Return = 6,
        Enter = 6,
        Pause = 7,
        Capital = 8,
        CapsLock = 8,
        KanaMode = 9,
        HangulMode = 9,
        JunjaMode = 10,
        FinalMode = 11,
        HanjaMode = 12,
        KanjiMode = 12,
        Escape = 13,
        ImeConvert = 14,
        ImeNonConvert = 15,
        ImeAccept = 16,
        ImeModeChange = 17,
        Space = 18,
        Prior = 19,
        PageUp = 19,
        Next = 20,
        PageDown = 20,
        End = 21,
        Home = 22,
        Left = 23,
        Up = 24,
        Right = 25,
        Down = 26,
        Select = 27,
        Print = 28,
        Execute = 29,
        Snapshot = 30,
        PrintScreen = 30,
        Insert = 31,
        Delete = 32,
        Help = 33,
        D0 = 34,
        D1 = 35,
        D2 = 36,
        D3 = 37,
        D4 = 38,
        D5 = 39,
        D6 = 40,
        D7 = 41,
        D8 = 42,
        D9 = 43,
        A = 44,
        B = 45,
        C = 46,
        D = 47,
        E = 48,
        F = 49,
        G = 50,
        H = 51,
        I = 52,
        J = 53,
        K = 54,
        L = 55,
        M = 56,
        N = 57,
        O = 58,
        P = 59,
        Q = 60,
        R = 61,
        S = 62,
        T = 63,
        U = 64,
        V = 65,
        W = 66,
        X = 67,
        Y = 68,
        Z = 69,
        LWin = 70,
        RWin = 71,
        Apps = 72,
        Sleep = 73,
        NumPad0 = 74,
        NumPad1 = 75,
        NumPad2 = 76,
        NumPad3 = 77,
        NumPad4 = 78,
        NumPad5 = 79,
        NumPad6 = 80,
        NumPad7 = 81,
        NumPad8 = 82,
        NumPad9 = 83,
        Multiply = 84,
        Add = 85,
        Separator = 86,
        Subtract = 87,
        Decimal = 88,
        Divide = 89,
        F1 = 90,
        F2 = 91,
        F3 = 92,
        F4 = 93,
        F5 = 94,
        F6 = 95,
        F7 = 96,
        F8 = 97,
        F9 = 98,
        F10 = 99,
        F11 = 100,
        F12 = 101,
        F13 = 102,
        F14 = 103,
        F15 = 104,
        F16 = 105,
        F17 = 106,
        F18 = 107,
        F19 = 108,
        F20 = 109,
        F21 = 110,
        F22 = 111,
        F23 = 112,
        F24 = 113,
        NumLock = 114,
        Scroll = 115,
        LeftShift = 116,
        RightShift = 117,
        LeftCtrl = 118,
        RightCtrl = 119,
        LeftAlt = 120,
        RightAlt = 121,
        BrowserBack = 122,
        BrowserForward = 123,
        BrowserRefresh = 124,
        BrowserStop = 125,
        BrowserSearch = 126,
        BrowserFavorites = 127,
        BrowserHome = 128,
        VolumeMute = 129,
        VolumeDown = 130,
        VolumeUp = 131,
        MediaNextTrack = 132,
        MediaPreviousTrack = 133,
        MediaStop = 134,
        MediaPlayPause = 135,
        LaunchMail = 136,
        SelectMedia = 137,
        LaunchApplication1 = 138,
        LaunchApplication2 = 139,
        Oem1 = 140,
        OemSemicolon = 140,
        OemPlus = 141,
        OemComma = 142,
        OemMinus = 143,
        OemPeriod = 144,
        Oem2 = 145,
        OemQuestion = 145,
        Oem3 = 146,
        OemTilde = 146,
        AbntC1 = 147,
        AbntC2 = 148,
        Oem4 = 149,
        OemOpenBrackets = 149,
        Oem5 = 150,
        OemPipe = 150,
        Oem6 = 151,
        OemCloseBrackets = 151,
        Oem7 = 152,
        OemQuotes = 152,
        Oem8 = 153,
        Oem102 = 154,
        OemBackslash = 154,
        ImeProcessed = 155,
        System = 156,
        OemAttn = 157,
        DbeAlphanumeric = 157,
        OemFinish = 158,
        DbeKatakana = 158,
        OemCopy = 159,
        DbeHiragana = 159,
        OemAuto = 160,
        DbeSbcsChar = 160,
        OemEnlw = 161,
        DbeDbcsChar = 161,
        OemBackTab = 162,
        DbeRoman = 162,
        Attn = 163,
        DbeNoRoman = 163,
        CrSel = 164,
        DbeEnterWordRegisterMode = 164,
        ExSel = 165,
        DbeEnterImeConfigureMode = 165,
        EraseEof = 166,
        DbeFlushString = 166,
        Play = 167,
        DbeCodeInput = 167,
        Zoom = 168,
        DbeNoCodeInput = 168,
        NoName = 169,
        DbeDetermineString = 169,
        Pa1 = 170,
        DbeEnterDialogConversionMode = 170,
        OemClear = 171,
        DeadCharProcessed = 172,
    }

    const enum ModifierKeys {
        None = 0,
        Alt = 1,
        Control = 2,
        Shift = 4,
        Windows = 8,
    }
}

declare module DocuWare.WAFServices.DataContracts.ContentService {
    export class LocalDbColumn {
        ColumnType: string;
        Name: string;
    }
}

declare module dev.docuware.com.services.forms {
    export class GetFormHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.forms.FormConfigQuery;
    }

    export class GetFormHeadersResponse {
        GetFormHeadersResult: Array<dev.docuware.com.settings.forms.FormConfigHeader>;
    }

    export class GetFormConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.forms.FormConfigQuery;
    }

    export class GetFormConfigurationsResponse {
        GetFormConfigurationsResult: Array<dev.docuware.com.settings.forms.FormConfig>;
    }

    export class SaveFormConfiguration {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.forms.FormConfig;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveFormConfigurationResponse {

    }

    export class DeleteFormConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.forms.FormConfigQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteFormConfigurationsResponse {

    }
}

declare module dev.docuware.com.services.settings {
    export class Login {
        userName: string;
        password: string;
        organization: string;
    }

    export class LoginResponse {
        LoginResult: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class LoginWithToken {
        token: string;
    }

    export class LoginWithTokenResponse {
        LoginWithTokenResult: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class LoginWithWindowsAuthentication {
        organization: string;
    }

    export class LoginWithWindowsAuthenticationResponse {
        LoginWithWindowsAuthenticationResult: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class CreateLoginToken {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        details: dev.docuware.com.wafservice.TokenDetails;
    }

    export class CreateLoginTokenResponse {
        CreateLoginTokenResult: string;
    }

    export class Logoff {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class LogoffResponse {

    }

    export class Ping {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class PingResponse {

    }

    export class SystemUserLogin {
        userName: string;
        password: string;
        organizationContext: string;
    }

    export class SystemUserLoginResponse {
        SystemUserLoginResult: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetVersionInfo {

    }

    export class GetVersionInfoResponse {
        GetVersionInfoResult: dev.docuware.com.settings.system.VersionInfo;
    }

    export class GetAutoIndexHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.autoindex.AutoIndexQuery;
    }

    export class GetAutoIndexHeadersResponse {
        GetAutoIndexHeadersResult: Array<dev.docuware.com.settings.bpsprocesses.common.BPSProcessHeader>;
    }

    export class GetAutoIndexes {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.autoindex.AutoIndexQuery;
    }

    export class GetAutoIndexesResponse {
        GetAutoIndexesResult: Array<dev.docuware.com.settings.workflows.autoindex.AutoIndex>;
    }

    export class SaveAutoIndex {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.workflows.autoindex.AutoIndex;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveAutoIndexResponse {

    }

    export class DeleteAutoIndexes {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.autoindex.AutoIndex;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteAutoIndexesResponse {

    }

    export class GetOutlookConfigurationHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookQuery;
    }

    export class GetOutlookConfigurationHeadersResponse {
        GetOutlookConfigurationHeadersResult: Array<dev.docuware.com.settings.connecttooutlook.OutlookConfigurationHeader>;
    }

    export class GetOutlookConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookQuery;
    }

    export class GetOutlookConfigurationsResponse {
        GetOutlookConfigurationsResult: Array<dev.docuware.com.settings.connecttooutlook.Configuration>;
    }

    export class SaveOutlookConfiguration {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.connecttooutlook.Configuration;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveOutlookConfigurationResponse {

    }

    export class DeleteOutlookConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteOutlookConfigurationsResponse {

    }

    export class GetOutlookAccessHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookQuickAccessQuery;
    }

    export class GetOutlookAccessHeadersResponse {
        GetOutlookAccessHeadersResult: Array<dev.docuware.com.settings.connecttooutlook.QuickAccessSettingHeader>;
    }

    export class GetOutlookAccessSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookQuickAccessQuery;
    }

    export class GetOutlookAccessSettingsResponse {
        GetOutlookAccessSettingsResult: Array<dev.docuware.com.settings.connecttooutlook.QuickAccessSetting>;
    }

    export class SaveOutlookAccessSetting {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.connecttooutlook.QuickAccessSetting;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveOutlookAccessSettingResponse {

    }

    export class DeleteOutlookAccessSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookQuickAccessQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteOutlookAccessSettingsResponse {

    }

    export class GetOutlookMonitorConfigurationHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookMonitorQuery;
    }

    export class GetOutlookMonitorConfigurationHeadersResponse {
        GetOutlookMonitorConfigurationHeadersResult: Array<dev.docuware.com.settings.connecttooutlook.OutlookMonitorConfigurationHeader>;
    }

    export class GetOutlookMonitorConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookMonitorQuery;
    }

    export class GetOutlookMonitorConfigurationsResponse {
        GetOutlookMonitorConfigurationsResult: Array<dev.docuware.com.settings.connecttooutlook.MonitorConfiguration>;
    }

    export class SaveOutlookMonitorConfiguration {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.connecttooutlook.MonitorConfiguration;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveOutlookMonitorConfigurationResponse {

    }

    export class DeleteOutlookMonitorConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.connecttooutlook.ConnectToOutlookMonitorQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteOutlookMonitorConfigurationsResponse {

    }

    export class GetDeletionProcessHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.deletionprocess.DeletionProcessQuery;
    }

    export class GetDeletionProcessHeadersResponse {
        GetDeletionProcessHeadersResult: Array<dev.docuware.com.settings.bpsprocesses.common.BPSProcessHeader>;
    }

    export class GetDeletionProcesses {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.deletionprocess.DeletionProcessQuery;
    }

    export class GetDeletionProcessesResponse {
        GetDeletionProcessesResult: Array<dev.docuware.com.settings.workflows.deletionprocess.DeletionProcess>;
    }

    export class SaveDeletionProcess {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.workflows.deletionprocess.DeletionProcess;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveDeletionProcessResponse {

    }

    export class DeleteDeletionProcess {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.deletionprocess.DeletionProcessQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteDeletionProcessResponse {

    }

    export class GetDWRequestLiteHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.dwrequestlite.DWRequestLiteQuery;
    }

    export class GetDWRequestLiteHeadersResponse {
        GetDWRequestLiteHeadersResult: Array<dev.docuware.com.settings.bpsprocesses.common.BPSProcessHeader>;
    }

    export class GetDWRequestLites {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.dwrequestlite.DWRequestLiteQuery;
    }

    export class GetDWRequestLitesResponse {
        GetDWRequestLitesResult: Array<dev.docuware.com.settings.workflows.dwrequestlite.DWRequestLite>;
    }

    export class SaveDWRequestLite {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.workflows.dwrequestlite.DWRequestLite;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveDWRequestLiteResponse {

    }

    export class DeleteDWRequestLites {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.dwrequestlite.DWRequestLiteQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteDWRequestLitesResponse {

    }

    export class CalculateDWRequestLiteSize {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflowservice.DocumentSizeQuery;
    }

    export class CalculateDWRequestLiteSizeResponse {
        CalculateDWRequestLiteSizeResult: number;
    }

    export class GetDWImportRequestHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.dwimportrequest.DWImportRequestQuery;
    }

    export class GetDWImportRequestHeadersResponse {
        GetDWImportRequestHeadersResult: Array<dev.docuware.com.settings.bpsprocesses.common.BPSProcessHeader>;
    }

    export class GetDWImportRequests {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.dwimportrequest.DWImportRequestQuery;
    }

    export class GetDWImportRequestsResponse {
        GetDWImportRequestsResult: Array<dev.docuware.com.settings.workflows.dwimportrequest.DWImportRequest>;
    }

    export class SaveDWImportRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.workflows.dwimportrequest.DWImportRequest;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveDWImportRequestResponse {

    }

    export class DeleteDWImportRequests {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.dwimportrequest.DWImportRequestQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteDWImportRequestsResponse {

    }

    export class GetImportConfigurationHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.emailarchivingservice.ImportConfigurationQuery;
    }

    export class GetImportConfigurationHeadersResponse {
        GetImportConfigurationHeadersResult: Array<dev.docuware.com.settings.emailarchivingservice.ImportConfigurationHeader>;
    }

    export class GetImportConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.emailarchivingservice.ImportConfigurationQuery;
    }

    export class GetImportConfigurationsResponse {
        GetImportConfigurationsResult: Array<dev.docuware.com.settings.emailarchivingservice.ImportConfiguration>;
    }

    export class SaveImportConfiguration {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.emailarchivingservice.ImportConfiguration;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveImportConfigurationResponse {

    }

    export class DeleteImportConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.emailarchivingservice.ImportConfigurationQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteImportConfigurationsResponse {

    }

    export class GetImapConnectionHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.emailarchivingservice.ImapConnectionQuery;
    }

    export class GetImapConnectionHeadersResponse {
        GetImapConnectionHeadersResult: Array<dev.docuware.com.settings.emailarchivingservice.ImapConnectionHeader>;
    }

    export class GetImapConnections {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.emailarchivingservice.ImapConnectionQuery;
    }

    export class GetImapConnectionsResponse {
        GetImapConnectionsResult: Array<dev.docuware.com.settings.emailarchivingservice.ImapConnection>;
    }

    export class SaveImapConnection {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.emailarchivingservice.ImapConnection;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveImapConnectionResponse {

    }

    export class DeleteImapConnections {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.emailarchivingservice.ImapConnectionQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteImapConnectionsResponse {

    }

    export class GetImapServers {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.emailarchivingservice.ImapServerQuery;
    }

    export class GetImapServersResponse {
        GetImapServersResult: Array<dev.docuware.com.settings.emailarchivingservice.ImapServer>;
    }

    export class SaveIMAPServer {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.emailarchivingservice.ImapServer;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveIMAPServerResponse {

    }

    export class DeleteIMAPServers {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.emailarchivingservice.ImapServerQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteIMAPServersResponse {

    }

    export class GetMailServiceHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.mailservices.MailServiceQuery;
    }

    export class GetMailServiceHeadersResponse {
        GetMailServiceHeadersResult: Array<dev.docuware.com.settings.mailservices.MailServiceHeader>;
    }

    export class GetMailServices {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.mailservices.MailServiceQuery;
    }

    export class GetMailServicesResponse {
        GetMailServicesResult: Array<dev.docuware.com.settings.mailservices.MailService>;
    }

    export class SaveMailService {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.mailservices.MailService;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveMailServiceResponse {

    }

    export class DeleteMailServices {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.mailservices.MailServiceQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteMailServicesResponse {

    }

    export class GetExportProcessHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.exportprocess.ExportProcessQuery;
    }

    export class GetExportProcessHeadersResponse {
        GetExportProcessHeadersResult: Array<dev.docuware.com.settings.bpsprocesses.common.BPSProcessHeader>;
    }

    export class GetExportProcesses {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.exportprocess.ExportProcessQuery;
    }

    export class GetExportProcessesResponse {
        GetExportProcessesResult: Array<dev.docuware.com.settings.workflows.exportprocess.ExportProcess>;
    }

    export class SaveExportProcess {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.workflows.exportprocess.ExportProcess;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveExportProcessResponse {

    }

    export class DeleteExportProcesses {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.exportprocess.ExportProcessQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteExportProcessesResponse {

    }

    export class GetFileCabinetHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.FileCabinetQuery;
    }

    export class GetFileCabinetHeadersResponse {
        GetFileCabinetHeadersResult: Array<dev.docuware.com.settings.filecabinet.FileCabinetHeader>;
    }

    export class GetFileCabinets {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.FileCabinetQuery;
    }

    export class GetFileCabinetsResponse {
        GetFileCabinetsResult: Array<dev.docuware.com.settings.filecabinet.DWFileCabinet>;
    }

    export class SaveFileCabinet {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.DWFileCabinet;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveFileCabinetResponse {

    }

    export class DeleteFileCabinets {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.FileCabinetQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteFileCabinetsResponse {

    }

    export class EnableHighSecurityAccess {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        fileCabinetGuid: string;
    }

    export class EnableHighSecurityAccessResponse {

    }

    export class GetSearchDialogHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.SearchDialogQuery;
    }

    export class GetSearchDialogHeadersResponse {
        GetSearchDialogHeadersResult: Array<dev.docuware.com.settings.filecabinet.SearchDialogHeader>;
    }

    export class GetSearchDialog {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        guid: string;
        flags: dev.docuware.com.settings.filecabinet.SearchDialogContentFilterFlag;
    }

    export class GetSearchDialogResponse {
        GetSearchDialogResult: dev.docuware.com.settings.filecabinet.SearchDialog;
    }

    export class GetSearchDialogs {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.SearchDialogQuery;
        flags: dev.docuware.com.settings.filecabinet.SearchDialogContentFilterFlag;
    }

    export class GetSearchDialogsResponse {
        GetSearchDialogsResult: Array<dev.docuware.com.settings.filecabinet.SearchDialog>;
    }

    export class SaveSearchDialog {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.SearchDialog;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveSearchDialogResponse {

    }

    export class DeleteSearchDialogs {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.SearchDialogQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteSearchDialogsResponse {

    }

    export class GetStoreDialogHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.StoreDialogQuery;
    }

    export class GetStoreDialogHeadersResponse {
        GetStoreDialogHeadersResult: Array<dev.docuware.com.settings.filecabinet.StoreDialogHeader>;
    }

    export class GetStoreDialog {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        guid: string;
        flags: dev.docuware.com.settings.filecabinet.StoreDialogContentFilterFlag;
    }

    export class GetStoreDialogResponse {
        GetStoreDialogResult: dev.docuware.com.settings.filecabinet.StoreDialog;
    }

    export class GetStoreDialogs {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.StoreDialogQuery;
        flags: dev.docuware.com.settings.filecabinet.StoreDialogContentFilterFlag;
    }

    export class GetStoreDialogsResponse {
        GetStoreDialogsResult: Array<dev.docuware.com.settings.filecabinet.StoreDialog>;
    }

    export class SaveStoreDialog {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.StoreDialog;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveStoreDialogResponse {

    }

    export class DeleteStoreDialogs {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.StoreDialogQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteStoreDialogsResponse {

    }

    export class GetResultListHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.ResultListQuery;
    }

    export class GetResultListHeadersResponse {
        GetResultListHeadersResult: Array<dev.docuware.com.settings.filecabinet.ResultListHeader>;
    }

    export class GetResultList {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        guid: string;
        flags: dev.docuware.com.settings.filecabinet.ResultListDialogContentFilterFlag;
    }

    export class GetResultListResponse {
        GetResultListResult: dev.docuware.com.settings.filecabinet.ResultListDialog;
    }

    export class GetResultLists {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.ResultListQuery;
        flags: dev.docuware.com.settings.filecabinet.ResultListDialogContentFilterFlag;
    }

    export class GetResultListsResponse {
        GetResultListsResult: Array<dev.docuware.com.settings.filecabinet.ResultListDialog>;
    }

    export class SaveResultList {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.ResultListDialog;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveResultListResponse {

    }

    export class DeleteResultLists {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.ResultListQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteResultListsResponse {

    }

    export class GetTreeViewHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.TreeViewQuery;
    }

    export class GetTreeViewHeadersResponse {
        GetTreeViewHeadersResult: Array<dev.docuware.com.settings.filecabinet.TreeViewHeader>;
    }

    export class GetTreeView {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        guid: string;
        flags: dev.docuware.com.settings.filecabinet.TreeViewContentFilterFlag;
    }

    export class GetTreeViewResponse {
        GetTreeViewResult: dev.docuware.com.settings.filecabinet.TreeView;
    }

    export class GetTreeViews {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.TreeViewQuery;
        flags: dev.docuware.com.settings.filecabinet.TreeViewContentFilterFlag;
    }

    export class GetTreeViewsResponse {
        GetTreeViewsResult: Array<dev.docuware.com.settings.filecabinet.TreeView>;
    }

    export class SaveTreeView {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.TreeView;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveTreeViewResponse {

    }

    export class DeleteTreeViews {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.TreeViewQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteTreeViewsResponse {

    }

    export class GetInfoDialogHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.InfoDialogQuery;
    }

    export class GetInfoDialogHeadersResponse {
        GetInfoDialogHeadersResult: Array<dev.docuware.com.settings.filecabinet.InfoDialogHeader>;
    }

    export class GetInfoDialog {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        guid: string;
        flags: dev.docuware.com.settings.filecabinet.InfoDialogContentFilterFlag;
    }

    export class GetInfoDialogResponse {
        GetInfoDialogResult: dev.docuware.com.settings.filecabinet.InfoDialog;
    }

    export class GetInfoDialogs {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.InfoDialogQuery;
        flags: dev.docuware.com.settings.filecabinet.InfoDialogContentFilterFlag;
    }

    export class GetInfoDialogsResponse {
        GetInfoDialogsResult: Array<dev.docuware.com.settings.filecabinet.InfoDialog>;
    }

    export class SaveInfoDialog {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.InfoDialog;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveInfoDialogResponse {

    }

    export class GetTaskListHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.TaskListQuery;
    }

    export class GetTaskListHeadersResponse {
        GetTaskListHeadersResult: Array<dev.docuware.com.settings.filecabinet.TaskListHeader>;
    }

    export class GetTaskList {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        guid: string;
        flags: dev.docuware.com.settings.filecabinet.TaskListContentFilterFlag;
    }

    export class GetTaskListResponse {
        GetTaskListResult: dev.docuware.com.settings.filecabinet.TaskList;
    }

    export class GetTaskLists {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.TaskListQuery;
        flags: dev.docuware.com.settings.filecabinet.TaskListContentFilterFlag;
    }

    export class GetTaskListsResponse {
        GetTaskListsResult: Array<dev.docuware.com.settings.filecabinet.TaskList>;
    }

    export class SaveTaskList {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.TaskList;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveTaskListResponse {

    }

    export class DeleteTaskLists {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.TaskListQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteTaskListsResponse {

    }

    export class GetFileCabinetProfileHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.FileCabinetProfileQuery;
    }

    export class GetFileCabinetProfileHeadersResponse {
        GetFileCabinetProfileHeadersResult: Array<dev.docuware.com.settings.filecabinet.FileCabinetProfileHeader>;
    }

    export class GetFileCabinetProfiles {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.FileCabinetProfileQuery;
    }

    export class GetFileCabinetProfilesResponse {
        GetFileCabinetProfilesResult: Array<dev.docuware.com.settings.filecabinet.FileCabinetProfile>;
    }

    export class SaveFileCabinetProfile {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.FileCabinetProfile;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveFileCabinetProfileResponse {

    }

    export class DeleteFileCabinetProfiles {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.FileCabinetProfileQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteFileCabinetProfilesResponse {

    }

    export class GetDocumentLinkHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.DocumentLinkQuery;
    }

    export class GetDocumentLinkHeadersResponse {
        GetDocumentLinkHeadersResult: Array<dev.docuware.com.settings.filecabinet.DocumentLinkHeader>;
    }

    export class GetDocumentLinks {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.DocumentLinkQuery;
    }

    export class GetDocumentLinksResponse {
        GetDocumentLinksResult: Array<dev.docuware.com.settings.filecabinet.DocumentLink>;
    }

    export class SaveDocumentLink {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.DocumentLink;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveDocumentLinkResponse {

    }

    export class DeleteDocumentLinks {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.DocumentLinkQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteDocumentLinksResponse {

    }

    export class SaveField {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        fileCabinetGuid: string;
        settings: dev.docuware.com.settings.filecabinet.Field;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveFieldResponse {

    }

    export class DeleteField {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        fileCabinetGuid: string;
        fieldGuid: string;
    }

    export class DeleteFieldResponse {

    }

    export class GetAutoNumberHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.AutoNumberQuery;
    }

    export class GetAutoNumberHeadersResponse {
        GetAutoNumberHeadersResult: Array<dev.docuware.com.settings.filecabinet.AutoNumberHeader>;
    }

    export class GetAutoNumbers {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.AutoNumberQuery;
    }

    export class GetAutoNumbersResponse {
        GetAutoNumbersResult: Array<dev.docuware.com.settings.filecabinet.AutoNumber>;
    }

    export class SaveAutoNumber {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.filecabinet.AutoNumber;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveAutoNumberResponse {

    }

    export class DeleteAutoNumbers {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.AutoNumberQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteAutoNumbersResponse {

    }

    export class GetRules {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.notification.RuleQuery;
    }

    export class GetRulesResponse {
        GetRulesResult: Array<dev.docuware.com.settings.notification.Rule>;
    }

    export class SaveRule {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.notification.Rule;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveRuleResponse {

    }

    export class DeleteRules {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.notification.RuleQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteRulesResponse {

    }

    export class GetNotificationSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.notification.NotificationSettingQuery;
    }

    export class GetNotificationSettingsResponse {
        GetNotificationSettingsResult: Array<dev.docuware.com.settings.notification.NotificationSetting>;
    }

    export class SaveNotificationSetting {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.notification.NotificationSetting;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveNotificationSettingResponse {

    }

    export class DeleteNotificationSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.notification.NotificationSettingQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteNotificationSettingsResponse {

    }

    export class GetOBRHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.barcode.configuration.OBRQuery;
    }

    export class GetOBRHeadersResponse {
        GetOBRHeadersResult: Array<dev.docuware.com.settings.barcode.configuration.OBRConfigHeader>;
    }

    export class GetOBRConfigs {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.barcode.configuration.OBRQuery;
    }

    export class GetOBRConfigsResponse {
        GetOBRConfigsResult: Array<dev.docuware.com.settings.barcode.configuration.OBRConfig>;
    }

    export class SaveOBRConfig {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.barcode.configuration.OBRConfig;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveOBRConfigResponse {

    }

    export class DeleteOBRConfigs {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.barcode.configuration.OBRQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteOBRConfigsResponse {

    }

    export class GetOCRHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.ocr.configuration.OCRQuery;
    }

    export class GetOCRHeadersResponse {
        GetOCRHeadersResult: Array<dev.docuware.com.settings.ocr.configuration.OCRConfigHeader>;
    }

    export class GetOCRTemplates {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.ocr.configuration.OCRQuery;
    }

    export class GetOCRTemplatesResponse {
        GetOCRTemplatesResult: Array<dev.docuware.com.settings.ocr.configuration.OCRConfig>;
    }

    export class SaveOCRTemplate {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.ocr.configuration.OCRConfig;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveOCRTemplateResponse {

    }

    export class DeleteOCRTemplates {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.ocr.configuration.OCRQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteOCRTemplatesResponse {

    }

    export class GetOptRecHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.common.OptRecQuery;
    }

    export class GetOptRecHeadersResponse {
        GetOptRecHeadersResult: Array<dev.docuware.com.settings.ocr.OptRecHeader>;
    }

    export class GetOrganizationIdentities {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.OrganizationIdentityQuery;
    }

    export class GetOrganizationIdentitiesResponse {
        GetOrganizationIdentitiesResult: Array<dev.docuware.com.settings.organization.OrganizationIdentity>;
    }

    export class GetOrganizationHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.OrganizationQuery;
    }

    export class GetOrganizationHeadersResponse {
        GetOrganizationHeadersResult: Array<dev.docuware.com.settings.organization.OrganizationHeader>;
    }

    export class GetOrganizations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.OrganizationQuery;
    }

    export class GetOrganizationsResponse {
        GetOrganizationsResult: Array<dev.docuware.com.settings.organization.OrganizationSettings>;
    }

    export class CreateOrganization {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        parameters: dev.docuware.com.settings.organization.CreateOrganizationParams;
    }

    export class CreateOrganizationResponse {

    }

    export class UpdateOrganization {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.organization.OrganizationSettings;
    }

    export class UpdateOrganizationResponse {

    }

    export class GetBusinessUseCaseHistory {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetBusinessUseCaseHistoryResponse {
        GetBusinessUseCaseHistoryResult: Array<dev.docuware.com.settings.settingsExchange.BusinessUseCaseHistory>;
    }

    export class GetReplicationHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.documentssync.ReplicationQuery;
    }

    export class GetReplicationHeadersResponse {
        GetReplicationHeadersResult: Array<dev.docuware.com.settings.bpsprocesses.common.BPSProcessHeader>;
    }

    export class GetReplications {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.documentssync.ReplicationQuery;
    }

    export class GetReplicationsResponse {
        GetReplicationsResult: Array<dev.docuware.com.settings.workflows.documentssync.Replication>;
    }

    export class SaveReplication {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.workflows.documentssync.Replication;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveReplicationResponse {

    }

    export class DeleteReplications {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflows.documentssync.ReplicationQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteReplicationsResponse {

    }

    export class GetPrinterConfigurationHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflow.processconfig.PrinterConfigurationQuery;
    }

    export class GetPrinterConfigurationHeadersResponse {
        GetPrinterConfigurationHeadersResult: Array<dev.docuware.com.settings.workflow.processdef.PrinterConfigurationHeader>;
    }

    export class GetPrinterConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflow.processconfig.PrinterConfigurationQuery;
    }

    export class GetPrinterConfigurationsResponse {
        GetPrinterConfigurationsResult: Array<dev.docuware.com.settings.workflow.processdef.PrinterConfiguration>;
    }

    export class SavePrinterConfiguration {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.workflow.processdef.PrinterConfiguration;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SavePrinterConfigurationResponse {

    }

    export class DeletePrinterConfigurations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflow.processconfig.PrinterConfigurationQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeletePrinterConfigurationsResponse {

    }

    export class GetProcessDefinitions {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflow.processdef.JobQuery;
    }

    export class GetProcessDefinitionsResponse {
        GetProcessDefinitionsResult: Array<dev.docuware.com.settings.workflow.processdef.PCProcessDef>;
    }

    export class ExistRelationship {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        relation: dev.docuware.com.settings.relations.Relationship;
    }

    export class ExistRelationshipResponse {
        ExistRelationshipResult: boolean;
    }

    export class AddRelationships {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        relations: Array<dev.docuware.com.settings.relations.Relationship>;
    }

    export class AddRelationshipsResponse {

    }

    export class RemoveRelationships {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.relations.RelationshipQuery;
    }

    export class RemoveRelationshipsResponse {

    }

    export class GetRelationships {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.relations.RelationshipQuery;
    }

    export class GetRelationshipsResponse {
        GetRelationshipsResult: Array<dev.docuware.com.settings.relations.Relationship>;
    }

    export class ReplaceRelationships {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        replaceQuery: dev.docuware.com.settings.relations.RelationshipQuery;
        relations: Array<dev.docuware.com.settings.relations.Relationship>;
    }

    export class ReplaceRelationshipsResponse {

    }

    export class TakeOwnershipOfUserDependencies {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        userGuid: string;
        deletePrivateSettings: boolean;
    }

    export class TakeOwnershipOfUserDependenciesResponse {

    }

    export class ExistResourceRelation {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        relation: dev.docuware.com.settings.relations.ResourceRelation;
    }

    export class ExistResourceRelationResponse {
        ExistResourceRelationResult: boolean;
    }

    export class AddResourceRelations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        relations: Array<dev.docuware.com.settings.relations.ResourceRelation>;
    }

    export class AddResourceRelationsResponse {

    }

    export class RemoveResourceRelations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.relations.ResourceRelationQuery;
    }

    export class RemoveResourceRelationsResponse {

    }

    export class GetResourceRelations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.relations.ResourceRelationQuery;
    }

    export class GetResourceRelationsResponse {
        GetResourceRelationsResult: Array<dev.docuware.com.settings.relations.ResourceRelation>;
    }

    export class ReplaceResourceRelations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        replaceQuery: dev.docuware.com.settings.relations.ResourceRelationQuery;
        relations: Array<dev.docuware.com.settings.relations.ResourceRelation>;
    }

    export class ReplaceResourceRelationsResponse {

    }

    export class GetScheduleSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.common.dwschedule.ScheduleSettingsQuery;
    }

    export class GetScheduleSettingsResponse {
        GetScheduleSettingsResult: Array<dev.docuware.com.settings.common.dwschedule.DwSchedule>;
    }

    export class SaveScheduleSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.common.dwschedule.DwSchedule;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveScheduleSettingsResponse {

    }

    export class DeleteScheduleSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.common.dwschedule.ScheduleSettingsQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteScheduleSettingsResponse {

    }

    export class HasRight {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        right: dev.docuware.com.settings.interop.DWFunctionalRights;
    }

    export class HasRightResponse {
        HasRightResult: boolean;
    }

    export class HasFileCabinetRight {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        cabinet: string;
        right: dev.docuware.com.settings.interop.DWFileCabinetRights;
    }

    export class HasFileCabinetRightResponse {
        HasFileCabinetRightResult: boolean;
    }

    export class HasLicenseInstalled {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        product: dev.docuware.com.settings.interop.DWProductTypes;
    }

    export class HasLicenseInstalledResponse {
        HasLicenseInstalledResult: boolean;
    }

    export class HasActiveLicense {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        product: dev.docuware.com.settings.interop.DWProductTypes;
    }

    export class HasActiveLicenseResponse {
        HasActiveLicenseResult: boolean;
    }

    export class GetSystemStoragePath {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetSystemStoragePathResponse {
        GetSystemStoragePathResult: string;
    }

    export class UpdateLicense {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        organization: string;
        licenseContent: string;
    }

    export class UpdateLicenseResponse {

    }

    export class AssignNamedLicenses {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        users: Array<string>;
    }

    export class AssignNamedLicensesResponse {

    }

    class RemoveUsersFromLicensesRequest {
        public session: dev.docuware.com.wafservice.ClientServiceSession;
        public licenses: Array<dev.docuware.com.settings.license.License>;
    }

    class RemoveUsersFromLicensesResponse {

    }

    class AssignUsersToLicensesRequest {
        public session: dev.docuware.com.wafservice.ClientServiceSession;
        public licenses: Array<dev.docuware.com.settings.license.License>;
    }

    class AssignUsersToLicensesResponse {

    }


    export class FreeNamedLicenses {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        users: Array<string>;
    }

    export class FreeNamedLicensesResponse {

    }

    export class GetLicenses {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.license.LicenseQuery;
    }

    export class GetLicensesResponse {
        GetLicensesResult: Array<dev.docuware.com.settings.license.License>;
    }

    export class HasAdminRight {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        sType: dev.docuware.com.settings.relations.RelationSettingsType;
        sID: string;
    }

    export class HasAdminRightResponse {
        HasAdminRightResult: boolean;
    }

    export class HasUsageRight {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        sType: dev.docuware.com.settings.relations.RelationSettingsType;
        sID: string;
    }

    export class HasUsageRightResponse {
        HasUsageRightResult: boolean;
    }

    export class LockSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        locks: Array<dev.docuware.com.settings.locks.LockItem>;
    }

    export class LockSettingsResponse {
        LockSettingsResult: Array<dev.docuware.com.settings.locks.LockResponse>;
    }

    export class ClearLock {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        _lock: dev.docuware.com.settings.locks.LockItem;
    }

    export class ClearLockResponse {

    }

    export class ClearLocks {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class ClearLocksResponse {

    }

    export class IsOnlineInstallation {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class IsOnlineInstallationResponse {
        IsOnlineInstallationResult: boolean;
    }

    export class IsBusinessInstallation {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class IsBusinessInstallationResponse {
        IsBusinessInstallationResult: boolean;
    }

    export class IsFreeSQLOrganization {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class IsFreeSQLOrganizationResponse {
        IsFreeSQLOrganizationResult: boolean;
    }

    export class IsHighSecurityUser {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        userGuid: string;
    }

    export class IsHighSecurityUserResponse {
        IsHighSecurityUserResult: boolean;
    }

    export class GetRegExHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.RegExQuery;
    }

    export class GetRegExHeadersResponse {
        GetRegExHeadersResult: Array<dev.docuware.com.settings.organization.RegExHeader>;
    }

    export class GetRegularExpressions {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.RegExQuery;
    }

    export class GetRegularExpressionsResponse {
        GetRegularExpressionsResult: Array<dev.docuware.com.settings.organization.RegularExpression>;
    }

    export class SaveRegularExpression {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.organization.RegularExpression;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveRegularExpressionResponse {

    }

    export class DeleteRegularExpression {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.RegExQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteRegularExpressionResponse {

    }

    export class GetLastChangedItems {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        checkItem: dev.docuware.com.settings.DWSettings;
    }

    export class GetLastChangedItemsResponse {
        GetLastChangedItemsResult: System.Collections.Generic.Dictionary<dev.docuware.com.settings.DWSettings, Date>;
    }

    export class GetWAFSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetWAFSettingsResponse {
        GetWAFSettingsResult: dev.docuware.com.settings.waf.WAFSettingsType;
    }

    export class GetWebInstanceHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebInstanceQuery;
    }

    export class GetWebInstanceHeadersResponse {
        GetWebInstanceHeadersResult: Array<dev.docuware.com.settings.web.WebInstanceHeader>;
    }

    export class GetWebInstances {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebInstanceQuery;
    }

    export class GetWebInstancesResponse {
        GetWebInstancesResult: Array<dev.docuware.com.settings.web.WebInstance>;
    }

    export class SaveWebInstance {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.web.WebInstance;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveWebInstanceResponse {

    }

    export class DeleteWebInstances {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebInstanceQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteWebInstancesResponse {

    }

    export class GetWebInstancesAsXML {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebInstanceQuery;
    }

    export class GetWebInstancesAsXMLResponse {
        GetWebInstancesAsXMLResult: Array<string>;
    }

    export class GetDocumentTypes {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.DocumentTypeQuery;
    }

    export class GetDocumentTypesResponse {
        GetDocumentTypesResult: Array<dev.docuware.com.settings.filecabinet.DocumentType>;
    }

    export class GetGlobalDocumentTypes {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.GlobalDocumentTypeQuery;
    }

    export class GetGlobalDocumentTypesResponse {
        GetGlobalDocumentTypesResult: Array<dev.docuware.com.settings.filecabinet.GlobalDocumentType>;
    }

    export class SaveDocumentType {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        data: dev.docuware.com.settings.filecabinet.DocumentType;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveDocumentTypeResponse {

    }

    export class DeleteDocumentTypes {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.filecabinet.DocumentTypeQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteDocumentTypesResponse {

    }

    export class GetSelectListHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.SelectListQuery;
    }

    export class GetSelectListHeadersResponse {
        GetSelectListHeadersResult: Array<dev.docuware.com.settings.organization.SelectListHeader>;
    }

    export class GetSelectLists {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.SelectListQuery;
    }

    export class GetSelectListsResponse {
        GetSelectListsResult: Array<dev.docuware.com.settings.organization.SelectList>;
    }

    export class SaveSelectList {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        data: dev.docuware.com.settings.organization.SelectList;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveSelectListResponse {

    }

    export class DeleteSelectLists {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.SelectListQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteSelectListsResponse {

    }

    export class GetStamps {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.stamp.StampQuery;
    }

    export class GetStampsResponse {
        GetStampsResult: Array<dev.docuware.com.settings.stamp.Stamp>;
    }

    export class GetStampHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.stamp.StampQuery;
    }

    export class GetStampHeadersResponse {
        GetStampHeadersResult: Array<dev.docuware.com.settings.stamp.StampHeader>;
    }

    export class SaveStamp {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        data: dev.docuware.com.settings.stamp.Stamp;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveStampResponse {

    }

    export class GetSubstitutionRuleHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.SubstitutionRuleQuery;
    }

    export class GetSubstitutionRuleHeadersResponse {
        GetSubstitutionRuleHeadersResult: Array<dev.docuware.com.settings.organization.SubstitutionRuleHeader>;
    }

    export class GetSubstitutionRules {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.SubstitutionRuleQuery;
    }

    export class GetSubstitutionRulesResponse {
        GetSubstitutionRulesResult: Array<dev.docuware.com.settings.organization.SubstitutionRule>;
    }

    export class GetSubstitutionListHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.SubstitutionListQuery;
    }

    export class GetSubstitutionListHeadersResponse {
        GetSubstitutionListHeadersResult: Array<dev.docuware.com.settings.organization.SubstitutionListHeader>;
    }

    export class GetSubstitutionLists {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.SubstitutionListQuery;
    }

    export class GetSubstitutionListsResponse {
        GetSubstitutionListsResult: Array<dev.docuware.com.settings.organization.SubstitutionList>;
    }

    export class GetDependencies {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.dependencies.DependencyQuery;
    }

    export class GetDependenciesResponse {
        GetDependenciesResult: Array<dev.docuware.com.settings.dependencies.DependencyRecord>;
    }

    export class GetFieldDependencies {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        fieldGuid: string;
        cabinetGuid: string;
    }

    export class GetFieldDependenciesResponse {
        GetFieldDependenciesResult: Array<dev.docuware.com.settings.dependencies.DependencyRecord>;
    }

    export class GetFileExtensions {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.FileExtensionListQuery;
    }

    export class GetFileExtensionsResponse {
        GetFileExtensionsResult: Array<dev.docuware.com.settings.organization.FileExtensionList>;
    }

    export class GetFileExtensionHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.FileExtensionListQuery;
    }

    export class GetFileExtensionHeadersResponse {
        GetFileExtensionHeadersResult: Array<dev.docuware.com.settings.organization.FileExtensionListHeader>;
    }

    export class GetOrgSMTPConnectionsRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.OrgSMTPConnectionQuery;
    }

    export class GetOrgSMTPConnectionsResponse {
        getOrgSMTPConnectionsResult: Array<dev.docuware.com.settings.organization.OrgSMTPConnection>;
    }

    export class GetOrgSMTPConnectionHeadersRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.OrgSMTPConnectionQuery;
    }

    export class GetOrgSMTPConnectionHeadersResponse {
        getOrgSMTPConnectionHeadersResult: Array<dev.docuware.com.settings.system.SMTPConnectionHeader>;
    }

    export class SaveOrgSMTPConnectionRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        orgSmtpConnection: dev.docuware.com.settings.organization.OrgSMTPConnection;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveOrgSMTPConnectionResponse {

    }

    export class DeleteOrgSMTPConnectionsRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.OrgSMTPConnectionQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteOrgSMTPConnectionsResponse {

    }

    export class GetSMTPOrgAssignmentsRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: DocuWare.WAFServices.DataContracts.Organization.SMTPOrgAssignmentQuery;
    }

    export class GetSMTPOrgAssignmentsResponse {
        getSMTPOrgAssignmentsResult: Array<dev.docuware.com.settings.organization.SMTPOrgAssignment>;
    }

    export class SaveSMTPOrgAssignmentRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        smtpOrgAssignment: dev.docuware.com.settings.organization.SMTPOrgAssignment;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveSMTPOrgAssignmentResponse {

    }

    export class DeleteSMTPOrgAssignmentsRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: DocuWare.WAFServices.DataContracts.Organization.SMTPOrgAssignmentQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteSMTPOrgAssignmentsResponse {

    }

    export class CountSmartConnects {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.recognition.smartconnect.SmartConnectQuery;
    }

    export class CountSmartConnectsResponse {
        CountSmartConnectsResult: number;
    }

    export class GetSmartConnectHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.recognition.smartconnect.SmartConnectQuery;
    }

    export class GetSmartConnectHeadersResponse {
        GetSmartConnectHeadersResult: Array<dev.docuware.com.settings.recognition.smartconnect.SmartConnectHeader>;
    }

    export class GetSmartConnect {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        guid: string;
        flags: dev.docuware.com.settings.recognition.smartconnect.SmartConnectContentFilterFlags;
    }

    export class GetSmartConnectResponse {
        GetSmartConnectResult: dev.docuware.com.settings.recognition.smartconnect.SmartConnectConfiguration;
    }

    export class GetSmartConnects {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.recognition.smartconnect.SmartConnectQuery;
    }

    export class GetSmartConnectsResponse {
        GetSmartConnectsResult: Array<dev.docuware.com.settings.recognition.smartconnect.SmartConnectConfiguration>;
    }

    export class SaveSmartConnect {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        config: dev.docuware.com.settings.recognition.smartconnect.SmartConnectConfiguration;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveSmartConnectResponse {

    }

    export class DeleteSmartConnects {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.recognition.smartconnect.SmartConnectQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteSmartConnectsResponse {

    }

    export class GetServerHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.ServerQuery;
    }

    export class GetServerHeadersResponse {
        GetServerHeadersResult: Array<dev.docuware.com.settings.system.ServerHeader>;
    }

    export class GetServers {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.ServerQuery;
    }

    export class GetServersResponse {
        GetServersResult: Array<dev.docuware.com.settings.system.ServerSettings>;
    }

    export class GetDatabaseConnectionHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.DatabaseConnectionQuery;
    }

    export class GetDatabaseConnectionHeadersResponse {
        GetDatabaseConnectionHeadersResult: Array<dev.docuware.com.settings.system.DatabaseConnectionHeader>;
    }

    export class GetDatabaseConnections {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.DatabaseConnectionQuery;
    }

    export class GetDatabaseConnectionsResponse {
        GetDatabaseConnectionsResult: Array<dev.docuware.com.settings.system.DatabaseConnection>;
    }

    export class SaveDatabaseConnection {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        connection: dev.docuware.com.settings.system.DatabaseConnection;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveDatabaseConnectionResponse {

    }

    export class GetStorageLocationHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.StorageLocationQuery;
    }

    export class GetStorageLocationHeadersResponse {
        GetStorageLocationHeadersResult: Array<dev.docuware.com.settings.system.StorageLocationHeader>;
    }

    export class GetStorageLocations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.StorageLocationQuery;
    }

    export class GetStorageLocationsResponse {
        GetStorageLocationsResult: Array<dev.docuware.com.settings.system.StorageLocation>;
    }

    export class SaveStorageLocation {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        location: dev.docuware.com.settings.system.StorageLocation;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveStorageLocationResponse {

    }

    export class GetFileConnectionHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.FileConnectionQuery;
    }

    export class GetFileConnectionHeadersResponse {
        GetFileConnectionHeadersResult: Array<dev.docuware.com.settings.organization.FileConnectionHeader>;
    }

    export class GetFileConnections {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.organization.FileConnectionQuery;
    }

    export class GetFileConnectionsResponse {
        GetFileConnectionsResult: Array<dev.docuware.com.settings.organization.FileConnection>;
    }

    export class SaveFileConnection {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        connection: dev.docuware.com.settings.organization.FileConnection;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveFileConnectionResponse {

    }

    export class GetSMTPConnectionHeadersRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.SMTPConnectionQuery;
    }

    export class GetSMTPConnectionHeadersResponse {
        getSMTPConnectionHeadersResult: Array<dev.docuware.com.settings.system.SMTPConnectionHeader>;
    }

    export class GetSMTPConnectionsRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.SMTPConnectionQuery;
    }

    export class GetSMTPConnectionsResponse {
        getSMTPConnectionsResult: Array<dev.docuware.com.settings.system.SMTPConnection>;
    }

    export class SaveSMTPConnectionRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        connection: dev.docuware.com.settings.system.SMTPConnection;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveSMTPConnectionResponse {

    }

    export class DeleteSMTPConnectionsRequest {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.SMTPConnectionQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteSMTPConnectionsResponse {

    }

    export class GetSolrConnectionHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.SolrConnectionQuery;
    }

    export class GetSolrConnectionHeadersResponse {
        GetSolrConnectionHeadersResult: Array<dev.docuware.com.settings.system.SolrConnectionHeader>;
    }

    export class GetSolrConnections {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.SolrConnectionQuery;
    }

    export class GetSolrConnectionsResponse {
        GetSolrConnectionsResult: Array<dev.docuware.com.settings.system.SolrConnection>;
    }

    export class SaveSolrConnection {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        connection: dev.docuware.com.settings.system.SolrConnection;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveSolrConnectionResponse {

    }

    export class GetWebConnectionHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebConnectionQuery;
    }

    export class GetWebConnectionHeadersResponse {
        GetWebConnectionHeadersResult: Array<dev.docuware.com.settings.web.WebConnectionHeader>;
    }

    export class GetWebConnections {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebConnectionQuery;
    }

    export class GetWebConnectionsResponse {
        GetWebConnectionsResult: Array<dev.docuware.com.settings.web.WebConnection>;
    }

    export class GetIntellixConnectionHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.IntellixConnectionQuery;
    }

    export class GetIntellixConnectionHeadersResponse {
        GetIntellixConnectionHeadersResult: Array<dev.docuware.com.settings.system.IntellixConnectionHeader>;
    }

    export class GetIntellixConnections {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.IntellixConnectionQuery;
    }

    export class GetIntellixConnectionsResponse {
        GetIntellixConnectionsResult: Array<dev.docuware.com.settings.system.IntellixConnection>;
    }

    export class InstallIntellixConnection {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        options: dev.docuware.com.settings.system.IntellixInstallationsOptions;
    }

    export class InstallIntellixConnectionResponse {

    }

    export class DeleteIntellixConnections {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.IntellixConnectionQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteIntellixConnectionsResponse {

    }

    export class UpdateIntellixConnection {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        connection: dev.docuware.com.settings.system.IntellixConnection;
    }

    export class UpdateIntellixConnectionResponse {

    }

    export class GetExternalAppHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.ExternalApplicationQuery;
    }

    export class GetExternalAppHeadersResponse {
        GetExternalAppHeadersResult: Array<dev.docuware.com.settings.system.ExternalApplicationHeader>;
    }

    export class GetExternalApplicationSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.ExternalApplicationQuery;
    }

    export class GetExternalApplicationSettingsResponse {
        GetExternalApplicationSettingsResult: Array<dev.docuware.com.settings.system.ExternalApplication>;
    }

    export class SaveExternalApplicationSetting {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        setting: dev.docuware.com.settings.system.ExternalApplication;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveExternalApplicationSettingResponse {

    }

    export class DeleteExternalApplicationSettings {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.system.ExternalApplicationQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteExternalApplicationSettingsResponse {

    }

    export class CheckDatabaseConnectionAccess {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        connection: dev.docuware.com.settings.system.DatabaseConnection;
    }

    export class CheckDatabaseConnectionAccessResponse {

    }

    export class GetSampleData {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        connection: dev.docuware.com.settings.system.DatabaseConnection;
        testSQL: string;
    }

    export class GetSampleDataResponse {
        GetSampleDataResult: System.Collections.Generic.Dictionary<string, Array<string>>;
    }

    export class GetSampleDataByGuid {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        dbConnectionGuid: dev.docuware.com.settings.system.DatabaseConnection;
        testSQL: string;
    }

    export class GetSampleDataByGuidResponse {
        GetSampleDataResult: System.Collections.Generic.Dictionary<string, Array<string>>;
    }

    export class IsHighSecuritySystem {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetFunctionalRights {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        userID: string;
    }

    export class GetFunctionalRightsResponse {
        rights: Array<dev.docuware.com.settings.interop.DWFunctionalRights>;
    }

    export class AssignFunctionalRights {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        userID: string;
        rights: Array<dev.docuware.com.settings.interop.DWFunctionalRights>;
    }

    export class AssignFunctionalRightsResponse {
    }

    export class IsHighSecuritySystemResponse {
        IsHighSecuritySystemResult: boolean;
    }

    export class GetUserApplicationPreferences {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        userQuery: dev.docuware.com.settings.usermanagement.UserQuery;
    }

    export class GetUserApplicationPreferencesResponse {
        GetUserApplicationPreferencesResult: Array<dev.docuware.com.settings.web.UserApplicationPreferences>;
    }

    export class SaveUserApplicationPreferences {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        preferences: dev.docuware.com.settings.web.UserApplicationPreferences;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveUserApplicationPreferencesResponse {

    }

    export class DeleteUserApplicationPreferences {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.UserQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteUserApplicationPreferencesResponse {

    }

    export class ChangeUserPassword {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        userKey: string;
        oldPassword: string;
        newPassword: string;
    }

    export class ChangeUserPasswordResponse {

    }

    export class GetPictures {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.UserQuery;
    }

    export class GetPicturesResponse {
        GetPicturesResult: System.Collections.Generic.Dictionary<string, Array<number>>;
    }

    export class SetPicture {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        userKey: string;
        picture: Array<number>;
    }

    export class SetPictureResponse {

    }

    export class GetUserHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.UserQuery;
    }

    export class GetUserHeadersResponse {
        GetUserHeadersResult: Array<dev.docuware.com.settings.usermanagement.UserHeader>;
    }

    export class GetUsers {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.UserQuery;
    }

    export class GetUsersResponse {
        GetUsersResult: Array<dev.docuware.com.settings.usermanagement.DWUser>;
    }

    export class SaveUser {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.usermanagement.DWUser;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveUserResponse {

    }

    export class DeleteUsers {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.UserQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteUsersResponse {

    }

    export class GetTrustedUserHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.TrustedUserQuery;
    }

    export class GetTrustedUserHeadersResponse {
        GetTrustedUserHeadersResult: Array<dev.docuware.com.settings.usermanagement.TrustedUserHeader>;
    }

    export class GetTrustedUsers {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.TrustedUserQuery;
    }

    export class GetTrustedUsersResponse {
        GetTrustedUsersResult: Array<dev.docuware.com.settings.usermanagement.TrustedUser>;
    }

    export class GetRoleHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.RoleQuery;
    }

    export class GetRoleHeadersResponse {
        GetRoleHeadersResult: Array<dev.docuware.com.settings.usermanagement.RoleHeader>;
    }

    export class GetRoles {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.RoleQuery;
    }

    export class GetRolesResponse {
        GetRolesResult: Array<dev.docuware.com.settings.usermanagement.Role>;
    }

    export class SaveRole {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.usermanagement.Role;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveRoleResponse {

    }

    export class DeleteRoles {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.RoleQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteRolesResponse {

    }

    export class GetGeneralProfileHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.GeneralProfileQuery;
    }

    export class GetGeneralProfileHeadersResponse {
        GetGeneralProfileHeadersResult: Array<dev.docuware.com.settings.usermanagement.GeneralProfileHeader>;
    }

    export class GetGeneralProfiles {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.GeneralProfileQuery;
    }

    export class GetGeneralProfilesResponse {
        GetGeneralProfilesResult: Array<dev.docuware.com.settings.usermanagement.GeneralProfile>;
    }

    export class SaveGeneralProfile {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.usermanagement.GeneralProfile;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveGeneralProfileResponse {

    }

    export class DeleteGeneralProfiles {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.GeneralProfileQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteGeneralProfilesResponse {

    }

    export class GetGroupHeaders {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.GroupQuery;
    }

    export class GetGroupHeadersResponse {
        GetGroupHeadersResult: Array<dev.docuware.com.settings.usermanagement.GroupHeader>;
    }

    export class GetGroups {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.GroupQuery;
    }

    export class GetGroupsResponse {
        GetGroupsResult: Array<dev.docuware.com.settings.usermanagement.Group>;
    }

    export class SaveGroup {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.usermanagement.Group;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveGroupResponse {

    }

    export class DeleteGroups {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.usermanagement.GroupQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteGroupsResponse {

    }

    export class GetWebBasketLocations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebBasketLocationQuery;
    }

    export class GetWebBasketLocationsResponse {
        GetWebBasketLocationsResult: Array<dev.docuware.com.settings.web.WebBasketLocation>;
    }

    export class SaveBasketLocation {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.web.WebBasketLocation;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveBasketLocationResponse {

    }

    export class DeleteBasketLocations {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebBasketLocationQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteBasketLocationsResponse {

    }

    export class GetWebBaskets {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebBasketQuery;
    }

    export class GetWebBasketsResponse {
        GetWebBasketsResult: Array<dev.docuware.com.settings.web.WebBasket>;
    }

    export class SaveWebBasket {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.web.WebBasket;
        flags: dev.docuware.com.settings.interop.SaveFlags;
    }

    export class SaveWebBasketResponse {

    }

    export class DeleteWebBaskets {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebBasketQuery;
        flags: dev.docuware.com.settings.interop.DeleteFlags;
    }

    export class DeleteWebBasketsResponse {

    }
}

declare module dev.docuware.com.services {
    export class GetWorkflowDefinitions {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetWorkflowDefinitionsResponse {
        GetWorkflowDefinitionsResult: Array<dev.docuware.com.bpw.WorkflowDefinition>;
    }

    export class GetWorkflowDefinitionsWithoutVersions {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetWorkflowDefinitionsWithoutVersionsResponse {
        GetWorkflowDefinitionsWithoutVersionsResult: Array<dev.docuware.com.bpw.WorkflowDefinition>;
    }

    export class GetWorkflowDefinitionById {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        id: string;
    }

    export class GetWorkflowDefinitionByIdResponse {
        GetWorkflowDefinitionByIdResult: dev.docuware.com.bpw.WorkflowDefinition;
    }

    export class UpdateWorkflowDefinition {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wf: dev.docuware.com.bpw.WorkflowDefinition;
    }

    export class UpdateWorkflowDefinitionResponse {
        UpdateWorkflowDefinitionResult: dev.docuware.com.bpw.WorkflowDefinition;
    }

    export class GetWorkflowVersionsById {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfId: string;
    }

    export class GetWorkflowVersionsByIdResponse {
        GetWorkflowVersionsByIdResult: Array<dev.docuware.com.bpw.WorkflowVersion>;
    }

    export class GetWfVersionsByIds {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfIds: Array<string>;
    }

    export class GetWfVersionsByIdsResponse {
        GetWfVersionsByIdsResult: Array<dev.docuware.com.bpw.WorkflowVersion>;
    }

    export class GetWfCurrentVersions {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfIds: Array<string>;
    }

    export class GetWfCurrentVersionsResponse {
        GetWfCurrentVersionsResult: Array<string>;
    }

    export class UpdateWorkflowVersion {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfv: dev.docuware.com.bpw.WorkflowVersion;
    }

    export class UpdateWorkflowVersionResponse {
        UpdateWorkflowVersionResult: dev.docuware.com.bpw.WorkflowVersion;
    }

    export class UpdateWorkflowAccessInfo {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfv: dev.docuware.com.bpw.WorkflowVersion;
    }

    export class UpdateWorkflowAccessInfoResponse {
        UpdateWorkflowAccessInfoResult: dev.docuware.com.bpw.WorkflowVersion;
    }

    export class PublishWorkflow {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfv: dev.docuware.com.bpw.WorkflowVersion;
        workflowDefinition: dev.docuware.com.bpw.WorkflowDefinition;
    }

    export class PublishWorkflowResponse {
        PublishWorkflowResult: Date;
    }

    export class UnpublishWorkflow {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        definitionId: string;
    }

    export class UnpublishWorkflowResponse {

    }

    export class GetWorkflowActiveInstances {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        workflowId: string;
        fileCabinetId: string;
    }

    export class GetWorkflowActiveInstancesResponse {
        GetWorkflowActiveInstancesResult: Array<dev.docuware.com.bpw.Instance>;
    }

    export class GetWorkflowActiveInstancesCount {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        workflowId: string;
        fileCabinetId: string;
    }

    export class GetWorkflowActiveInstancesCountResponse {
        GetWorkflowActiveInstancesCountResult: number;
    }

    export class WorkflowNameExists {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        fileName: string;
    }

    export class WorkflowNameExistsResponse {
        WorkflowNameExistsResult: boolean;
    }

    export class GetDBConnectionTableNames {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        dbConnectionGuid: string;
    }

    export class GetDBConnectionTableNamesResponse {
        GetDBConnectionTableNamesResult: Array<string>;
    }

    export class GetDBConnectionTableColumnNames {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        dbConnectionGuid: string;
        tableName: string;
    }

    export class GetDBConnectionTableColumnNamesResponse {
        GetDBConnectionTableColumnNamesResult: Array<dev.docuware.com.bpw.DataField>;
    }

    export class GetDefaultWorkflowName {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        defaultWfName: string;
    }

    export class GetDefaultWorkflowNameResponse {
        GetDefaultWorkflowNameResult: string;
    }

    export class SavePermissions {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wf: dev.docuware.com.bpw.WorkflowPermissions;
    }

    export class SavePermissionsResponse {

    }

    export class GetPermissions {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfId: string;
    }

    export class GetPermissionsResponse {
        GetPermissionsResult: dev.docuware.com.bpw.WorkflowPermissions;
    }

    export class DeleteWorkflow {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        definitionId: string;
    }

    export class DeleteWorkflowResponse {

    }

    export class GetSelectListData {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        selectListGuid: string;
        fieldType: dev.docuware.com.bpw.DataTypeEnum;
        additionalParameter: number;
        recordCount: number;
    }

    export class GetSelectListDataResponse {
        GetSelectListDataResult: Array<any>;
    }

    export class GetWfVersionsActiveInstances {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfVersionIds: Array<string>;
    }

    export class GetWfVersionsActiveInstancesResponse {
        GetWfVersionsActiveInstancesResult: Array<dev.docuware.com.bpw.WfVersionActiveInstances>;
    }

    export class UpdateTaskListDefinition {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfVersionId: string;
        wfId: string;
        xmlData: dev.docuware.com.bpw.WorkflowVersionXmlData;
        wfXmlData: dev.docuware.com.bpw.WorkflowXmlData;
    }

    export class UpdateTaskListDefinitionResponse {

    }

    export class UpdateWorkflowName {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        workflowId: string;
        workflowName: string;
    }

    export class UpdateWorkflowNameResponse {

    }

    export class UpdateSystemActivityToken {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        workflowId: string;
        systemActivityToken: string;
        systemUserName: string;
        systemUserPassword: string;
        userInformation: dev.docuware.com.bpw.ExternalEntity;
    }

    export class UpdateSystemActivityTokenResponse {

    }

    export class ResumeUserCredentialsActivities {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        systemUserName: string;
        loginToken: string;
        workflowVersionGuid: string;
    }

    export class ResumeUserCredentialsActivitiesResponse {

    }

    export class StopActiveInstances {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        instances: System.Collections.Generic.Dictionary<string, Array<string>>;
    }

    export class StopActiveInstancesResponse {

    }

    export class GetProcessStatus {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settingsGuid: string;
    }

    export class GetProcessStatusResponse {
        GetProcessStatusResult: dev.docuware.com.settings.workflowservice.DBWorkflowStatus;
    }

    export class StartWorkflow {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfGuid: string;
    }

    export class StartWorkflowResponse {
        StartWorkflowResult: boolean;
    }

    export class StopWorkflow {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfGuid: string;
    }

    export class StopWorkflowResponse {
        StopWorkflowResult: boolean;
    }

    export class RunOnce {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfGuid: string;
    }

    export class RunOnceResponse {
        RunOnceResult: boolean;
    }

    export class GetWFStatus {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfGuid: string;
    }

    export class GetWFStatusResponse {
        GetWFStatusResult: dev.docuware.com.settings.workflowservice.RuntimeWorkflowStatus;
    }

    export class GetFirstAccessibleWFServerGuid {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetFirstAccessibleWFServerGuidResponse {
        GetFirstAccessibleWFServerGuidResult: string;
    }

    export class GetDBWorkflowStatus {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfGuid: string;
    }

    export class GetDBWorkflowStatusResponse {
        GetDBWorkflowStatusResult: dev.docuware.com.settings.workflowservice.DBWorkflowStatus;
    }

    export class ChangeRequestLoginToken {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfGuid: string;
        token: string;
    }

    export class ChangeRequestLoginTokenResponse {

    }

    export class CalculateDWRequestLiteSize {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.workflowservice.DocumentSizeQuery;
    }

    export class CalculateDWRequestLiteSizeResponse {
        CalculateDWRequestLiteSizeResult: number;
    }

    export class GetNextExecutionDateTime {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfGuid: string;
    }

    export class GetNextExecutionDateTimeResponse {
        GetNextExecutionDateTimeResult: Date;
    }

    export class GetDWImportRequestSources {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        storageLocationGuid: string;
    }

    export class GetDWImportRequestSourcesResponse {
        GetDWImportRequestSourcesResult: Array<string>;
    }

    export class Resume {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        wfGuid: string;
        resumeType: dev.docuware.com.settings.workflowservice.WaitResultType;
        resumeData: any;
    }

    export class ResumeResponse {
        ResumeResult: boolean;
    }

    export class DocumentsStored {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebBasketQuery;
    }

    export class DocumentsStoredResponse {
        DocumentsStoredResult: System.Collections.Generic.Dictionary<string, number>;
    }

    export class GetFreeSpace {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebBasketQuery;
    }

    export class GetFreeSpaceResponse {
        GetFreeSpaceResult: System.Collections.Generic.Dictionary<string, number>;
    }

    export class GetUsedSpace {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebBasketQuery;
    }

    export class GetUsedSpaceResponse {
        GetUsedSpaceResult: System.Collections.Generic.Dictionary<string, number>;
    }

    export class GetBasketsInfoByLocation {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        query: dev.docuware.com.settings.web.WebBasketLocationQuery;
    }

    export class GetBasketsInfoByLocationResponse {
        GetBasketsInfoByLocationResult: Array<dev.docuware.com.settings.web.WebBasketInfo>;
    }

    export class GetExternalSelectListData {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.organization.SelectList;
        limit: number;
    }

    export class GetExternalSelectListDataResponse {
        GetExternalSelectListDataResult: Array<any>;
    }

    export class GetTablesNames {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.organization.DynamicSelectList;
    }

    export class GetTablesNamesResponse {
        GetTablesNamesResult: Array<string>;
    }

    export class GetTablesAndViewsSeperated {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.organization.DynamicSelectList;
    }

    export class GetTablesAndViewsSeperatedResponse {
        GetTablesAndViewsSeperatedResult: Array<System.TupleOfstringstring>;
    }

    export class GetColumnNames {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.organization.DynamicSelectList;
    }

    export class GetColumnNamesResponse {
        GetColumnNamesResult: Array<string>;
    }

    export class CheckForSelectListAssignmentIssues {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        fileCabinet: string;
        field: string;
        settings: dev.docuware.com.settings.organization.SelectList;
        columnName: string;
    }

    export class CheckForSelectListAssignmentIssuesResponse {
        CheckForSelectListAssignmentIssuesResult: string;
    }

    export class CanSelectListByAssignedToField {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        settings: dev.docuware.com.settings.organization.SelectList;
        columnName: string;
        field: dev.docuware.com.settings.filecabinet.Field;
    }

    export class CanSelectListByAssignedToFieldResponse {
        CanSelectListByAssignedToFieldResult: boolean;
    }

    export class GetIntellixDocTypeMetadata {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetIntellixDocTypeMetadataResponse {
        GetIntellixDocTypeMetadataResult: Array<dev.docuware.com.settings.interop.FieldMetaDataResultItem>;
    }

    export class CheckAccessOfIntellixConnection {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        connectionGuid: string;
    }

    export class CheckAccessOfIntellixConnectionResponse {
        CheckAccessOfIntellixConnectionResult: boolean;
    }

    export class GetLocalDataSources {
        session: dev.docuware.com.wafservice.ClientServiceSession;
    }

    export class GetLocalDataSourcesResponse {
        GetLocalDataSourcesResult: Array<System.TupleOfguidstring>;
    }

    export class GetLocalDataSourceColumnNames {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        ldsGuid: string;
    }

    export class GetLocalDataSourceColumnNamesResponse {
        GetLocalDataSourceColumnNamesResult: Array<string>;
    }

    export class GetLocalDataSourceColumns {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        ldsGuid: string;
    }

    export class GetLocalDataSourceColumnsResponse {
        GetLocalDataSourceColumnsResult: Array<DocuWare.WAFServices.DataContracts.ContentService.LocalDbColumn>;
    }

    export class GetAIDBColumns {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        dbConnectionGuid: string;
        dbType: dev.docuware.com.settings.workflows.autoindex.DatabaseType;
        dbQuery: string;
    }

    export class GetAIDBColumnsResponse {
        GetAIDBColumnsResult: Array<dev.docuware.com.settings.workflows.autoindex.DataSourceField>;
    }

    export class GetAIFileColumns {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        fileConnectionGuid: string;
    }

    export class GetAIFileColumnsResponse {
        GetAIFileColumnsResult: Array<dev.docuware.com.settings.workflows.autoindex.DataSourceField>;
    }

    export class GetExistingDatabaseTables {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        dbConnectionGuid: string;
    }

    export class GetExistingDatabaseTablesResponse {
        GetExistingDatabaseTablesResult: Array<string>;
    }

    export class GetExistingDatabaseViews {
        session: dev.docuware.com.wafservice.ClientServiceSession;
        dbConnectionGuid: string;
    }

    export class GetExistingDatabaseViewsResponse {
        GetExistingDatabaseViewsResult: Array<string>;
    }
}

declare module dev.docuware.com.settings.audit {
    export class SystemAuditEntries {
        AuditEntries: Array<dev.docuware.com.settings.audit.SystemAuditEntry>;
    }

    export class SystemAuditEntry extends dev.docuware.com.settings.audit.BaseAuditEntry {
        EventType: dev.docuware.com.settings.audit.SystemSettingsEventType;
        SettingsChangedType: dev.docuware.com.settings.audit.SystemSettingsType;
    }

    export class BaseAuditEntry {
        AuditEntryId: string;
        AuditEntryLoggedDate: Date;
        DocId: number;
        SettingsChangedName: string;
        UserInitiatingChange: string;
    }

    export class OrganizationAuditEntry extends dev.docuware.com.settings.audit.BaseAuditEntry {
        EventType: dev.docuware.com.settings.audit.OrganizationSettingsEventType;
        OrganizationId: number;
        SettingsChangedType: dev.docuware.com.settings.audit.OrganizationSettingsType;
    }

    export class FileCabinetAuditEntry extends dev.docuware.com.settings.audit.BaseAuditEntry {
        DocId: number;
        EventType: dev.docuware.com.settings.audit.FileCabinetEventType;
        SettingsChangedType: dev.docuware.com.settings.audit.FileCabinetSettingsType;
    }

    const enum SystemSettingsEventType {
        Created = 0,
        Edited = 1,
        Deleted = 2,

        //Auditing
        EnableAudit = 3,
        DisableAudit = 4,
        DeleteAudit = 5
    }

    const enum SystemSettingsType {
        GeneralSystem = 0,
        AuthenticationServer = 1,
        ProcessServer = 2,
        DatabaseConnection = 3,
        StorageLocation = 4,
        ExternalUserDirectory = 5,
        SystemBackupWorkflow = 6,
        NotificationServer = 7,
        Schedules = 8,
        IntellixConnection = 9,
        SolrConnection = 10,
        WebConnection = 11,
        SmtpConnection = 12,
        Auditing = 13
    }

    const enum OrganizationSettingsEventType {
        Created = 0,
        Edited = 1,
        Deleted = 2,

        //Runtime
        LogIn = 3,
        LogOff = 4,

        //Auditing
        EnableAudit = 5,
        DisableAudit = 6,
        DeleteAudit = 7
    }

    const enum OrganizationSettingsType {
        Licence = 0,
        Stamp = 1,
        User = 2,
        GeneralProfile = 3,
        Group = 4,
        Role = 5,
        ExternalSelectList = 6,
        Autoindex = 7,
        Deletion = 8,
        Export = 9,
        Replication = 10,
        UserSync = 11,
        FileConnection = 12,
        DwRequestLite = 13,
        DwImportRequest = 14,
        SubstitutionRules = 15,
        SmartConnect = 16,
        ConnectToOutlookAccess = 17,
        ConnectToOutlookMonitor = 18,
        ConnectToOutlookConfiguration = 19,
        DocumentType = 20,
        Organization = 21,
        EmailConfiguration = 22,
        FileExtension = 23,
        Forms = 24,
        MfpDevice = 25,
        MfpWorkflow = 26,
        NotificationSettings = 27,
        Obr = 28,
        Ocr = 29,
        PrinterConfiguration = 30,
        RegularExpression = 31,
        TrustedUser = 32,
        WebBasket = 33,
        WebInstances = 34,
        FileCabinet = 35,
        BusinessUseCase = 36,
        WebBasketLocation = 37,
        Auditing = 38,
        FixedSelectList = 39,
        SmtpConnection = 40,
        WebServices = 41,
        SubstitutionList = 42
    }

    const enum FileCabinetEventType {
        //Settings
        CreateSettings = 0,
        EditSettings = 1,
        DeleteSettings = 2,

        //Content
        Store = 3,
        EditContent = 4,
        EditIndexData = 5,
        EditAnnotations = 6,
        Delete = 7,
        Print = 8,
        Email = 9,
        Export = 10,
        CopyToTray = 11,
        CheckoutToTray = 12,
        CheckoutToFileSystem = 13,
        UndoCheckout = 14,
        Clip = 15,
        DeleteVersionHistory = 16,
        Open = 17,
        //Not used for now
        CreateRequest = 18,
        WorkflowDecisionMade = 19,

        //Auditing
        EnableAudit = 20,
        DisableAudit = 21,
        DeleteAudit = 22
    }

    const enum FileCabinetSettingsType {
        FileCabinetSettings = 0,
        FileCabinetGeneral = 1,
        Database = 2,
        DocumentSettings = 3,
        Disk = 4,
        Field = 5,
        Profile = 6,
        SearchDialog = 7,
        StoreDialog = 8,
        ResultList = 9,
        Link = 10,
        AutoNumber = 11,

        //Content
        Document = 12,

        Auditing = 13
    }

    export class AdditionalAuditData {
        AdditionalDataValues: Array<dev.docuware.com.settings.audit.AdditionalDataValue>;
        AdditionalDataTableValues: Array<dev.docuware.com.settings.audit.AdditionalDataTableValue>;
    }

    export class AdditionalDataTableValue {
        Columns: Array<dev.docuware.com.settings.audit.AdditionalDataTableColumn>;
        Name: string;
        NewValues: Array<dev.docuware.com.settings.audit.AdditionalDataTableRow>;
        OldValues: Array<dev.docuware.com.settings.audit.AdditionalDataTableRow>;
    }

    export class AdditionalDataValue {
        CurrentValue: string;
        PreviousValue: string;
        PropertyName: string;
        PropertyType: AuditEntryPropertyType;
    }

    export class AdditionalDataTableColumn {
        Name: string;
        Type: dev.docuware.com.settings.audit.AuditEntryPropertyType;
    }

    export class AdditionalDataTableRow {
        CellValues: Array<string>;
    }

    export class OrganizationAuditEntries {
        AuditEntries: Array<dev.docuware.com.settings.audit.OrganizationAuditEntry>;
    }

    export class FileCabinetAuditEntries {
        AuditEntries: Array<dev.docuware.com.settings.audit.FileCabinetAuditEntry>;
    }

    const enum AuditEntryPropertyType {
        Text = 0,
        Number = 1,
        Date = 2,
        DateTime = 3
    }
}

declare module dev.docuware.com.settings.settingsExchange {
    export class BusinessUseCaseHistory {
        DateOfImport: Date;
        Id: number;
        Name: string;
        Oid: number;
    }
}

declare module dev.docuware.com.settings.webservices {
    export class WebServiceQuery extends dev.docuware.com.settings.organization.OrganizationQuery {

    }

    export class WebServiceHeader extends dev.docuware.com.settings.interop.SettingsHeader {
        URL: string;
        Description: string;
    }

    export class WebServiceSettings extends dev.docuware.com.settings.interop.SettingWithWebServiceHeader {
        AuthenticationSettings: dev.docuware.com.settings.webservices.BaseAuthenticationSettings;
    }

    export class BaseAuthenticationSettings {
        Username: string;
        Password: string;
    }
}